To: vim_dev@googlegroups.com
Subject: Patch 8.1.1483
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
------------

Patch 8.1.1483
Problem:    Skipped tests are not properly listed.
Solution:   Throw a "Skipped" exception instead of using ":finish" or ":return".
Files:	    src/testdir/test_breakindent.vim, src/testdir/test_cdo.vim,
            src/testdir/test_channel.vim, src/testdir/test_clientserver.vim,
            src/testdir/test_balloon.vim, src/testdir/test_conceal.vim,
            src/testdir/test_debugger.vim, src/testdir/test_diffmode.vim,
            src/testdir/test_fold.vim, src/testdir/test_highlight.vim,
            src/testdir/test_popup.vim, src/testdir/test_popupwin.vim,
            src/testdir/test_search.vim, src/testdir/test_startup.vim,
            src/testdir/test_startup_utf8.vim, src/testdir/test_syntax.vim,
            src/testdir/test_tabpage.vim, src/testdir/test_termencoding.vim,
            src/testdir/test_terminal.vim, src/testdir/test_textprop.vim,
            src/testdir/test_timers.vim


*** ../vim-8.1.1482/src/testdir/test_breakindent.vim	2018-06-23 19:22:45.614486258 +0200
--- src/testdir/test_breakindent.vim	2019-06-06 15:49:20.303809623 +0200
***************
*** 5,11 ****
  " It helps to change the tabstop setting and force a redraw (e.g. see
  " Test_breakindent08())
  if !exists('+breakindent')
!   finish
  endif
  
  source view_util.vim
--- 5,11 ----
  " It helps to change the tabstop setting and force a redraw (e.g. see
  " Test_breakindent08())
  if !exists('+breakindent')
!   throw 'Skipped: breakindent option not supported'
  endif
  
  source view_util.vim
*** ../vim-8.1.1482/src/testdir/test_cdo.vim	2016-01-01 14:24:29.000000000 +0100
--- src/testdir/test_cdo.vim	2019-06-06 15:50:04.719517911 +0200
***************
*** 1,7 ****
  " Tests for the :cdo, :cfdo, :ldo and :lfdo commands
  
  if !has('quickfix')
!   finish
  endif
  
  " Create the files used by the tests
--- 1,7 ----
  " Tests for the :cdo, :cfdo, :ldo and :lfdo commands
  
  if !has('quickfix')
!   throw 'Skipped: quickfix feature missing'
  endif
  
  " Create the files used by the tests
*** ../vim-8.1.1482/src/testdir/test_channel.vim	2019-03-04 12:09:43.901396026 +0100
--- src/testdir/test_channel.vim	2019-06-06 15:51:06.355113672 +0200
***************
*** 1,7 ****
  " Test for channel functions.
  
  if !has('channel')
!   finish
  endif
  
  source shared.vim
--- 1,7 ----
  " Test for channel functions.
  
  if !has('channel')
!   throw 'Skipped: channel feature missing'
  endif
  
  source shared.vim
***************
*** 9,15 ****
  let s:python = PythonProg()
  if s:python == ''
    " Can't run this test without Python.
!   finish
  endif
  
  " Uncomment the next line to see what happens. Output is in
--- 9,15 ----
  let s:python = PythonProg()
  if s:python == ''
    " Can't run this test without Python.
!   throw 'Skipped: Python command missing'
  endif
  
  " Uncomment the next line to see what happens. Output is in
*** ../vim-8.1.1482/src/testdir/test_clientserver.vim	2018-04-28 21:12:37.000000000 +0200
--- src/testdir/test_clientserver.vim	2019-06-06 15:51:32.518942263 +0200
***************
*** 1,7 ****
  " Tests for the +clientserver feature.
  
  if !has('job') || !has('clientserver')
!   finish
  endif
  
  source shared.vim
--- 1,7 ----
  " Tests for the +clientserver feature.
  
  if !has('job') || !has('clientserver')
!   throw 'Skipped: job and/or clientserver feature missing'
  endif
  
  source shared.vim
*** ../vim-8.1.1482/src/testdir/test_balloon.vim	2019-06-06 13:37:56.967789508 +0200
--- src/testdir/test_balloon.vim	2019-06-06 15:52:55.598398666 +0200
***************
*** 9,15 ****
  
  source screendump.vim
  if !CanRunVimInTerminal()
!   throw 'Skipped: cannot run Vim in a terminal window'
  endif
  
  let s:common_script =<< [CODE]
--- 9,15 ----
  
  source screendump.vim
  if !CanRunVimInTerminal()
!   throw 'Skipped: cannot make screendumps'
  endif
  
  let s:common_script =<< [CODE]
*** ../vim-8.1.1482/src/testdir/test_conceal.vim	2019-05-20 22:12:30.720442793 +0200
--- src/testdir/test_conceal.vim	2019-06-06 15:52:38.786508603 +0200
***************
*** 2,13 ****
  " Also see test88.in (should be converted to a test function here).
  
  if !has('conceal')
!   finish
  endif
  
  source screendump.vim
  if !CanRunVimInTerminal()
!   finish
  endif
  
  func Test_conceal_two_windows()
--- 2,13 ----
  " Also see test88.in (should be converted to a test function here).
  
  if !has('conceal')
!   throw 'Skipped: conceal feature missing'
  endif
  
  source screendump.vim
  if !CanRunVimInTerminal()
!   throw 'Skipped: cannot make screendumps'
  endif
  
  func Test_conceal_two_windows()
*** ../vim-8.1.1482/src/testdir/test_debugger.vim	2019-06-03 23:07:21.828486877 +0200
--- src/testdir/test_debugger.vim	2019-06-06 15:53:56.434001190 +0200
***************
*** 22,28 ****
  " Debugger tests
  func Test_Debugger()
    if !CanRunVimInTerminal()
!     return
    endif
  
    " Create a Vim script with some functions
--- 22,28 ----
  " Debugger tests
  func Test_Debugger()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
  
    " Create a Vim script with some functions
*** ../vim-8.1.1482/src/testdir/test_diffmode.vim	2019-03-29 18:29:28.448854292 +0100
--- src/testdir/test_diffmode.vim	2019-06-06 15:55:30.649386423 +0200
***************
*** 748,754 ****
  
  func Test_diff_screen()
    if !CanRunVimInTerminal() || !has('menu')
!     return
    endif
    " clean up already existing swap files, just in case
    call delete('.Xfile1.swp')
--- 748,754 ----
  
  func Test_diff_screen()
    if !CanRunVimInTerminal() || !has('menu')
!     throw 'Skipped: cannot make screendumps and/or menu feature missing'
    endif
    " clean up already existing swap files, just in case
    call delete('.Xfile1.swp')
***************
*** 880,886 ****
  
  func Test_diff_with_cursorline()
    if !CanRunVimInTerminal()
!     return
    endif
  
    call writefile([
--- 880,886 ----
  
  func Test_diff_with_cursorline()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
  
    call writefile([
***************
*** 907,913 ****
  
  func Test_diff_of_diff()
    if !CanRunVimInTerminal()
!     return
    endif
  
    call writefile([
--- 907,913 ----
  
  func Test_diff_of_diff()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
  
    call writefile([
*** ../vim-8.1.1482/src/testdir/test_fold.vim	2019-05-20 22:12:30.720442793 +0200
--- src/testdir/test_fold.vim	2019-06-06 15:55:51.129252877 +0200
***************
*** 708,714 ****
  
  func Test_folds_with_rnu()
    if !CanRunVimInTerminal()
!     return
    endif
  
    call writefile([
--- 708,714 ----
  
  func Test_folds_with_rnu()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
  
    call writefile([
*** ../vim-8.1.1482/src/testdir/test_highlight.vim	2019-05-25 22:56:46.679669071 +0200
--- src/testdir/test_highlight.vim	2019-06-06 15:56:52.032855890 +0200
***************
*** 533,539 ****
  
  func Test_cursorline_after_yank()
    if !CanRunVimInTerminal()
!     return
    endif
  
    call writefile([
--- 533,539 ----
  
  func Test_cursorline_after_yank()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
  
    call writefile([
***************
*** 555,561 ****
  
  func Test_cursorline_with_visualmode()
    if !CanRunVimInTerminal()
!     return
    endif
  
    call writefile([
--- 555,561 ----
  
  func Test_cursorline_with_visualmode()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
  
    call writefile([
***************
*** 575,581 ****
  
  func Test_wincolor()
    if !CanRunVimInTerminal()
!     return
    endif
  
    call writefile([
--- 575,581 ----
  
  func Test_wincolor()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
  
    call writefile([
*** ../vim-8.1.1482/src/testdir/test_popup.vim	2019-04-08 18:15:36.472223190 +0200
--- src/testdir/test_popup.vim	2019-06-06 15:57:36.888563710 +0200
***************
*** 735,741 ****
  
  func Test_popup_and_previewwindow_dump()
    if !CanRunVimInTerminal()
!     return
    endif
    call writefile([
      \ 'set previewheight=9',
--- 735,741 ----
  
  func Test_popup_and_previewwindow_dump()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    call writefile([
      \ 'set previewheight=9',
***************
*** 797,803 ****
  
  func Test_popup_position()
    if !CanRunVimInTerminal()
!     return
    endif
    call writefile([
  	\ '123456789_123456789_123456789_a',
--- 797,803 ----
  
  func Test_popup_position()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    call writefile([
  	\ '123456789_123456789_123456789_a',
***************
*** 839,845 ****
  
  func Test_popup_command()
    if !CanRunVimInTerminal() || !has('menu')
!     return
    endif
  
    call writefile([
--- 839,845 ----
  
  func Test_popup_command()
    if !CanRunVimInTerminal() || !has('menu')
!     throw 'Skipped: cannot make screendumps and/or menu feature missing'
    endif
  
    call writefile([
*** ../vim-8.1.1482/src/testdir/test_popupwin.vim	2019-06-02 19:53:40.998714309 +0200
--- src/testdir/test_popupwin.vim	2019-06-06 15:59:09.243962675 +0200
***************
*** 1,14 ****
  " Tests for popup windows
  
  if !has('textprop')
!   finish
  endif
  
  source screendump.vim
  
  func Test_simple_popup()
    if !CanRunVimInTerminal()
!     return
    endif
    call writefile([
  	\ "call setline(1, range(1, 100))",
--- 1,14 ----
  " Tests for popup windows
  
  if !has('textprop')
!   throw 'Skipped: textprop feature missing'
  endif
  
  source screendump.vim
  
  func Test_simple_popup()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    call writefile([
  	\ "call setline(1, range(1, 100))",
***************
*** 58,64 ****
  
  func Test_popup_with_border_and_padding()
    if !CanRunVimInTerminal()
!     return
    endif
  
    for iter in range(0, 1)
--- 58,64 ----
  
  func Test_popup_with_border_and_padding()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
  
    for iter in range(0, 1)
***************
*** 128,134 ****
  
  func Test_popup_with_syntax_win_execute()
    if !CanRunVimInTerminal()
!     return
    endif
    call writefile([
  	\ "call setline(1, range(1, 100))",
--- 128,134 ----
  
  func Test_popup_with_syntax_win_execute()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    call writefile([
  	\ "call setline(1, range(1, 100))",
***************
*** 152,158 ****
  
  func Test_popup_with_syntax_setbufvar()
    if !CanRunVimInTerminal()
!     return
    endif
    let lines =<< trim END
  	call setline(1, range(1, 100))
--- 152,158 ----
  
  func Test_popup_with_syntax_setbufvar()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    let lines =<< trim END
  	call setline(1, range(1, 100))
***************
*** 177,183 ****
  
  func Test_popup_all_corners()
    if !CanRunVimInTerminal()
!     return
    endif
    let lines =<< trim END
  	call setline(1, repeat([repeat('-', 60)], 15))
--- 177,183 ----
  
  func Test_popup_all_corners()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    let lines =<< trim END
  	call setline(1, repeat([repeat('-', 60)], 15))
***************
*** 340,346 ****
  
  func Test_popup_with_wrap()
    if !CanRunVimInTerminal()
!     return
    endif
    let lines =<< trim END
  	 call setline(1, range(1, 100))
--- 340,346 ----
  
  func Test_popup_with_wrap()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    let lines =<< trim END
  	 call setline(1, range(1, 100))
***************
*** 359,365 ****
  
  func Test_popup_without_wrap()
    if !CanRunVimInTerminal()
!     return
    endif
    let lines =<< trim END
  	 call setline(1, range(1, 100))
--- 359,365 ----
  
  func Test_popup_without_wrap()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    let lines =<< trim END
  	 call setline(1, range(1, 100))
***************
*** 760,766 ****
  
  func Test_popup_never_behind()
    if !CanRunVimInTerminal()
!     return
    endif
    " +-----------------------------+
    " |             |               |
--- 760,766 ----
  
  func Test_popup_never_behind()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    " +-----------------------------+
    " |             |               |
*** ../vim-8.1.1482/src/testdir/test_search.vim	2019-06-06 12:49:25.597017931 +0200
--- src/testdir/test_search.vim	2019-06-06 16:00:40.135371700 +0200
***************
*** 799,805 ****
  
  func Test_incsearch_scrolling()
    if !CanRunVimInTerminal()
!     return
    endif
    call assert_equal(0, &scrolloff)
    call writefile([
--- 799,805 ----
  
  func Test_incsearch_scrolling()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    call assert_equal(0, &scrolloff)
    call writefile([
***************
*** 832,838 ****
      return
    endif
    if !CanRunVimInTerminal()
!     return
    endif
    call writefile([
  	\ 'set incsearch hlsearch scrolloff=0',
--- 832,838 ----
      return
    endif
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    call writefile([
  	\ 'set incsearch hlsearch scrolloff=0',
***************
*** 887,893 ****
      return
    endif
    if !CanRunVimInTerminal()
!     return
    endif
    call writefile([
  	\ 'set incsearch hlsearch scrolloff=0',
--- 887,893 ----
      return
    endif
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    call writefile([
  	\ 'set incsearch hlsearch scrolloff=0',
***************
*** 983,989 ****
  
  func Test_incsearch_with_change()
    if !has('timers') || !exists('+incsearch') || !CanRunVimInTerminal()
!     return
    endif
  
    call writefile([
--- 983,989 ----
  
  func Test_incsearch_with_change()
    if !has('timers') || !exists('+incsearch') || !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps and/or timers feature and/or incsearch option missing'
    endif
  
    call writefile([
***************
*** 1011,1017 ****
      return
    endif
    if !CanRunVimInTerminal()
!     return
    endif
    call writefile([
  	\ 'set incsearch hlsearch scrolloff=0',
--- 1011,1017 ----
      return
    endif
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    call writefile([
  	\ 'set incsearch hlsearch scrolloff=0',
***************
*** 1037,1043 ****
      return
    endif
    if !CanRunVimInTerminal()
!     return
    endif
    call writefile([
  	\ 'set incsearch hlsearch scrolloff=0',
--- 1037,1043 ----
      return
    endif
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    call writefile([
  	\ 'set incsearch hlsearch scrolloff=0',
*** ../vim-8.1.1482/src/testdir/test_startup.vim	2019-05-27 23:36:17.456452208 +0200
--- src/testdir/test_startup.vim	2019-06-06 16:00:47.779322055 +0200
***************
*** 659,665 ****
  
  func Test_start_with_tabs()
    if !CanRunVimInTerminal()
!     return
    endif
  
    let buf = RunVimInTerminal('-p a b c', {})
--- 659,665 ----
  
  func Test_start_with_tabs()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
  
    let buf = RunVimInTerminal('-p a b c', {})
*** ../vim-8.1.1482/src/testdir/test_startup_utf8.vim	2019-01-24 17:59:35.143217444 +0100
--- src/testdir/test_startup_utf8.vim	2019-06-06 16:01:27.391064648 +0200
***************
*** 63,69 ****
  
  func Test_detect_ambiwidth()
    if !CanRunVimInTerminal()
!     return
    endif
  
    " Use the title termcap entries to output the escape sequence.
--- 63,69 ----
  
  func Test_detect_ambiwidth()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
  
    " Use the title termcap entries to output the escape sequence.
*** ../vim-8.1.1482/src/testdir/test_syntax.vim	2019-04-20 23:47:42.518391308 +0200
--- src/testdir/test_syntax.vim	2019-06-06 16:01:50.930911741 +0200
***************
*** 536,542 ****
  " Check highlighting for a small piece of C code with a screen dump.
  func Test_syntax_c()
    if !CanRunVimInTerminal()
!     return
    endif
    call writefile([
  	\ '/* comment line at the top */',
--- 536,542 ----
  " Check highlighting for a small piece of C code with a screen dump.
  func Test_syntax_c()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    call writefile([
  	\ '/* comment line at the top */',
*** ../vim-8.1.1482/src/testdir/test_tabpage.vim	2019-05-06 22:03:35.980968677 +0200
--- src/testdir/test_tabpage.vim	2019-06-06 16:02:09.518791007 +0200
***************
*** 555,561 ****
  
  func Test_tabpage_cmdheight()
    if !CanRunVimInTerminal()
!     throw 'Skipped: only works with terminal'
    endif
    call writefile([
          \ 'set laststatus=2',
--- 555,561 ----
  
  func Test_tabpage_cmdheight()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
    call writefile([
          \ 'set laststatus=2',
*** ../vim-8.1.1482/src/testdir/test_termencoding.vim	2019-01-24 17:59:35.143217444 +0100
--- src/testdir/test_termencoding.vim	2019-06-06 16:02:40.610589081 +0200
***************
*** 3,14 ****
  
  " This only works with "iconv".
  if !has('iconv')
!   finish
  endif
  
  source screendump.vim
  if !CanRunVimInTerminal()
!   finish
  endif
  
  " This Vim is running with 'encoding' "utf-8", the Vim in the terminal is
--- 3,14 ----
  
  " This only works with "iconv".
  if !has('iconv')
!   throw 'Skipped: iconv feature missing'
  endif
  
  source screendump.vim
  if !CanRunVimInTerminal()
!   throw 'Skipped: cannot make screendumps'
  endif
  
  " This Vim is running with 'encoding' "utf-8", the Vim in the terminal is
*** ../vim-8.1.1482/src/testdir/test_terminal.vim	2019-06-03 23:07:21.828486877 +0200
--- src/testdir/test_terminal.vim	2019-06-06 16:05:11.309610761 +0200
***************
*** 1037,1043 ****
  " argument, check that :confirm qall works.
  func Test_terminal_qall_prompt()
    if !CanRunVimInTerminal()
!     return
    endif
    let buf = RunVimInTerminal('', {})
  
--- 1037,1043 ----
  " argument, check that :confirm qall works.
  func Test_terminal_qall_prompt()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
    let buf = RunVimInTerminal('', {})
  
***************
*** 1098,1104 ****
  
  func Test_terminal_dumpwrite_composing()
    if !CanRunVimInTerminal()
!     return
    endif
    let save_enc = &encoding
    set encoding=utf-8
--- 1098,1104 ----
  
  func Test_terminal_dumpwrite_composing()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
    let save_enc = &encoding
    set encoding=utf-8
***************
*** 1224,1230 ****
  
  func Test_terminal_api_drop_newwin()
    if !CanRunVimInTerminal()
!     return
    endif
    let buf = Api_drop_common('')
    call assert_equal(0, &bin)
--- 1224,1230 ----
  
  func Test_terminal_api_drop_newwin()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
    let buf = Api_drop_common('')
    call assert_equal(0, &bin)
***************
*** 1237,1243 ****
  
  func Test_terminal_api_drop_newwin_bin()
    if !CanRunVimInTerminal()
!     return
    endif
    let buf = Api_drop_common(',{"bin":1}')
    call assert_equal(1, &bin)
--- 1237,1243 ----
  
  func Test_terminal_api_drop_newwin_bin()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
    let buf = Api_drop_common(',{"bin":1}')
    call assert_equal(1, &bin)
***************
*** 1249,1255 ****
  
  func Test_terminal_api_drop_newwin_binary()
    if !CanRunVimInTerminal()
!     return
    endif
    let buf = Api_drop_common(',{"binary":1}')
    call assert_equal(1, &bin)
--- 1249,1255 ----
  
  func Test_terminal_api_drop_newwin_binary()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
    let buf = Api_drop_common(',{"binary":1}')
    call assert_equal(1, &bin)
***************
*** 1261,1267 ****
  
  func Test_terminal_api_drop_newwin_nobin()
    if !CanRunVimInTerminal()
!     return
    endif
    set binary
    let buf = Api_drop_common(',{"nobin":1}')
--- 1261,1267 ----
  
  func Test_terminal_api_drop_newwin_nobin()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
    set binary
    let buf = Api_drop_common(',{"nobin":1}')
***************
*** 1275,1281 ****
  
  func Test_terminal_api_drop_newwin_nobinary()
    if !CanRunVimInTerminal()
!     return
    endif
    set binary
    let buf = Api_drop_common(',{"nobinary":1}')
--- 1275,1281 ----
  
  func Test_terminal_api_drop_newwin_nobinary()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
    set binary
    let buf = Api_drop_common(',{"nobinary":1}')
***************
*** 1289,1295 ****
  
  func Test_terminal_api_drop_newwin_ff()
    if !CanRunVimInTerminal()
!     return
    endif
    let buf = Api_drop_common(',{"ff":"dos"}')
    call assert_equal("dos", &ff)
--- 1289,1295 ----
  
  func Test_terminal_api_drop_newwin_ff()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
    let buf = Api_drop_common(',{"ff":"dos"}')
    call assert_equal("dos", &ff)
***************
*** 1301,1307 ****
  
  func Test_terminal_api_drop_newwin_fileformat()
    if !CanRunVimInTerminal()
!     return
    endif
    let buf = Api_drop_common(',{"fileformat":"dos"}')
    call assert_equal("dos", &ff)
--- 1301,1307 ----
  
  func Test_terminal_api_drop_newwin_fileformat()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
    let buf = Api_drop_common(',{"fileformat":"dos"}')
    call assert_equal("dos", &ff)
***************
*** 1313,1319 ****
  
  func Test_terminal_api_drop_newwin_enc()
    if !CanRunVimInTerminal()
!     return
    endif
    let buf = Api_drop_common(',{"enc":"utf-16"}')
    call assert_equal("utf-16", &fenc)
--- 1313,1319 ----
  
  func Test_terminal_api_drop_newwin_enc()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
    let buf = Api_drop_common(',{"enc":"utf-16"}')
    call assert_equal("utf-16", &fenc)
***************
*** 1325,1331 ****
  
  func Test_terminal_api_drop_newwin_encoding()
    if !CanRunVimInTerminal()
!     return
    endif
    let buf = Api_drop_common(',{"encoding":"utf-16"}')
    call assert_equal("utf-16", &fenc)
--- 1325,1331 ----
  
  func Test_terminal_api_drop_newwin_encoding()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
    let buf = Api_drop_common(',{"encoding":"utf-16"}')
    call assert_equal("utf-16", &fenc)
***************
*** 1337,1343 ****
  
  func Test_terminal_api_drop_oldwin()
    if !CanRunVimInTerminal()
!     return
    endif
    let firstwinid = win_getid()
    split Xtextfile
--- 1337,1343 ----
  
  func Test_terminal_api_drop_oldwin()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
    let firstwinid = win_getid()
    split Xtextfile
***************
*** 1380,1386 ****
  
  func Test_terminal_api_call()
    if !CanRunVimInTerminal()
!     return
    endif
  
    call WriteApiCall('Tapi_TryThis')
--- 1380,1386 ----
  
  func Test_terminal_api_call()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
  
    call WriteApiCall('Tapi_TryThis')
***************
*** 1397,1403 ****
  
  func Test_terminal_api_call_fails()
    if !CanRunVimInTerminal()
!     return
    endif
  
    call WriteApiCall('TryThis')
--- 1397,1403 ----
  
  func Test_terminal_api_call_fails()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
  
    call WriteApiCall('TryThis')
***************
*** 1423,1429 ****
  
  func Test_terminal_api_call_fail_delete()
    if !CanRunVimInTerminal()
!     return
    endif
  
    call WriteApiCall('Tapi_Delete')
--- 1423,1429 ----
  
  func Test_terminal_api_call_fail_delete()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
  
    call WriteApiCall('Tapi_Delete')
***************
*** 1507,1513 ****
  
  func Test_terminal_all_ansi_colors()
    if !CanRunVimInTerminal()
!     return
    endif
  
    " Use all the ANSI colors.
--- 1507,1513 ----
  
  func Test_terminal_all_ansi_colors()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
  
    " Use all the ANSI colors.
***************
*** 1564,1570 ****
  
  func Test_terminal_termwinsize_option_fixed()
    if !CanRunVimInTerminal()
!     return
    endif
    set termwinsize=6x40
    let text = []
--- 1564,1570 ----
  
  func Test_terminal_termwinsize_option_fixed()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
    set termwinsize=6x40
    let text = []
***************
*** 2030,2036 ****
  
  func Test_terminal_getwinpos()
    if !CanRunVimInTerminal()
!     return
    endif
  
    " split, go to the bottom-right window
--- 2030,2036 ----
  
  func Test_terminal_getwinpos()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
  
    " split, go to the bottom-right window
*** ../vim-8.1.1482/src/testdir/test_textprop.vim	2019-05-25 22:11:42.474849134 +0200
--- src/testdir/test_textprop.vim	2019-06-06 16:05:46.201384288 +0200
***************
*** 655,661 ****
  func Test_textprop_screenshot_various()
    " The Vim running in the terminal needs to use utf-8.
    if !CanRunVimInTerminal() || g:orig_encoding != 'utf-8'
!     return
    endif
    call writefile([
  	\ "call setline(1, ["
--- 655,661 ----
  func Test_textprop_screenshot_various()
    " The Vim running in the terminal needs to use utf-8.
    if !CanRunVimInTerminal() || g:orig_encoding != 'utf-8'
!     throw 'Skipped: cannot make screendumps or not using utf-8'
    endif
    call writefile([
  	\ "call setline(1, ["
***************
*** 750,756 ****
  " screenshot test with Visual block mode operations
  func Test_textprop_screenshot_visual()
    if !CanRunVimInTerminal()
!     return
    endif
  
    " Delete two columns while text props are three chars wide.
--- 750,756 ----
  " screenshot test with Visual block mode operations
  func Test_textprop_screenshot_visual()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot make screendumps'
    endif
  
    " Delete two columns while text props are three chars wide.
*** ../vim-8.1.1482/src/testdir/test_timers.vim	2019-01-30 22:01:36.982854408 +0100
--- src/testdir/test_timers.vim	2019-06-06 16:06:08.681238386 +0200
***************
*** 281,287 ****
  
  func Test_restore_count()
    if !CanRunVimInTerminal()
!     return
    endif
    " Check that v:count is saved and restored, not changed by a timer.
    call writefile([
--- 281,287 ----
  
  func Test_restore_count()
    if !CanRunVimInTerminal()
!     throw 'Skipped: cannot run Vim in a terminal window'
    endif
    " Check that v:count is saved and restored, not changed by a timer.
    call writefile([
*** ../vim-8.1.1482/src/version.c	2019-06-06 15:40:04.647505323 +0200
--- src/version.c	2019-06-06 16:07:18.752783713 +0200
***************
*** 769,770 ****
--- 769,772 ----
  {   /* Add new patch number below this line */
+ /**/
+     1483,
  /**/

-- 
hundred-and-one symptoms of being an internet addict:
100. The most exciting sporting events you noticed during summer 1996
    was Netscape vs. Microsoft.

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\  an exciting new programming language -- http://www.Zimbu.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
