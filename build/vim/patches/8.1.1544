To: vim_dev@googlegroups.com
Subject: Patch 8.1.1544
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
------------

Patch 8.1.1544
Problem:    Some balloon tests don't run when they can.
Solution:   Split GUI balloon tests off into a separate file. (Ozaki Kiichi,
            closes #4538)  Change the feature check into a command for
            consistency.
Files:	    Filelist, src/testdir/Make_all.mak, src/testdir/check.vim,
            src/testdir/test_arabic.vim, src/testdir/test_balloon.vim,
            src/testdir/test_balloon_gui.vim, src/testdir/test_crypt.vim,
            src/testdir/test_cscope.vim, src/testdir/test_digraph.vim,
            src/testdir/test_float_func.vim, src/testdir/test_gui.vim,
            src/testdir/test_gui_init.vim, src/testdir/test_history.vim,
            src/testdir/test_langmap.vim, src/testdir/test_listlbr.vim,
            src/testdir/test_listlbr_utf8.vim, src/testdir/test_lua.vim,
            src/testdir/test_makeencoding.vim,
            src/testdir/test_matchadd_conceal.vim,
            src/testdir/test_matchadd_conceal_utf8.vim,
            src/testdir/test_memory_usage.vim, src/testdir/test_menu.vim,
            src/testdir/test_mksession.vim,
            src/testdir/test_mksession_utf8.vim,
            src/testdir/test_netbeans.vim, src/testdir/test_paste.vim,
            src/testdir/test_perl.vim, src/testdir/test_popupwin.vim,
            src/testdir/test_profile.vim, src/testdir/test_prompt_buffer.vim,
            src/testdir/test_python2.vim, src/testdir/test_python3.vim,
            src/testdir/test_pyx2.vim, src/testdir/test_pyx3.vim,
            src/testdir/test_quickfix.vim, src/testdir/test_quotestar.vim,
            src/testdir/test_reltime.vim, src/testdir/test_ruby.vim,
            src/testdir/test_sha256.vim, src/testdir/test_shortpathname.vim,
            src/testdir/test_signals.vim, src/testdir/test_signs.vim,
            src/testdir/test_spell.vim, src/testdir/test_syntax.vim,
            src/testdir/test_tcl.vim, src/testdir/test_termcodes.vim,
            src/testdir/test_terminal.vim, src/testdir/test_terminal_fail.vim,
            src/testdir/test_textobjects.vim, src/testdir/test_textprop.vim,
            src/testdir/test_timers.vim, src/testdir/test_vartabs.vim,
            src/testdir/test_winbar.vim, src/testdir/test_windows_home.vim,
            src/testdir/test_xxd.vim


*** ../vim-8.1.1543/Filelist	2019-06-10 21:23:52.363724122 +0200
--- Filelist	2019-06-15 17:25:46.117072990 +0200
***************
*** 120,125 ****
--- 120,126 ----
  		src/testdir/sautest/autoload/*.vim \
  		src/testdir/runtest.vim \
  		src/testdir/summarize.vim \
+ 		src/testdir/check.vim \
  		src/testdir/shared.vim \
  		src/testdir/screendump.vim \
  		src/testdir/view_util.vim \
*** ../vim-8.1.1543/src/testdir/Make_all.mak	2019-06-15 15:44:46.710530957 +0200
--- src/testdir/Make_all.mak	2019-06-15 17:18:17.963636259 +0200
***************
*** 65,70 ****
--- 65,71 ----
  	test_backspace_opt \
  	test_backup \
  	test_balloon \
+ 	test_balloon_gui \
  	test_behave \
  	test_blob \
  	test_blockedit \
***************
*** 297,302 ****
--- 298,304 ----
  	test_autoload.res \
  	test_backspace_opt.res \
  	test_balloon.res \
+ 	test_balloon_gui.res \
  	test_blob.res \
  	test_blockedit.res \
  	test_breakindent.res \
*** ../vim-8.1.1543/src/testdir/check.vim	2019-06-15 17:56:02.325388400 +0200
--- src/testdir/check.vim	2019-06-15 17:41:22.975897080 +0200
***************
*** 0 ****
--- 1,23 ----
+ " Command to check for the presence of a feature.
+ command -nargs=1 CheckFeature call CheckFeature(<f-args>)
+ func CheckFeature(name)
+   if !has(a:name)
+     throw 'Skipped: ' .. a:name .. ' feature missing'
+   endif
+ endfunc
+ 
+ " Command to check for the presence of a working option.
+ command -nargs=1 CheckOption call CheckOption(<f-args>)
+ func CheckOption(name)
+   if !exists('+' .. a:name)
+     throw 'Skipped: ' .. a:name .. ' option not supported'
+   endif
+ endfunc
+ 
+ " Command to check for the presence of a function.
+ command -nargs=1 CheckFunction call CheckFunction(<f-args>)
+ func CheckFunction(name)
+   if !exists('*' .. a:name)
+     throw 'Skipped: ' .. a:name .. ' function missing'
+   endif
+ endfunc
*** ../vim-8.1.1543/src/testdir/test_arabic.vim	2019-06-06 13:37:56.967789508 +0200
--- src/testdir/test_arabic.vim	2019-06-15 17:28:17.148228279 +0200
***************
*** 2,10 ****
  " NOTE: This just checks if the code works. If you know Arabic please add
  " functional tests that check the shaping works with real text.
  
! if !has('arabic')
!   throw 'Skipped: arabic feature missing'
! endif
  
  source view_util.vim
  
--- 2,9 ----
  " NOTE: This just checks if the code works. If you know Arabic please add
  " functional tests that check the shaping works with real text.
  
! source check.vim
! CheckFeature arabic
  
  source view_util.vim
  
*** ../vim-8.1.1543/src/testdir/test_balloon.vim	2019-06-06 16:12:05.923134646 +0200
--- src/testdir/test_balloon.vim	2019-06-15 17:30:24.943517941 +0200
***************
*** 1,11 ****
  " Tests for 'balloonevalterm'.
  
! if !has('balloon_eval_term')
!   throw 'Skipped: balloon_eval_term feature missing'
  endif
  
! " A few tests only work in the terminal.
! if !has('gui_running')
  
  source screendump.vim
  if !CanRunVimInTerminal()
--- 1,12 ----
  " Tests for 'balloonevalterm'.
+ " A few tests only work in the terminal.
  
! if has('gui_running')
!   throw 'Skipped: only work in the terminal'
  endif
  
! source check.vim
! CheckFeature balloon_eval_term
  
  source screendump.vim
  if !CanRunVimInTerminal()
***************
*** 56,79 ****
    call StopVimInTerminal(buf)
    call delete('XTest_beval_visual')
  endfunc
- 
- endif
- 
- " Tests that only work in the GUI
- if has('gui_running')
- 
- func Test_balloon_show_gui()
-   let msg = 'this this this this'
-   call balloon_show(msg)
-   call assert_equal(msg, balloon_gettext())
-   sleep 10m
-   call balloon_show('')
- 
-   let msg = 'that that'
-   call balloon_show(msg)
-   call assert_equal(msg, balloon_gettext())
-   sleep 10m
-   call balloon_show('')
- endfunc
- 
- endif
--- 57,59 ----
*** ../vim-8.1.1543/src/testdir/test_balloon_gui.vim	2019-06-15 17:56:02.337388320 +0200
--- src/testdir/test_balloon_gui.vim	2019-06-15 17:49:32.216108872 +0200
***************
*** 0 ****
--- 1,22 ----
+ " Tests for 'ballooneval' in the GUI.
+ 
+ if !has('gui_running')
+   throw 'Skipped: only works in the GUI'
+ endif
+ 
+ source check.vim
+ CheckFeature balloon_eval
+ 
+ func Test_balloon_show_gui()
+   let msg = 'this this this this'
+   call balloon_show(msg)
+   call assert_equal(msg, balloon_gettext())
+   sleep 10m
+   call balloon_show('')
+ 
+   let msg = 'that that'
+   call balloon_show(msg)
+   call assert_equal(msg, balloon_gettext())
+   sleep 10m
+   call balloon_show('')
+ endfunc
*** ../vim-8.1.1543/src/testdir/test_crypt.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_crypt.vim	2019-06-15 17:30:57.579337068 +0200
***************
*** 1,8 ****
  " Tests for encryption.
  
! if !has('cryptv')
!   throw 'Skipped, encryption feature missing'
! endif
  
  func Common_head_only(text)
    " This was crashing Vim
--- 1,7 ----
  " Tests for encryption.
  
! source check.vim
! CheckFeature cryptv
  
  func Common_head_only(text)
    " This was crashing Vim
*** ../vim-8.1.1543/src/testdir/test_cscope.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_cscope.vim	2019-06-15 17:31:17.767225285 +0200
***************
*** 1,10 ****
  " Test for cscope commands.
  
! if !has('cscope') || !has('quickfix')
!   throw 'Skipped, cscope or quickfix feature missing'
! endif
  if !executable('cscope')
!   throw 'Skipped, cscope program missing'
  endif
  
  func CscopeSetupOrClean(setup)
--- 1,11 ----
  " Test for cscope commands.
  
! source check.vim
! CheckFeature cscope
! CheckFeature quickfix
! 
  if !executable('cscope')
!   throw 'Skipped: cscope program missing'
  endif
  
  func CscopeSetupOrClean(setup)
*** ../vim-8.1.1543/src/testdir/test_digraph.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_digraph.vim	2019-06-15 17:31:27.703170287 +0200
***************
*** 1,8 ****
  " Tests for digraphs
  
! if !has("digraphs")
!   throw 'Skipped, digraphs feature missing'
! endif
  
  func Put_Dig(chars)
    exe "norm! o\<c-k>".a:chars
--- 1,7 ----
  " Tests for digraphs
  
! source check.vim
! CheckFeature digraphs
  
  func Put_Dig(chars)
    exe "norm! o\<c-k>".a:chars
*** ../vim-8.1.1543/src/testdir/test_float_func.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_float_func.vim	2019-06-15 17:31:35.675126181 +0200
***************
*** 1,8 ****
  " test float functions
  
! if !has('float')
!   throw 'Skipped, float feature missing'
! end
  
  func Test_abs()
    call assert_equal('1.23', string(abs(1.23)))
--- 1,7 ----
  " test float functions
  
! source check.vim
! CheckFeature float
  
  func Test_abs()
    call assert_equal('1.23', string(abs(1.23)))
*** ../vim-8.1.1543/src/testdir/test_gui.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_gui.vim	2019-06-15 17:18:17.967636236 +0200
***************
*** 2,8 ****
  
  source shared.vim
  if !CanRunGui()
!   throw 'Skipped, cannot run GUI'
  endif
  
  source setup_gui.vim
--- 2,8 ----
  
  source shared.vim
  if !CanRunGui()
!   throw 'Skipped: cannot run GUI'
  endif
  
  source setup_gui.vim
*** ../vim-8.1.1543/src/testdir/test_gui_init.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_gui_init.vim	2019-06-15 17:18:17.967636236 +0200
***************
*** 3,9 ****
  
  source shared.vim
  if !CanRunGui()
!   throw 'Skipped, cannot run GUI'
  endif
  
  source setup_gui.vim
--- 3,9 ----
  
  source shared.vim
  if !CanRunGui()
!   throw 'Skipped: cannot run GUI'
  endif
  
  source setup_gui.vim
*** ../vim-8.1.1543/src/testdir/test_history.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_history.vim	2019-06-15 17:31:56.811009288 +0200
***************
*** 1,8 ****
  " Tests for the history functions
  
! if !has('cmdline_hist')
!   throw 'Skipped, cmdline_hist feature missing'
! endif
  
  set history=7
  
--- 1,7 ----
  " Tests for the history functions
  
! source check.vim
! CheckFeature cmdline_hist
  
  set history=7
  
*** ../vim-8.1.1543/src/testdir/test_langmap.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_langmap.vim	2019-06-15 17:32:11.802926425 +0200
***************
*** 1,8 ****
  " tests for 'langmap'
  
! if !has('langmap')
!   throw 'Skipped, langmap feature missing'
! endif
  
  func Test_langmap()
    new
--- 1,7 ----
  " tests for 'langmap'
  
! source check.vim
! CheckFeature langmap
  
  func Test_langmap()
    new
*** ../vim-8.1.1543/src/testdir/test_listlbr.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_listlbr.vim	2019-06-15 17:34:34.890137169 +0200
***************
*** 3,14 ****
  set encoding=latin1
  scriptencoding latin1
  
! if !exists("+linebreak")
!   throw 'Skipped, linebreak option missing'
! endif
! if !has("conceal")
!   throw 'Skipped, conceal feature missing'
! endif
  
  source view_util.vim
  
--- 3,11 ----
  set encoding=latin1
  scriptencoding latin1
  
! source check.vim
! CheckOption linebreak
! CheckFeature conceal
  
  source view_util.vim
  
*** ../vim-8.1.1543/src/testdir/test_listlbr_utf8.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_listlbr_utf8.vim	2019-06-15 17:36:43.925427474 +0200
***************
*** 3,17 ****
  set encoding=utf-8
  scriptencoding utf-8
  
! if !exists("+linebreak")
!   throw 'Skipped, linebreak option missing'
! endif
! if !has("conceal")
!   throw 'Skipped, conceal feature missing'
! endif
! if !has("signs")
!   throw 'Skipped, signs feature missing'
! endif
  
  source view_util.vim
  
--- 3,12 ----
  set encoding=utf-8
  scriptencoding utf-8
  
! source check.vim
! CheckOption linebreak
! CheckFeature conceal
! CheckFeature signs
  
  source view_util.vim
  
*** ../vim-8.1.1543/src/testdir/test_lua.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_lua.vim	2019-06-15 17:36:54.193371066 +0200
***************
*** 1,8 ****
  " Tests for Lua.
  
! if !has('lua')
!   throw 'Skipped, lua feature missing'
! endif
  
  func TearDown()
    " Run garbage collection after each test to exercise luaV_setref().
--- 1,7 ----
  " Tests for Lua.
  
! source check.vim
! CheckFeature lua
  
  func TearDown()
    " Run garbage collection after each test to exercise luaV_setref().
*** ../vim-8.1.1543/src/testdir/test_makeencoding.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_makeencoding.vim	2019-06-15 17:18:17.967636236 +0200
***************
*** 4,10 ****
  
  let s:python = PythonProg()
  if s:python == ''
!   throw 'Skipped, python program missing'
  endif
  
  let s:script = 'test_makeencoding.py'
--- 4,10 ----
  
  let s:python = PythonProg()
  if s:python == ''
!   throw 'Skipped: python program missing'
  endif
  
  let s:script = 'test_makeencoding.py'
*** ../vim-8.1.1543/src/testdir/test_matchadd_conceal.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_matchadd_conceal.vim	2019-06-15 17:37:11.085278265 +0200
***************
*** 1,8 ****
  " Test for matchadd() and conceal feature
  
! if !has('conceal')
!   throw 'Skipped, conceal feature missing'
! endif
  
  if !has('gui_running') && has('unix')
    set term=ansi
--- 1,7 ----
  " Test for matchadd() and conceal feature
  
! source check.vim
! CheckFeature conceal
  
  if !has('gui_running') && has('unix')
    set term=ansi
*** ../vim-8.1.1543/src/testdir/test_matchadd_conceal_utf8.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_matchadd_conceal_utf8.vim	2019-06-15 17:37:19.485232124 +0200
***************
*** 1,8 ****
  " Test for matchadd() and conceal feature using utf-8.
  
! if !has('conceal')
!   throw 'Skipped, conceal feature missing'
! endif
  
  if !has('gui_running') && has('unix')
    set term=ansi
--- 1,7 ----
  " Test for matchadd() and conceal feature using utf-8.
  
! source check.vim
! CheckFeature conceal
  
  if !has('gui_running') && has('unix')
    set term=ansi
*** ../vim-8.1.1543/src/testdir/test_memory_usage.vim	2019-06-15 16:34:18.538182171 +0200
--- src/testdir/test_memory_usage.vim	2019-06-15 17:25:20.253218366 +0200
***************
*** 1,15 ****
  " Tests for memory usage.
  
! if !has('terminal')
!   throw 'Skipped, terminal feature missing'
! endif
  if has('gui_running')
!   throw 'Skipped, does not work in GUI'
  endif
  if execute('version') =~# '-fsanitize=[a-z,]*\<address\>'
    " Skip tests on Travis CI ASAN build because it's difficult to estimate
    " memory usage.
!   throw 'Skipped, does not work with ASAN'
  endif
  
  source shared.vim
--- 1,15 ----
  " Tests for memory usage.
  
! source check.vim
! CheckFeature terminal
! 
  if has('gui_running')
!   throw 'Skipped: does not work in GUI'
  endif
  if execute('version') =~# '-fsanitize=[a-z,]*\<address\>'
    " Skip tests on Travis CI ASAN build because it's difficult to estimate
    " memory usage.
!   throw 'Skipped: does not work with ASAN'
  endif
  
  source shared.vim
***************
*** 20,26 ****
  
  if has('win32')
    if !executable('wmic')
!     throw 'Skipped, wmic program missing'
    endif
    func s:memory_usage(pid) abort
      let cmd = printf('wmic process where processid=%d get WorkingSetSize', a:pid)
--- 20,26 ----
  
  if has('win32')
    if !executable('wmic')
!     throw 'Skipped: wmic program missing'
    endif
    func s:memory_usage(pid) abort
      let cmd = printf('wmic process where processid=%d get WorkingSetSize', a:pid)
***************
*** 28,40 ****
    endfunc
  elseif has('unix')
    if !executable('ps')
!     throw 'Skipped, ps program missing'
    endif
    func s:memory_usage(pid) abort
      return s:pick_nr(system('ps -o rss= -p ' . a:pid))
    endfunc
  else
!   throw 'Skipped, not win32 or unix'
  endif
  
  " Wait for memory usage to level off.
--- 28,40 ----
    endfunc
  elseif has('unix')
    if !executable('ps')
!     throw 'Skipped: ps program missing'
    endif
    func s:memory_usage(pid) abort
      return s:pick_nr(system('ps -o rss= -p ' . a:pid))
    endfunc
  else
!   throw 'Skipped: not win32 or unix'
  endif
  
  " Wait for memory usage to level off.
*** ../vim-8.1.1543/src/testdir/test_menu.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_menu.vim	2019-06-15 17:37:27.537187886 +0200
***************
*** 1,8 ****
  " Test that the system menu can be loaded.
  
! if !has('menu')
!   throw 'Skipped, menu feature missing'
! endif
  
  func Test_load_menu()
    try
--- 1,7 ----
  " Test that the system menu can be loaded.
  
! source check.vim
! CheckFeature menu
  
  func Test_load_menu()
    try
*** ../vim-8.1.1543/src/testdir/test_mksession.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_mksession.vim	2019-06-15 17:37:36.325139618 +0200
***************
*** 3,11 ****
  set encoding=latin1
  scriptencoding latin1
  
! if !has('mksession')
!   throw 'Skipped, mksession feature missing'
! endif
  
  source shared.vim
  
--- 3,10 ----
  set encoding=latin1
  scriptencoding latin1
  
! source check.vim
! CheckFeature mksession
  
  source shared.vim
  
*** ../vim-8.1.1543/src/testdir/test_mksession_utf8.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_mksession_utf8.vim	2019-06-15 17:37:44.173096522 +0200
***************
*** 3,11 ****
  set encoding=utf-8
  scriptencoding utf-8
  
! if !has('mksession')
!   throw 'Skipped, mksession feature missing'
! endif
  
  func Test_mksession_utf8()
    tabnew
--- 3,10 ----
  set encoding=utf-8
  scriptencoding utf-8
  
! source check.vim
! CheckFeature mksession
  
  func Test_mksession_utf8()
    tabnew
*** ../vim-8.1.1543/src/testdir/test_netbeans.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_netbeans.vim	2019-06-15 17:37:53.113047464 +0200
***************
*** 1,14 ****
  " Test the netbeans interface.
  
! if !has('netbeans_intg')
!   throw 'Skipped, netbeans_intg feature missing'
! endif
  
  source shared.vim
  
  let s:python = PythonProg()
  if s:python == ''
!   throw 'Skipped, python program missing'
  endif
  
  " Run "testfunc" after sarting the server and stop the server afterwards.
--- 1,13 ----
  " Test the netbeans interface.
  
! source check.vim
! CheckFeature netbeans_intg
  
  source shared.vim
  
  let s:python = PythonProg()
  if s:python == ''
!   throw 'Skipped: python program missing'
  endif
  
  " Run "testfunc" after sarting the server and stop the server afterwards.
*** ../vim-8.1.1543/src/testdir/test_paste.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_paste.vim	2019-06-15 17:18:17.967636236 +0200
***************
*** 2,11 ****
  
  " Bracketed paste only works with "xterm".  Not in GUI or Windows console.
  if has('win32')
!   throw 'Skipped, does not work on MS-Windows'
  endif
  if has('gui_running')
!   throw 'Skipped, does not work in the GUI'
  endif
  set term=xterm
  
--- 2,11 ----
  
  " Bracketed paste only works with "xterm".  Not in GUI or Windows console.
  if has('win32')
!   throw 'Skipped: does not work on MS-Windows'
  endif
  if has('gui_running')
!   throw 'Skipped: does not work in the GUI'
  endif
  set term=xterm
  
*** ../vim-8.1.1543/src/testdir/test_perl.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_perl.vim	2019-06-15 17:38:05.420979896 +0200
***************
*** 1,8 ****
  " Tests for Perl interface
  
! if !has('perl')
!   throw 'Skipped, perl feature missing'
! end
  
  " FIXME: RunTest don't see any error when Perl abort...
  perl $SIG{__WARN__} = sub { die "Unexpected warnings from perl: @_" };
--- 1,7 ----
  " Tests for Perl interface
  
! source check.vim
! CheckFeature perl
  
  " FIXME: RunTest don't see any error when Perl abort...
  perl $SIG{__WARN__} = sub { die "Unexpected warnings from perl: @_" };
*** ../vim-8.1.1543/src/testdir/test_popupwin.vim	2019-06-15 14:31:33.774185476 +0200
--- src/testdir/test_popupwin.vim	2019-06-15 17:38:26.420864627 +0200
***************
*** 1,8 ****
  " Tests for popup windows
  
! if !has('textprop')
!   throw 'Skipped: textprop feature missing'
! endif
  
  source screendump.vim
  
--- 1,7 ----
  " Tests for popup windows
  
! source check.vim
! CheckFeature textprop
  
  source screendump.vim
  
***************
*** 515,521 ****
  
  func Test_popup_time()
    if !has('timers')
!     throw 'Skipped, timer feature not supported'
    endif
    topleft vnew
    call setline(1, 'hello')
--- 514,520 ----
  
  func Test_popup_time()
    if !has('timers')
!     throw 'Skipped: timer feature not supported'
    endif
    topleft vnew
    call setline(1, 'hello')
***************
*** 1176,1182 ****
  
  func Test_notifications()
    if !has('timers')
!     throw 'Skipped, timer feature not supported'
    endif
    if !CanRunVimInTerminal()
      throw 'Skipped: cannot make screendumps'
--- 1175,1181 ----
  
  func Test_notifications()
    if !has('timers')
!     throw 'Skipped: timer feature not supported'
    endif
    if !CanRunVimInTerminal()
      throw 'Skipped: cannot make screendumps'
*** ../vim-8.1.1543/src/testdir/test_profile.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_profile.vim	2019-06-15 17:38:35.404815340 +0200
***************
*** 1,8 ****
  " Test Vim profiler
  
! if !has('profile')
!   throw 'Skipped, profile feature missing'
! endif
  
  func Test_profile_func()
    let lines =<< trim [CODE]
--- 1,7 ----
  " Test Vim profiler
  
! source check.vim
! CheckFeature profile
  
  func Test_profile_func()
    let lines =<< trim [CODE]
*** ../vim-8.1.1543/src/testdir/test_prompt_buffer.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_prompt_buffer.vim	2019-06-15 17:38:41.384782523 +0200
***************
*** 1,8 ****
  " Tests for setting 'buftype' to "prompt"
  
! if !has('channel')
!   throw 'Skipped, channel feature missing'
! endif
  
  source shared.vim
  source screendump.vim
--- 1,7 ----
  " Tests for setting 'buftype' to "prompt"
  
! source check.vim
! CheckFeature channel
  
  source shared.vim
  source screendump.vim
*** ../vim-8.1.1543/src/testdir/test_python2.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_python2.vim	2019-06-15 17:38:48.628742782 +0200
***************
*** 1,9 ****
  " Test for python 2 commands.
  " TODO: move tests from test87.in here.
  
! if !has('python')
!   throw 'Skipped, python feature missing'
! endif
  
  func Test_pydo()
    " Check deleting lines does not trigger ml_get error.
--- 1,8 ----
  " Test for python 2 commands.
  " TODO: move tests from test87.in here.
  
! source check.vim
! CheckFeature python
  
  func Test_pydo()
    " Check deleting lines does not trigger ml_get error.
*** ../vim-8.1.1543/src/testdir/test_python3.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_python3.vim	2019-06-15 17:38:57.676693159 +0200
***************
*** 1,9 ****
  " Test for python 3 commands.
  " TODO: move tests from test88.in here.
  
! if !has('python3')
!   throw 'Skipped, python3 feature missing'
! endif
  
  func Test_py3do()
    " Check deleting lines does not trigger an ml_get error.
--- 1,8 ----
  " Test for python 3 commands.
  " TODO: move tests from test88.in here.
  
! source check.vim
! CheckFeature python3
  
  func Test_py3do()
    " Check deleting lines does not trigger an ml_get error.
*** ../vim-8.1.1543/src/testdir/test_pyx2.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_pyx2.vim	2019-06-15 17:39:18.680577993 +0200
***************
*** 1,9 ****
  " Test for pyx* commands and functions with Python 2.
  
  set pyx=2
! if !has('python')
!   throw 'Skipped, python feature missing'
! endif
  
  let s:py2pattern = '^2\.[0-7]\.\d\+'
  let s:py3pattern = '^3\.\d\+\.\d\+'
--- 1,8 ----
  " Test for pyx* commands and functions with Python 2.
  
  set pyx=2
! source check.vim
! CheckFeature python
  
  let s:py2pattern = '^2\.[0-7]\.\d\+'
  let s:py3pattern = '^3\.\d\+\.\d\+'
*** ../vim-8.1.1543/src/testdir/test_pyx3.vim	2019-06-13 22:19:04.533918194 +0200
--- src/testdir/test_pyx3.vim	2019-06-15 17:39:26.220536671 +0200
***************
*** 1,9 ****
  " Test for pyx* commands and functions with Python 3.
  
  set pyx=3
! if !has('python3')
!   throw 'Skipped, python3 feature missing'
! endif
  
  let s:py2pattern = '^2\.[0-7]\.\d\+'
  let s:py3pattern = '^3\.\d\+\.\d\+'
--- 1,8 ----
  " Test for pyx* commands and functions with Python 3.
  
  set pyx=3
! source check.vim
! CheckFeature python3
  
  let s:py2pattern = '^2\.[0-7]\.\d\+'
  let s:py3pattern = '^3\.\d\+\.\d\+'
*** ../vim-8.1.1543/src/testdir/test_quickfix.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_quickfix.vim	2019-06-15 17:39:34.260492594 +0200
***************
*** 1,8 ****
  " Test for the quickfix feature.
  
! if !has('quickfix')
!   throw 'Skipped, quickfix feature missing'
! endif
  
  set encoding=utf-8
  
--- 1,7 ----
  " Test for the quickfix feature.
  
! source check.vim
! CheckFeature quickfix
  
  set encoding=utf-8
  
*** ../vim-8.1.1543/src/testdir/test_quotestar.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_quotestar.vim	2019-06-15 17:18:17.967636236 +0200
***************
*** 2,8 ****
  
  source shared.vim
  if !WorkingClipboard()
!   throw 'Skipped, no working clipboard'
  endif
  
  source shared.vim
--- 2,8 ----
  
  source shared.vim
  if !WorkingClipboard()
!   throw 'Skipped: no working clipboard'
  endif
  
  source shared.vim
*** ../vim-8.1.1543/src/testdir/test_reltime.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_reltime.vim	2019-06-15 17:39:49.900406890 +0200
***************
*** 1,11 ****
  " Tests for reltime()
  
! if !has('reltime')
!   throw 'Skipped, reltime feature missing'
! endif
! if !has('float')
!   throw 'Skipped, float feature missing'
! endif
  
  func Test_reltime()
    let now = reltime()
--- 1,8 ----
  " Tests for reltime()
  
! source check.vim
! CheckFeature reltime
! CheckFeature float
  
  func Test_reltime()
    let now = reltime()
*** ../vim-8.1.1543/src/testdir/test_ruby.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_ruby.vim	2019-06-15 17:39:57.036367815 +0200
***************
*** 1,8 ****
  " Tests for ruby interface
  
! if !has('ruby')
!   throw 'Skipped, ruby feature missing'
! end
  
  func Test_ruby_change_buffer()
    call setline(line('$'), ['1 line 1'])
--- 1,7 ----
  " Tests for ruby interface
  
! source check.vim
! CheckFeature ruby
  
  func Test_ruby_change_buffer()
    call setline(line('$'), ['1 line 1'])
*** ../vim-8.1.1543/src/testdir/test_sha256.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_sha256.vim	2019-06-15 17:43:15.955192661 +0200
***************
*** 1,11 ****
  " Tests for the sha256() function.
  
! if !has('cryptv')
!   throw 'Skipped, cryptv feature missing'
! endif
! if !exists('*sha256')
!   throw 'Skipped, sha256 function missing'
! endif
  
  function Test_sha256()
    " test for empty string:
--- 1,8 ----
  " Tests for the sha256() function.
  
! source check.vim
! CheckFeature cryptv
! CheckFunction sha256
  
  function Test_sha256()
    " test for empty string:
*** ../vim-8.1.1543/src/testdir/test_shortpathname.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_shortpathname.vim	2019-06-15 17:18:17.967636236 +0200
***************
*** 2,8 ****
  " Only for use on Win32 systems!
  
  if !has('win32')
!   throw 'Skipped, not on MS-Windows'
  endif
  
  func TestIt(file, bits, expected)
--- 2,8 ----
  " Only for use on Win32 systems!
  
  if !has('win32')
!   throw 'Skipped: not on MS-Windows'
  endif
  
  func TestIt(file, bits, expected)
*** ../vim-8.1.1543/src/testdir/test_signals.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_signals.vim	2019-06-15 17:18:17.967636236 +0200
***************
*** 1,7 ****
  " Test signal handling.
  
  if !has('unix')
!   throw 'Skipped, not on Unix'
  endif
  
  source shared.vim
--- 1,7 ----
  " Test signal handling.
  
  if !has('unix')
!   throw 'Skipped: not on Unix'
  endif
  
  source shared.vim
*** ../vim-8.1.1543/src/testdir/test_signs.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_signs.vim	2019-06-15 17:43:28.527078104 +0200
***************
*** 1,8 ****
  " Test for signs
  
! if !has('signs')
!   throw 'Skipped, signs feature missing'
! endif
  
  func Test_sign()
    new
--- 1,7 ----
  " Test for signs
  
! source check.vim
! CheckFeature signs
  
  func Test_sign()
    new
*** ../vim-8.1.1543/src/testdir/test_spell.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_spell.vim	2019-06-15 17:43:42.426952575 +0200
***************
*** 1,8 ****
  " Test spell checking
  
! if !has('spell')
!   throw 'Skipped, spell feature missing'
! endif
  
  func TearDown()
    set nospell
--- 1,7 ----
  " Test spell checking
  
! source check.vim
! CheckFeature spell
  
  func TearDown()
    set nospell
*** ../vim-8.1.1543/src/testdir/test_syntax.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_syntax.vim	2019-06-15 17:43:50.186883008 +0200
***************
*** 1,8 ****
  " Test for syntax and syntax iskeyword option
  
! if !has("syntax")
!   throw 'Skipped, syntax feature missing'
! endif
  
  source view_util.vim
  source screendump.vim
--- 1,7 ----
  " Test for syntax and syntax iskeyword option
  
! source check.vim
! CheckFeature syntax
  
  source view_util.vim
  source screendump.vim
*** ../vim-8.1.1543/src/testdir/test_tcl.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_tcl.vim	2019-06-15 17:44:00.778788626 +0200
***************
*** 1,8 ****
  " Tests for the Tcl interface.
  
! if !has('tcl')
!   throw 'Skipped, tcl feature missing'
! end
  
  " Helper function as there is no builtin tcleval() function similar
  " to perleval, luaevel(), pyeval(), etc.
--- 1,7 ----
  " Tests for the Tcl interface.
  
! source check.vim
! CheckFeature tcl
  
  " Helper function as there is no builtin tcleval() function similar
  " to perleval, luaevel(), pyeval(), etc.
*** ../vim-8.1.1543/src/testdir/test_termcodes.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_termcodes.vim	2019-06-15 17:18:17.971636213 +0200
***************
*** 2,11 ****
  
  " This only works for Unix in a terminal
  if has('gui_running')
!   throw 'Skipped, does not work in the GUI'
  endif
  if !has('unix')
!   throw 'Skipped, not on Unix'
  endif
  
  source shared.vim
--- 2,11 ----
  
  " This only works for Unix in a terminal
  if has('gui_running')
!   throw 'Skipped: does not work in the GUI'
  endif
  if !has('unix')
!   throw 'Skipped: not on Unix'
  endif
  
  source shared.vim
*** ../vim-8.1.1543/src/testdir/test_terminal.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_terminal.vim	2019-06-15 17:44:10.202705220 +0200
***************
*** 1,8 ****
  " Tests for the terminal window.
  
! if !has('terminal')
!   throw 'Skipped, terminal feature missing'
! endif
  
  source shared.vim
  source screendump.vim
--- 1,7 ----
  " Tests for the terminal window.
  
! source check.vim
! CheckFeature terminal
  
  source shared.vim
  source screendump.vim
*** ../vim-8.1.1543/src/testdir/test_terminal_fail.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_terminal_fail.vim	2019-06-15 17:44:16.882646406 +0200
***************
*** 2,10 ****
  " leaks under valgrind.  That is because when fork/exec fails memory is not
  " freed.  Since the process exists right away it's not a real leak.
  
! if !has('terminal')
!   throw 'Skipped, terminal feature missing'
! endif
  
  source shared.vim
  
--- 2,9 ----
  " leaks under valgrind.  That is because when fork/exec fails memory is not
  " freed.  Since the process exists right away it's not a real leak.
  
! source check.vim
! CheckFeature terminal
  
  source shared.vim
  
*** ../vim-8.1.1543/src/testdir/test_textobjects.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_textobjects.vim	2019-06-15 17:44:28.982540557 +0200
***************
*** 1,8 ****
  " Test for textobjects
  
! if !has('textobjects')
!   throw 'Skipped, textobjects feature missing'
! endif
  
  func CpoM(line, useM, expected)
    new
--- 1,7 ----
  " Test for textobjects
  
! source check.vim
! CheckFeature textobjects
  
  func CpoM(line, useM, expected)
    new
*** ../vim-8.1.1543/src/testdir/test_textprop.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_textprop.vim	2019-06-15 17:44:35.542483512 +0200
***************
*** 1,9 ****
  " Tests for defining text property types and adding text properties to the
  " buffer.
  
! if !has('textprop')
!   throw 'Skipped, textprop feature missing'
! endif
  
  source screendump.vim
  
--- 1,8 ----
  " Tests for defining text property types and adding text properties to the
  " buffer.
  
! source check.vim
! CheckFeature textprop
  
  source screendump.vim
  
*** ../vim-8.1.1543/src/testdir/test_timers.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_timers.vim	2019-06-15 17:44:41.934428133 +0200
***************
*** 1,8 ****
  " Test for timers
  
! if !has('timers')
!   throw 'Skipped, timers feature missing'
! endif
  
  source shared.vim
  source screendump.vim
--- 1,7 ----
  " Test for timers
  
! source check.vim
! CheckFeature timers
  
  source shared.vim
  source screendump.vim
*** ../vim-8.1.1543/src/testdir/test_vartabs.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_vartabs.vim	2019-06-15 17:44:49.166365752 +0200
***************
*** 1,8 ****
  " Test for variable tabstops
  
! if !has("vartabs")
!   throw 'Skipped, vartabs feature missing'
! endif
  
  source view_util.vim
  
--- 1,7 ----
  " Test for variable tabstops
  
! source check.vim
! CheckFeature vartabs
  
  source view_util.vim
  
*** ../vim-8.1.1543/src/testdir/test_winbar.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_winbar.vim	2019-06-15 17:44:56.246304945 +0200
***************
*** 1,8 ****
  " Test WinBar
  
! if !has('menu')
!   throw 'Skipped, menu feature missing'
! endif
  
  source shared.vim
  
--- 1,7 ----
  " Test WinBar
  
! source check.vim
! CheckFeature menu
  
  source shared.vim
  
*** ../vim-8.1.1543/src/testdir/test_windows_home.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_windows_home.vim	2019-06-15 17:18:17.971636213 +0200
***************
*** 1,7 ****
  " Test for $HOME on Windows.
  
  if !has('win32')
!   throw 'Skipped, not on MS-Windows'
  endif
  
  let s:env = {}
--- 1,7 ----
  " Test for $HOME on Windows.
  
  if !has('win32')
!   throw 'Skipped: not on MS-Windows'
  endif
  
  let s:env = {}
*** ../vim-8.1.1543/src/testdir/test_xxd.vim	2019-06-13 22:19:04.537918178 +0200
--- src/testdir/test_xxd.vim	2019-06-15 17:18:17.971636213 +0200
***************
*** 2,8 ****
  if empty($XXD) && executable('..\xxd\xxd.exe')
    let s:xxd_cmd = '..\xxd\xxd.exe'
  elseif empty($XXD) || !executable($XXD)
!   throw 'Skipped, xxd program missing'
  else
    let s:xxd_cmd = $XXD
  endif
--- 2,8 ----
  if empty($XXD) && executable('..\xxd\xxd.exe')
    let s:xxd_cmd = '..\xxd\xxd.exe'
  elseif empty($XXD) || !executable($XXD)
!   throw 'Skipped: xxd program missing'
  else
    let s:xxd_cmd = $XXD
  endif
*** ../vim-8.1.1543/src/version.c	2019-06-15 17:50:53.139516045 +0200
--- src/version.c	2019-06-15 17:55:44.525506223 +0200
***************
*** 779,780 ****
--- 779,782 ----
  {   /* Add new patch number below this line */
+ /**/
+     1544,
  /**/

-- 
hundred-and-one symptoms of being an internet addict:
190. You quickly hand over your wallet, leather jacket, and car keys
     during a mugging, then proceed to beat the crap out of your
     assailant when he asks for your laptop.

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\  an exciting new programming language -- http://www.Zimbu.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
