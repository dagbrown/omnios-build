To: vim_dev@googlegroups.com
Subject: Patch 8.1.1226
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
------------

Patch 8.1.1226
Problem:    {not in Vi} remarks get in the way of useful help text.
Solution:   Make a list of all Vi options, instead of mentioning what Vi does
            not have.  Update the help text for options.
Files:	    runtime/doc/vi_diff.txt, runtime/doc/options.txt


*** ../vim-8.1.1225/runtime/doc/vi_diff.txt	2018-05-17 13:42:04.000000000 +0200
--- runtime/doc/vi_diff.txt	2019-04-28 15:54:57.973028174 +0200
***************
*** 19,26 ****
  3. Limits				|limits|
  4. The most interesting additions	|vim-additions|
  5. Other vim features			|other-features|
! 6. Command-line arguments		|cmdline-arguments|
! 7. POSIX compliance			|posix-compliance|
  
  ==============================================================================
  1. Simulated command					*simulated-command*
--- 19,27 ----
  3. Limits				|limits|
  4. The most interesting additions	|vim-additions|
  5. Other vim features			|other-features|
! 6. Supported Vi features		|vi-features|
! 7. Command-line arguments		|cmdline-arguments|
! 8. POSIX compliance			|posix-compliance|
  
  ==============================================================================
  1. Simulated command					*simulated-command*
***************
*** 787,793 ****
  The AUX: device of the Amiga is supported.
  
  ==============================================================================
! 6. Command-line arguments				*cmdline-arguments*
  
  Different versions of Vi have different command-line arguments.  This can be
  confusing.  To help you, this section gives an overview of the differences.
--- 788,867 ----
  The AUX: device of the Amiga is supported.
  
  ==============================================================================
! 6. Supported Vi features				*vi-features*
! 
! Vim supports nearly all Vi commands and mostly in the same way.  That is when
! the 'compatible' option is set and 'cpoptions' contains all flags.  What the
! effect is of resetting 'compatible' and removing flags from 'cpoptions' can be
! found at the help for the specific command.
! 
! Below is listed what features are present in Vi.  Anything else has been added
! by Vim.
! 
! The following Ex commands are supported by Vi: ~
! 
! TODO
! 
! `:set`		but not `:set inv{option}`, `:set option&`, `:set all&`,
! 		`:set option+=value`,
! 		`:set option^=value`
! 		`:set option-=value`
! 		`:set option<`
! 
! 
! The following Normal mode commands are supported by Vi: ~
! 
! TODO
! 
! 
! The following options are supported by Vi: ~
! 
! 'autoindent'	  'ai'	    take indent for new line from previous line
! 'autowrite'	  'aw'	    automatically write file if changed
! 'directory'	  'dir'     list of directory names for the swap file
! 'edcompatible'	  'ed'	    toggle flags of ":substitute" command
! 'errorbells'	  'eb'	    ring the bell for error messages
! 'ignorecase'	  'ic'	    ignore case in search patterns
! 'lines'			    number of lines in the display
! 'lisp'			    automatic indenting for Lisp
! 'list'			    show <Tab> and <EOL>
! 'magic'			    changes special characters in search patterns
! 'modeline'	  'ml'	    recognize 'modelines' at start or end of file
! 				{called modelines in some Vi versions}
! 'number'	  'nu'	    print the line number in front of each line
! 'paragraphs'	  'para'    nroff macros that separate paragraphs
! 'prompt'	  'prompt'  enable prompt in Ex mode
! 'readonly'	  'ro'	    disallow writing the buffer {Vim sets 'readonly'
! 				when editing a file with `:view`}
! 'remap'			    allow mappings to work recursively
! 'report'		    threshold for reporting nr. of lines changed
! 'scroll'	  'scr'     lines to scroll with CTRL-U and CTRL-D
! 'sections'	  'sect'    nroff macros that separate sections
! 'shell'		  'sh'	    name of shell to use for external commands
! 'shiftwidth'	  'sw'	    number of spaces to use for (auto)indent step
! 'showmatch'	  'sm'	    briefly jump to matching bracket if insert one
! 'showmode'	  'smd'     message on status line to show current mode
! 'tabstop'	  'ts'	    number of spaces that <Tab> in file uses
! 'taglength'	  'tl'	    number of significant characters for a tag
! 'tags'		  'tag'     list of file names used by the tag command
! 'tagstack'	  'tgst'    push tags onto the tag stack {not in all versions
! 				of Vi}
! 'term'			    name of the terminal
! 'terse'			    shorten some messages
! 'timeout'	  'to'	    time out on mappings and key codes
! 'ttytype'	  'tty'     alias for 'term'
! 'verbose'	  'vbs'     give informative messages {only in some Vi
! 				versions as a boolean option}
! 'warn'			    warn for shell command when buffer was changed
! 'window'	  'wi'	    nr of lines to scroll for CTRL-F and CTRL-B
! 'wrapmargin'	  'wm'	    chars from the right where wrapping starts
! 'wrapscan'	  'ws'	    searches wrap around the end of the file
! 'writeany'	  'wa'	    write to file with no need for "!" override
! 
! Also see |missing-options|.
! 
! ==============================================================================
! 7. Command-line arguments				*cmdline-arguments*
  
  Different versions of Vi have different command-line arguments.  This can be
  confusing.  To help you, this section gives an overview of the differences.
***************
*** 967,973 ****
  @{cmdfile}	Vile: use {cmdfile} as startup file.
  
  ==============================================================================
! 7. POSIX compliance				*posix* *posix-compliance*
  
  In 2005 the POSIX test suite was run to check the compatibility of Vim.  Most
  of the test was executed properly.  There are the few things where Vim
--- 1041,1047 ----
  @{cmdfile}	Vile: use {cmdfile} as startup file.
  
  ==============================================================================
! 8. POSIX compliance				*posix* *posix-compliance*
  
  In 2005 the POSIX test suite was run to check the compatibility of Vim.  Most
  of the test was executed properly.  There are the few things where Vim
***************
*** 1021,1024 ****
  - ex test 534 fails because .exrc isn't read in silent mode.
  
  
!  vim:tw=78:ts=8:ft=help:norl:
--- 1095,1098 ----
  - ex test 534 fails because .exrc isn't read in silent mode.
  
  
!  vim:tw=78:ts=8:noet:ft=help:norl:
*** ../vim-8.1.1225/runtime/doc/options.txt	2019-04-28 14:02:25.410687613 +0200
--- runtime/doc/options.txt	2019-04-28 15:59:07.463883436 +0200
***************
*** 42,54 ****
  
  							   *:set-!* *:set-inv*
  :se[t] {option}!   or
! :se[t] inv{option}	Toggle option: Invert value. {not in Vi}
  
  				*:set-default* *:set-&* *:set-&vi* *:set-&vim*
  :se[t] {option}&	Reset option to its default value.  May depend on the
! 			current value of 'compatible'. {not in Vi}
! :se[t] {option}&vi	Reset option to its Vi default value. {not in Vi}
! :se[t] {option}&vim	Reset option to its Vim default value. {not in Vi}
  
  :se[t] all&		Set all options to their default value.  The values of
  			these options are not changed:
--- 42,54 ----
  
  							   *:set-!* *:set-inv*
  :se[t] {option}!   or
! :se[t] inv{option}	Toggle option: Invert value.
  
  				*:set-default* *:set-&* *:set-&vi* *:set-&vim*
  :se[t] {option}&	Reset option to its default value.  May depend on the
! 			current value of 'compatible'.
! :se[t] {option}&vi	Reset option to its Vi default value.
! :se[t] {option}&vim	Reset option to its Vim default value.
  
  :se[t] all&		Set all options to their default value.  The values of
  			these options are not changed:
***************
*** 62,68 ****
  			  'ttymouse'
  			  'ttytype'
  			Warning: This may have a lot of side effects.
- 			{not in Vi}
  
  						*:set-args* *E487* *E521*
  :se[t] {option}={value}		or
--- 62,67 ----
***************
*** 88,94 ****
  			are removed.  When adding a flag that was already
  			present the option value doesn't change.
  			Also see |:set-args| above.
- 			{not in Vi}
  
  :se[t] {option}^={value}				*:set^=*
  			Multiply the {value} to a number option, or prepend
--- 87,92 ----
***************
*** 96,102 ****
  			comma separated list, a comma is added, unless the
  			value was empty.
  			Also see |:set-args| above.
- 			{not in Vi}
  
  :se[t] {option}-={value}				*:set-=*
  			Subtract the {value} from a number option, or remove
--- 94,99 ----
***************
*** 109,115 ****
  			exactly as they appear in the option.  Remove flags
  			one by one to avoid problems.
  			Also see |:set-args| above.
- 			{not in Vi}
  
  The {option} arguments to ":set" may be repeated.  For example: >
  	:set ai nosi sw=3 ts=3
--- 106,111 ----
***************
*** 120,129 ****
  When 'verbose' is non-zero, displaying an option value will also tell where it
  was last set.  Example: >
  	:verbose set shiftwidth cindent?
! <	  shiftwidth=4 ~
! 		  Last set from modeline ~
! 	  cindent ~
! 		  Last set from /usr/local/share/vim/vim60/ftplugin/c.vim ~
  This is only done when specific option values are requested, not for ":verbose
  set all" or ":verbose set" without an argument.
  When the option was set by hand there is no "Last set" message.
--- 116,125 ----
  When 'verbose' is non-zero, displaying an option value will also tell where it
  was last set.  Example: >
  	:verbose set shiftwidth cindent?
! <  shiftwidth=4 ~
! 	  Last set from modeline line 1 ~
!   cindent ~
! 	  Last set from /usr/local/share/vim/vim60/ftplugin/c.vim line 30 ~
  This is only done when specific option values are requested, not for ":verbose
  set all" or ":verbose set" without an argument.
  When the option was set by hand there is no "Last set" message.
***************
*** 132,138 ****
  Note that an option may also have been set as a side effect of setting
  'compatible'.
  A few special texts:
! 	Last set from modeline ~
  		Option was set in a |modeline|.
  	Last set from --cmd argument ~
  		Option was set with command line argument |--cmd| or +.
--- 128,134 ----
  Note that an option may also have been set as a side effect of setting
  'compatible'.
  A few special texts:
! 	Last set from modeline line 1 ~
  		Option was set in a |modeline|.
  	Last set from --cmd argument ~
  		Option was set with command line argument |--cmd| or +.
***************
*** 305,319 ****
  			before the option name.
  			For a global option the global value is
  			shown (but that might change in the future).
- 			{not in Vi}
  
  :setl[ocal] {option}<	Set the local value of {option} to its global value by
  			copying the value.
- 			{not in Vi}
  
  :se[t] {option}<	For |global-local| options: Remove the local value of
  			{option}, so that the global value will be used.
- 			{not in Vi}
  
  							*:setg* *:setglobal*
  :setg[lobal] ...	Like ":set" but set only the global value for a local
--- 301,312 ----
***************
*** 323,329 ****
  			local options.
  			Without argument: display global values for all local
  			options which are different from the default.
- 			{not in Vi}
  
  For buffer-local and window-local options:
  	Command		 global value	    local value ~
--- 316,321 ----
***************
*** 354,365 ****
  	:setlocal makeprg=perlmake
  You can switch back to using the global value by making the local value empty: >
  	:setlocal makeprg=
! This only works for a string option.  For a boolean option you need to use the
! "<" flag, like this: >
  	:setlocal autoread<
! Note that for non-boolean options using "<" copies the global value to the
! local value, it doesn't switch back to using the global value (that matters
! when the global value changes later).  You can also use: >
  	:set path<
  This will make the local value of 'path' empty, so that the global value is
  used.  Thus it does the same as: >
--- 346,357 ----
  	:setlocal makeprg=perlmake
  You can switch back to using the global value by making the local value empty: >
  	:setlocal makeprg=
! This only works for a string option.  For a number or boolean option you need
! to use the "<" flag, like this: >
  	:setlocal autoread<
! Note that for non-boolean and non-number options using "<" copies the global
! value to the local value, it doesn't switch back to using the global value
! (that matters when the global value changes later).  You can also use: >
  	:set path<
  This will make the local value of 'path' empty, so that the global value is
  used.  Thus it does the same as: >
***************
*** 383,393 ****
  
  			When the optional FALLBACK argument is present, a
  			later :setfiletype command will override the
! 			'filetype'.  This is to used for filetype detections
! 			that are just a guess.  |did_filetype()| will return
! 			false after this command.
! 
! 			{not in Vi}
  
  				*option-window* *optwin*
  :bro[wse] se[t]			*:set-browse* *:browse-set* *:opt* *:options*
--- 375,383 ----
  
  			When the optional FALLBACK argument is present, a
  			later :setfiletype command will override the
! 			'filetype'.  This is to be used for filetype
! 			detections that are just a guess.  |did_filetype()|
! 			will return false after this command.
  
  				*option-window* *optwin*
  :bro[wse] se[t]			*:set-browse* *:browse-set* *:opt* *:options*
***************
*** 444,450 ****
  				  CTRL-?	CTRL-H
  				not CTRL-?	CTRL-?
  
! 			(CTRL-? is 0177 octal, 0x7f hex) {not in Vi}
  
  			If your delete key terminal code is wrong, but the
  			code for backspace is alright, you can put this in
--- 434,440 ----
  				  CTRL-?	CTRL-H
  				not CTRL-?	CTRL-?
  
! 			(CTRL-? is 0177 octal, 0x7f hex)
  
  			If your delete key terminal code is wrong, but the
  			code for backspace is alright, you can put this in
***************
*** 660,666 ****
  					*'aleph'* *'al'* *aleph* *Aleph*
  'aleph' 'al'		number	(default 128 for MS-DOS, 224 otherwise)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+rightleft|
  			feature}
  	The ASCII code for the first letter of the Hebrew alphabet.  The
--- 650,655 ----
***************
*** 673,679 ****
  			*'allowrevins'* *'ari'* *'noallowrevins'* *'noari'*
  'allowrevins' 'ari'	boolean	(default off)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+rightleft|
  			feature}
  	Allow CTRL-_ in Insert and Command-line mode.  This is default off, to
--- 662,667 ----
***************
*** 685,691 ****
  			 *'altkeymap'* *'akm'* *'noaltkeymap'* *'noakm'*
  'altkeymap' 'akm'	boolean (default off)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+farsi|
  			feature}
  	This option was for using Farsi, which has been removed.  See
--- 673,678 ----
***************
*** 694,702 ****
  						*'ambiwidth'* *'ambw'*
  'ambiwidth' 'ambw'	string (default: "single")
  			global
- 			{not in Vi}
- 			{only available when compiled with the |+multi_byte|
- 			feature}
  	Only effective when 'encoding' is "utf-8" or another Unicode encoding.
  	Tells Vim what to do with characters with East Asian Width Class
  	Ambiguous (such as Euro, Registered Sign, Copyright Sign, Greek
--- 681,686 ----
***************
*** 733,739 ****
  			*'antialias'* *'anti'* *'noantialias'* *'noanti'*
  'antialias' 'anti'	boolean (default: off)
  			global
- 			{not in Vi}
  			{only available when compiled with GUI enabled
  			on Mac OS X}
  	This option only has an effect in the GUI version of Vim on Mac OS X
--- 717,722 ----
***************
*** 746,752 ****
  			*'autochdir'* *'acd'* *'noautochdir'* *'noacd'*
  'autochdir' 'acd'	boolean (default off)
  			global
- 			{not in Vi}
  			{only available when compiled with it, use
  			exists("+autochdir") to check}
  	When on, Vim will change the current working directory whenever you
--- 729,734 ----
***************
*** 758,764 ****
  				*'arabic'* *'arab'* *'noarabic'* *'noarab'*
  'arabic' 'arab'		boolean (default off)
  			local to window
- 			{not in Vi}
  			{only available when compiled with the |+arabic|
  			feature}
  	This option can be set to start editing Arabic text.
--- 740,745 ----
***************
*** 782,788 ****
  					*'noarabicshape'* *'noarshape'*
  'arabicshape' 'arshape'	boolean (default on)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+arabic|
  			feature}
  	When on and 'termbidi' is off, the required visual character
--- 763,768 ----
***************
*** 822,831 ****
  				 *'autoread'* *'ar'* *'noautoread'* *'noar'*
  'autoread' 'ar'		boolean	(default off)
  			global or local to buffer |global-local|
- 			{not in Vi}
  	When a file has been detected to have been changed outside of Vim and
  	it has not been changed inside of Vim, automatically read it again.
! 	When the file has been deleted this is not done.  |timestamp|
  	If this option has a local value, use this command to switch back to
  	using the global value: >
  		:set autoread<
--- 802,812 ----
  				 *'autoread'* *'ar'* *'noautoread'* *'noar'*
  'autoread' 'ar'		boolean	(default off)
  			global or local to buffer |global-local|
  	When a file has been detected to have been changed outside of Vim and
  	it has not been changed inside of Vim, automatically read it again.
! 	When the file has been deleted this is not done, so you have the text
! 	from before it was deleted.  When it appears again then it is read.
! 	|timestamp|
  	If this option has a local value, use this command to switch back to
  	using the global value: >
  		:set autoread<
***************
*** 839,849 ****
  	'{A-Z0-9}, or `{A-Z0-9} command takes one to another file.
  	Note that for some commands the 'autowrite' option is not used, see
  	'autowriteall' for that.
  
  			 *'autowriteall'* *'awa'* *'noautowriteall'* *'noawa'*
  'autowriteall' 'awa'	boolean	(default off)
  			global
- 			{not in Vi}
  	Like 'autowrite', but also used for commands ":edit", ":enew", ":quit",
  	":qall", ":exit", ":xit", ":recover" and closing the Vim window.
  	Setting this option also implies that Vim behaves like 'autowrite' has
--- 820,831 ----
  	'{A-Z0-9}, or `{A-Z0-9} command takes one to another file.
  	Note that for some commands the 'autowrite' option is not used, see
  	'autowriteall' for that.
+ 	Some buffers will not be written, specifically when 'buftype' is
+ 	"nowrite", "nofile", "terminal" or "prompt".
  
  			 *'autowriteall'* *'awa'* *'noautowriteall'* *'noawa'*
  'autowriteall' 'awa'	boolean	(default off)
  			global
  	Like 'autowrite', but also used for commands ":edit", ":enew", ":quit",
  	":qall", ":exit", ":xit", ":recover" and closing the Vim window.
  	Setting this option also implies that Vim behaves like 'autowrite' has
***************
*** 852,858 ****
  							*'background'* *'bg'*
  'background' 'bg'	string	(default "dark" or "light", see below)
  			global
- 			{not in Vi}
  	When set to "dark", Vim will try to use colors that look good on a
  	dark background.  When set to "light", Vim will try to use colors that
  	look good on a light background.  Any other value is illegal.
--- 834,839 ----
***************
*** 918,924 ****
  'backspace' 'bs'	string	(default "", set to "indent,eol,start"
  							    in |defaults.vim|)
  			global
- 			{not in Vi}
  	Influences the working of <BS>, <Del>, CTRL-W and CTRL-U in Insert
  	mode.  This is a list of items, separated by commas.  Each item allows
  	a way to backspace over something:
--- 899,904 ----
***************
*** 942,948 ****
  				*'backup'* *'bk'* *'nobackup'* *'nobk'*
  'backup' 'bk'		boolean	(default off)
  			global
- 			{not in Vi}
  	Make a backup before overwriting a file.  Leave it around after the
  	file has been successfully written.  If you do not want to keep the
  	backup file, but you do want a backup while the file is being
--- 922,927 ----
***************
*** 958,964 ****
  						*'backupcopy'* *'bkc'*
  'backupcopy' 'bkc'	string	(Vi default for Unix: "yes", otherwise: "auto")
  			global or local to buffer |global-local|
- 			{not in Vi}
  	When writing a file and a backup is made, this option tells how it's
  	done.  This is a comma separated list of words.
  
--- 937,942 ----
***************
*** 1029,1035 ****
  				 for MS-DOS and Win32: ".,$TEMP,c:/tmp,c:/temp"
  				 for Unix: ".,~/tmp,~/")
  			global
- 			{not in Vi}
  	List of directories for the backup file, separated with commas.
  	- The backup file will be created in the first directory in the list
  	  where this is possible.  The directory must exist, Vim will not
--- 1007,1012 ----
***************
*** 1048,1056 ****
  	- To include a comma in a directory name precede it with a backslash.
  	- A directory name may end in an '/'.
  	- For Unix and Win32, if a directory ends in two path separators "//",
! 	  the swap file name will be built from the complete path to the file
! 	  with all path separators changed to percent '%' signs. This will
! 	  ensure file name uniqueness in the backup directory.
  	  On Win32, it is also possible to end with "\\".  However, When a
  	  separating comma is following, you must use "//", since "\\" will
  	  include the comma in the file name. Therefore it is recommended to
--- 1025,1033 ----
  	- To include a comma in a directory name precede it with a backslash.
  	- A directory name may end in an '/'.
  	- For Unix and Win32, if a directory ends in two path separators "//",
! 	  the backup file name will be built from the complete path to the
! 	  file with all path separators changed to percent '%' signs. This
! 	  will ensure file name uniqueness in the backup directory.
  	  On Win32, it is also possible to end with "\\".  However, When a
  	  separating comma is following, you must use "//", since "\\" will
  	  include the comma in the file name. Therefore it is recommended to
***************
*** 1075,1081 ****
  						*'backupext'* *'bex'* *E589*
  'backupext' 'bex'	string	(default "~", for VMS: "_")
  			global
- 			{not in Vi}
  	String which is appended to a file name to make the name of the
  	backup file.  The default is quite unusual, because this avoids
  	accidentally overwriting existing files with a backup file.  You might
--- 1052,1057 ----
***************
*** 1094,1100 ****
  				 Unix: "/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*"
  				 Mac: "/private/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+wildignore|
  			feature}
  	A list of file patterns.  When one of the patterns matches with the
--- 1070,1075 ----
***************
*** 1121,1127 ****
  						*'balloondelay'* *'bdlay'*
  'balloondelay' 'bdlay'	number	(default: 600)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+balloon_eval|
  			feature}
  	Delay in milliseconds before a balloon may pop up.  See |balloon-eval|.
--- 1096,1101 ----
***************
*** 1129,1135 ****
  		       *'ballooneval'* *'beval'* *'noballooneval'* *'nobeval'*
  'ballooneval' 'beval'	boolean	(default off)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+balloon_eval|
  			feature}
  	Switch on the |balloon-eval| functionality for the GUI.
--- 1103,1108 ----
***************
*** 1138,1144 ****
  		       *'nobevalterm'*
  'balloonevalterm' 'bevalterm'	boolean	(default off)
  			global
- 			{not in Vi}
  			{only available when compiled with the
  			|+balloon_eval_term| feature}
  	Switch on the |balloon-eval| functionality for the terminal.
--- 1111,1116 ----
***************
*** 1146,1152 ****
  						     *'balloonexpr'* *'bexpr'*
  'balloonexpr' 'bexpr'	string	(default "")
  			global or local to buffer |global-local|
- 			{not in Vi}
  			{only available when compiled with the |+balloon_eval|
  			feature}
  	Expression for text to show in evaluation balloon.  It is only used
--- 1118,1123 ----
***************
*** 1194,1200 ****
  						*'belloff'* *'bo'*
  'belloff' 'bo'		string	(default "")
  			global
- 			{not in Vi}
  	Specifies for which events the bell will not be rung. It is a comma
  	separated list of items. For each item that is present, the bell
  	will be silenced. This is most useful to specify specific events in
--- 1165,1170 ----
***************
*** 1235,1241 ****
  				     *'binary'* *'bin'* *'nobinary'* *'nobin'*
  'binary' 'bin'		boolean	(default off)
  			local to buffer
- 			{not in Vi}
  	This option should be set before editing a binary file.  You can also
  	use the |-b| Vim argument.  When this option is switched on a few
  	options will be changed (also when it already was on):
--- 1205,1210 ----
***************
*** 1266,1280 ****
  			*'bioskey'* *'biosk'* *'nobioskey'* *'nobiosk'*
  'bioskey' 'biosk'	boolean	(default on)
  			global
! 			{not in Vi}  {only for MS-DOS}
  	This was for MS-DOS and is no longer supported.
  
  							*'bomb'* *'nobomb'*
  'bomb'			boolean	(default off)
  			local to buffer
- 			{not in Vi}
- 			{only available when compiled with the |+multi_byte|
- 			feature}
  	When writing a file and the following conditions are met, a BOM (Byte
  	Order Mark) is prepended to the file:
  	- this option is on
--- 1235,1246 ----
  			*'bioskey'* *'biosk'* *'nobioskey'* *'nobiosk'*
  'bioskey' 'biosk'	boolean	(default on)
  			global
! 			{only for MS-DOS}
  	This was for MS-DOS and is no longer supported.
  
  							*'bomb'* *'nobomb'*
  'bomb'			boolean	(default off)
  			local to buffer
  	When writing a file and the following conditions are met, a BOM (Byte
  	Order Mark) is prepended to the file:
  	- this option is on
***************
*** 1294,1300 ****
  						*'breakat'* *'brk'*
  'breakat' 'brk'		string	(default " ^I!@*-+;:,./?")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+linebreak|
  			feature}
  	This option lets you choose which characters might cause a line
--- 1260,1265 ----
***************
*** 1304,1310 ****
  			*'breakindent'* *'bri'* *'nobreakindent'* *'nobri'*
  'breakindent' 'bri'	boolean (default off)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+linebreak|
  			feature}
  	Every wrapped line will continue visually indented (same amount of
--- 1269,1274 ----
***************
*** 1315,1321 ****
  						*'breakindentopt'* *'briopt'*
  'breakindentopt' 'briopt' string (default empty)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+linebreak|
  			feature}
  	Settings for 'breakindent'. It can consist of the following optional
--- 1279,1284 ----
***************
*** 1337,1344 ****
  						*'browsedir'* *'bsdir'*
  'browsedir' 'bsdir'	string	(default: "last")
  			global
! 			{not in Vi} {only for Motif, Athena, GTK, Mac and
! 			Win32 GUI}
  	Which directory to use for the file browser:
  	   last		Use same directory as with last file browser, where a
  			file was opened or saved.
--- 1300,1306 ----
  						*'browsedir'* *'bsdir'*
  'browsedir' 'bsdir'	string	(default: "last")
  			global
! 			{only for Motif, Athena, GTK, Mac and Win32 GUI}
  	Which directory to use for the file browser:
  	   last		Use same directory as with last file browser, where a
  			file was opened or saved.
***************
*** 1349,1355 ****
  						*'bufhidden'* *'bh'*
  'bufhidden' 'bh'	string (default: "")
  			local to buffer
- 			{not in Vi}
  	This option specifies what happens when a buffer is no longer
  	displayed in a window:
  	  <empty>	follow the global 'hidden' option
--- 1311,1316 ----
***************
*** 1373,1379 ****
  			*'buflisted'* *'bl'* *'nobuflisted'* *'nobl'* *E85*
  'buflisted' 'bl'	boolean (default: on)
  			local to buffer
- 			{not in Vi}
  	When this option is set, the buffer shows up in the buffer list.  If
  	it is reset it is not used for ":bnext", "ls", the Buffers menu, etc.
  	This option is reset by Vim for buffers that are only used to remember
--- 1334,1339 ----
***************
*** 1383,1389 ****
  						*'buftype'* *'bt'* *E382*
  'buftype' 'bt'		string (default: "")
  			local to buffer
- 			{not in Vi}
  	The value of this option specifies the type of a buffer:
  	  <empty>	normal buffer
  	  nofile	buffer which is not related to a file and will not be
--- 1343,1348 ----
***************
*** 1435,1443 ****
  						*'casemap'* *'cmp'*
  'casemap' 'cmp'		string	(default: "internal,keepascii")
  			global
- 			{not in Vi}
- 			{only available when compiled with the |+multi_byte|
- 			feature}
  	Specifies details about changing the case of letters.  It may contain
  	these words, separated by a comma:
  	internal	Use internal case mapping functions, the current
--- 1394,1399 ----
***************
*** 1453,1459 ****
  						*'cdpath'* *'cd'* *E344* *E346*
  'cdpath' 'cd'		string	(default: equivalent to $CDPATH or ",,")
  			global
- 			{not in Vi}
  			{not available when compiled without the
  			|+file_in_path| feature}
  	This is a list of directories which will be searched when using the
--- 1409,1414 ----
***************
*** 1475,1481 ****
  						*'cedit'*
  'cedit'			string	(Vi default: "", Vim default: CTRL-F)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+vertsplit|
  			feature}
  	The key used in Command-line Mode to open the command-line window.
--- 1430,1435 ----
***************
*** 1493,1501 ****
  				*'charconvert'* *'ccv'* *E202* *E214* *E513*
  'charconvert' 'ccv'	string (default "")
  			global
! 			{only available when compiled with the |+multi_byte|
! 			and |+eval| features}
! 			{not in Vi}
  	An expression that is used for character encoding conversion.  It is
  	evaluated when a file that is to be read or has been written has a
  	different encoding from what is desired.
--- 1447,1453 ----
  				*'charconvert'* *'ccv'* *E202* *E214* *E513*
  'charconvert' 'ccv'	string (default "")
  			global
! 			{only available when compiled with the |+eval| feature}
  	An expression that is used for character encoding conversion.  It is
  	evaluated when a file that is to be read or has been written has a
  	different encoding from what is desired.
***************
*** 1538,1544 ****
  				   *'cindent'* *'cin'* *'nocindent'* *'nocin'*
  'cindent' 'cin'		boolean	(default off)
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the |+cindent|
  			feature}
  	Enables automatic C program indenting.  See 'cinkeys' to set the keys
--- 1490,1495 ----
***************
*** 1557,1563 ****
  							*'cinkeys'* *'cink'*
  'cinkeys' 'cink'	string	(default "0{,0},0),0],:,0#,!^F,o,O,e")
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the |+cindent|
  			feature}
  	A list of keys that, when typed in Insert mode, cause reindenting of
--- 1508,1513 ----
***************
*** 1569,1575 ****
  						*'cinoptions'* *'cino'*
  'cinoptions' 'cino'	string	(default "")
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the |+cindent|
  			feature}
  	The 'cinoptions' affect the way 'cindent' reindents lines in a C
--- 1519,1524 ----
***************
*** 1580,1586 ****
  						*'cinwords'* *'cinw'*
  'cinwords' 'cinw'	string	(default "if,else,while,do,for,switch")
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without both the
  			|+cindent| and the |+smartindent| features}
  	These keywords start an extra indent in the next line when
--- 1529,1534 ----
***************
*** 1594,1600 ****
  'clipboard' 'cb'	string	(default "autoselect,exclude:cons\|linux"
  						  for X-windows, "" otherwise)
  			global
- 			{not in Vi}
  			{only in GUI versions or when the |+xterm_clipboard|
  			feature is included}
  	This option is a list of comma separated names.
--- 1542,1547 ----
***************
*** 1629,1638 ****
  			area extended, Vim tries to become the owner of the
  			windowing system's global selection or put the
  			selected text on the clipboard used by the selection
! 			register "*.  See |guioptions_a| and |quotestar| for
! 			details.  When the GUI is active, the 'a' flag in
! 			'guioptions' is used, when the GUI is not active, this
! 			"autoselect" flag is used.
  			Also applies to the modeless selection.
  
  						*clipboard-autoselectplus*
--- 1576,1585 ----
  			area extended, Vim tries to become the owner of the
  			windowing system's global selection or put the
  			selected text on the clipboard used by the selection
! 			register "*.  See |'go-a'| and |quotestar| for details.
! 			When the GUI is active, the 'a' flag in 'guioptions'
! 			is used, when the GUI is not active, this "autoselect"
! 			flag is used.
  			Also applies to the modeless selection.
  
  						*clipboard-autoselectplus*
***************
*** 1653,1659 ****
  			You probably want to add this only temporarily,
  			possibly use BufEnter autocommands.
  			Only supported for GTK version 2 and later.
- 			Only available with the |+multi_byte| feature.
  
  						*clipboard-exclude*
  	exclude:{pattern}
--- 1600,1605 ----
***************
*** 1680,1686 ****
  						*'cmdheight'* *'ch'*
  'cmdheight' 'ch'	number	(default 1)
  			global
- 			{not in Vi}
  	Number of screen lines to use for the command-line.  Helps avoiding
  	|hit-enter| prompts.
  	The value of this option is stored with the tab page, so that each tab
--- 1626,1631 ----
***************
*** 1689,1695 ****
  						*'cmdwinheight'* *'cwh'*
  'cmdwinheight' 'cwh'	number	(default 7)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+vertsplit|
  			feature}
  	Number of screen lines to use for the command-line window. |cmdwin|
--- 1634,1639 ----
***************
*** 1697,1703 ****
  						*'colorcolumn'* *'cc'*
  'colorcolumn' 'cc'	string	(default "")
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+syntax|
  			feature}
  	'colorcolumn' is a comma separated list of screen columns that are
--- 1641,1646 ----
***************
*** 1716,1722 ****
  						*'columns'* *'co'* *E594*
  'columns' 'co'		number	(default 80 or terminal width)
  			global
- 			{not in Vi}
  	Number of columns of the screen.  Normally this is set by the terminal
  	initialization and does not have to be set by hand.  Also see
  	|posix-screen-size|.
--- 1659,1664 ----
***************
*** 1735,1741 ****
  'comments' 'com'	string	(default
  				"s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-")
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the |+comments|
  			feature}
  	A comma separated list of strings that can start a comment line.  See
--- 1677,1682 ----
***************
*** 1745,1751 ****
  					*'commentstring'* *'cms'* *E537*
  'commentstring' 'cms'	string	(default "/*%s*/")
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the |+folding|
  			feature}
  	A template for a comment.  The "%s" in the value is replaced with the
--- 1686,1691 ----
***************
*** 1756,1762 ****
  'compatible' 'cp'	boolean	(default on, off when a |vimrc| or |gvimrc|
  					file is found, reset in |defaults.vim|)
  			global
- 			{not in Vi}
  	This option has the effect of making Vim either more Vi-compatible, or
  	make Vim behave in a more useful way.
  
--- 1696,1701 ----
***************
*** 1877,1883 ****
  						*'complete'* *'cpt'* *E535*
  'complete' 'cpt'	string	(default: ".,w,b,u,t,i")
  			local to buffer
- 			{not in Vi}
  	This option specifies how keyword completion |ins-completion| works
  	when CTRL-P or CTRL-N are used.  It is also used for whole-line
  	completion |i_CTRL-X_CTRL-L|.  It indicates the type of completion
--- 1816,1821 ----
***************
*** 1921,1927 ****
  						*'completefunc'* *'cfu'*
  'completefunc' 'cfu'	string	(default: empty)
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the |+eval|
  			or |+insert_expand| features}
  	This option specifies a function to be used for Insert mode completion
--- 1859,1864 ----
***************
*** 1936,1942 ****
  			global
  			{not available when compiled without the
  			|+insert_expand| feature}
- 			{not in Vi}
  	A comma separated list of options for Insert mode completion
  	|ins-completion|.  The supported values are:
  
--- 1873,1878 ----
***************
*** 1970,1976 ****
  						*'concealcursor'* *'cocu'*
  'concealcursor' 'cocu'	string (default: "")
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+conceal|
  			feature}
  	Sets the modes in which text in the cursor line can also be concealed.
--- 1906,1911 ----
***************
*** 1990,1999 ****
  	displayed.  E.g., when moving vertically it may change column.
  
  
! 'conceallevel' 'cole'		*'conceallevel'* *'cole'*
! 			number (default 0)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+conceal|
  			feature}
  	Determine how text with the "conceal" syntax attribute |:syn-conceal|
--- 1925,1933 ----
  	displayed.  E.g., when moving vertically it may change column.
  
  
! 						*'conceallevel'* *'cole'*
! 'conceallevel' 'cole'	number (default 0)
  			local to window
  			{not available when compiled without the |+conceal|
  			feature}
  	Determine how text with the "conceal" syntax attribute |:syn-conceal|
***************
*** 2019,2025 ****
  				*'confirm'* *'cf'* *'noconfirm'* *'nocf'*
  'confirm' 'cf'		boolean (default off)
  			global
- 			{not in Vi}
  	When 'confirm' is on, certain operations that would normally
  	fail because of unsaved changes to a buffer, e.g. ":q" and ":e",
  	instead raise a |dialog| asking if you wish to save the current
--- 1953,1958 ----
***************
*** 2032,2044 ****
  			*'conskey'* *'consk'* *'noconskey'* *'noconsk'*
  'conskey' 'consk'	boolean	(default off)
  			global
- 			{not in Vi}  {only for MS-DOS}
  	This was for MS-DOS and is no longer supported.
  
  			*'copyindent'* *'ci'* *'nocopyindent'* *'noci'*
  'copyindent' 'ci'	boolean	(default off)
  			local to buffer
- 			{not in Vi}
  	Copy the structure of the existing lines indent when autoindenting a
  	new line.  Normally the new indent is reconstructed by a series of
  	tabs followed by spaces as required (unless |'expandtab'| is enabled,
--- 1965,1975 ----
***************
*** 2054,2060 ****
  'cpoptions' 'cpo'	string	(Vim default: "aABceFs",
  				 Vi default:  all flags)
  			global
- 			{not in Vi}
  	A sequence of single character flags.  When a character is present
  	this indicates Vi-compatible behavior.  This is used for things where
  	not being Vi-compatible is mostly or sometimes preferred.
--- 1985,1990 ----
***************
*** 2088,2097 ****
  			See also |map_bar|.
  								*cpo-B*
  		B	A backslash has no special meaning in mappings,
! 			abbreviations and the "to" part of the menu commands.
! 			Remove this flag to be able to use a backslash like a
! 			CTRL-V.  For example, the command ":map X \<Esc>"
! 			results in X being mapped to:
  				'B' included:	"\^["	 (^[ is a real <Esc>)
  				'B' excluded:	"<Esc>"  (5 characters)
  				('<' excluded in both cases)
--- 2018,2027 ----
  			See also |map_bar|.
  								*cpo-B*
  		B	A backslash has no special meaning in mappings,
! 			abbreviations, user commands and the "to" part of the
! 			menu commands.  Remove this flag to be able to use a
! 			backslash like a CTRL-V.  For example, the command
! 			":map X \<Esc>" results in X being mapped to:
  				'B' included:	"\^["	 (^[ is a real <Esc>)
  				'B' excluded:	"<Esc>"  (5 characters)
  				('<' excluded in both cases)
***************
*** 2264,2270 ****
  			deleted only once.  Also when repeating "R" with "."
  			and a count.
  								*cpo-y*
! 		y	A yank command can be redone with ".".
  								*cpo-Z*
  		Z	When using "w!" while the 'readonly' option is set,
  			don't reset 'readonly'.
--- 2194,2203 ----
  			deleted only once.  Also when repeating "R" with "."
  			and a count.
  								*cpo-y*
! 		y	A yank command can be redone with ".".  Think twice if
! 			you really want to use this, it may break some
! 			plugins, since most people expect "." to only repeat a
! 			change.
  								*cpo-Z*
  		Z	When using "w!" while the 'readonly' option is set,
  			don't reset 'readonly'.
***************
*** 2363,2369 ****
  						*'cryptmethod'* *'cm'*
  'cryptmethod' 'cm'	string	(default "blowfish2")
  			global or local to buffer |global-local|
- 			{not in Vi}
  	Method used for encryption when the buffer is written to a file:
  							*pkzip*
  	   zip		PkZip compatible method.  A weak kind of encryption.
--- 2296,2301 ----
***************
*** 2405,2411 ****
  			global
  			{not available when compiled without the |+cscope|
  			feature}
- 			{not in Vi}
  	Determines how many components of the path to show in a list of tags.
  	See |cscopepathcomp|.
  	NOTE: This option is set to 0 when 'compatible' is set.
--- 2337,2342 ----
***************
*** 2415,2421 ****
  			global
  			{not available when compiled without the |+cscope|
  			feature}
- 			{not in Vi}
  	Specifies the command to execute cscope.  See |cscopeprg|.
  	This option cannot be set from a |modeline| or in the |sandbox|, for
  	security reasons.
--- 2346,2351 ----
***************
*** 2425,2431 ****
  			global
  			{not available when compiled without the |+cscope|
  			or |+quickfix| features}
- 			{not in Vi}
  	Specifies whether to use quickfix window to show cscope results.
  	See |cscopequickfix|.
  
--- 2355,2360 ----
***************
*** 2434,2440 ****
  			global
  			{not available when compiled without the |+cscope|
  			feature}
- 			{not in Vi}
  	In the absence of a prefix (-P) for cscope. setting this option enables
  	to use the basename of cscope.out path as the prefix.
  	See |cscoperelative|.
--- 2363,2368 ----
***************
*** 2445,2451 ****
  			global
  			{not available when compiled without the |+cscope|
  			feature}
- 			{not in Vi}
  	Use cscope for tag commands.  See |cscope-options|.
  	NOTE: This option is reset when 'compatible' is set.
  
--- 2373,2378 ----
***************
*** 2454,2460 ****
  			global
  			{not available when compiled without the |+cscope|
  			feature}
- 			{not in Vi}
  	Determines the order in which ":cstag" performs a search.  See
  	|cscopetagorder|.
  	NOTE: This option is set to 0 when 'compatible' is set.
--- 2381,2386 ----
***************
*** 2465,2478 ****
  			global
  			{not available when compiled without the |+cscope|
  			feature}
- 			{not in Vi}
  	Give messages when adding a cscope database.  See |cscopeverbose|.
  	NOTE: This option is reset when 'compatible' is set.
  
  			*'cursorbind'* *'crb'* *'nocursorbind'* *'nocrb'*
  'cursorbind' 'crb'	boolean  (default off)
  			local to window
- 			{not in Vi}
  	When this option is set, as the cursor in the current
  	window moves other cursorbound windows (windows that also have
  	this option set) move their cursors to the corresponding line and
--- 2391,2402 ----
***************
*** 2485,2491 ****
  			*'cursorcolumn'* *'cuc'* *'nocursorcolumn'* *'nocuc'*
  'cursorcolumn' 'cuc'	boolean	(default off)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+syntax|
  			feature}
  	Highlight the screen column of the cursor with CursorColumn
--- 2409,2414 ----
***************
*** 2500,2506 ****
  			*'cursorline'* *'cul'* *'nocursorline'* *'nocul'*
  'cursorline' 'cul'	boolean	(default off)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+syntax|
  			feature}
  	Highlight the screen line of the cursor with CursorLine
--- 2423,2428 ----
***************
*** 2513,2519 ****
  						*'debug'*
  'debug'			string	(default "")
  			global
- 			{not in Vi}
  	These values can be used:
  	msg	Error messages that would otherwise be omitted will be given
  		anyway.
--- 2435,2440 ----
***************
*** 2528,2534 ****
  						*'define'* *'def'*
  'define' 'def'		string	(default "^\s*#\s*define")
  			global or local to buffer |global-local|
- 			{not in Vi}
  	Pattern to be used to find a macro definition.  It is a search
  	pattern, just like for the "/" command.  This option is used for the
  	commands like "[i" and "[d" |include-search|.  The 'isident' option is
--- 2449,2454 ----
***************
*** 2539,2552 ****
  	The default value is for C programs.  For C++ this value would be
  	useful, to include const type declarations: >
  		^\(#\s*define\|[a-z]*\s*const\s*[a-z]*\)
  <	When using the ":set" command, you need to double the backslashes!
  
  			*'delcombine'* *'deco'* *'nodelcombine'* *'nodeco'*
  'delcombine' 'deco'	boolean (default off)
  			global
- 			{not in Vi}
- 			{only available when compiled with the |+multi_byte|
- 			feature}
  	If editing Unicode and this option is set, backspace and Normal mode
  	"x" delete each combining character on its own.  When it is off (the
  	default) the character along with its combining characters are
--- 2459,2478 ----
  	The default value is for C programs.  For C++ this value would be
  	useful, to include const type declarations: >
  		^\(#\s*define\|[a-z]*\s*const\s*[a-z]*\)
+ <	You can also use "\ze" just before the name and continue the pattern
+ 	to check what is following.  E.g. for Javascript, if a function is
+ 	defined with "func_name = function(args)": >
+ 		^\s*\ze\i\+\s*=\s*function(
+ <	If the function is defined with "func_name : function() {...": >
+ 	        ^\s*\ze\i\+\s*[:]\s*(*function\s*(
  <	When using the ":set" command, you need to double the backslashes!
+ 	To avoid that use `:let` with a single quote string: >
+ 		let &l:define = '^\s*\ze\k\+\s*=\s*function('
+ <
  
  			*'delcombine'* *'deco'* *'nodelcombine'* *'nodeco'*
  'delcombine' 'deco'	boolean (default off)
  			global
  	If editing Unicode and this option is set, backspace and Normal mode
  	"x" delete each combining character on its own.  When it is off (the
  	default) the character along with its combining characters are
***************
*** 2561,2567 ****
  						*'dictionary'* *'dict'*
  'dictionary' 'dict'	string	(default "")
  			global or local to buffer |global-local|
- 			{not in Vi}
  	List of file names, separated by commas, that are used to lookup words
  	for keyword completion commands |i_CTRL-X_CTRL-K|.  Each file should
  	contain a list of words.  This can be one word per line, or several
--- 2487,2492 ----
***************
*** 2588,2594 ****
  							*'diff'* *'nodiff'*
  'diff'			boolean	(default off)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+diff|
  			feature}
  	Join the current window in the group of windows that shows differences
--- 2513,2518 ----
***************
*** 2597,2603 ****
  						*'dex'* *'diffexpr'*
  'diffexpr' 'dex'	string	(default "")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+diff|
  			feature}
  	Expression which is evaluated to obtain a diff file (either ed-style
--- 2521,2526 ----
***************
*** 2608,2614 ****
  						*'dip'* *'diffopt'*
  'diffopt' 'dip'		string	(default "internal,filler")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+diff|
  			feature}
  	Option settings for diff mode.  It can consist of the following items.
--- 2531,2536 ----
***************
*** 2623,2630 ****
--- 2545,2564 ----
  		context:{n}	Use a context of {n} lines between a change
  				and a fold that contains unchanged lines.
  				When omitted a context of six lines is used.
+ 				When using zero the context is actually one,
+ 				since folds require a line in between, also
+ 				for a deleted line.
  				See |fold-diff|.
  
+ 		iblank		Ignore changes where lines are all blank.  Adds
+ 				the "-B" flag to the "diff" command if
+ 				'diffexpr' is empty.  Check the documentation
+ 				of the "diff" command for what this does
+ 				exactly.
+ 				NOTE: the diff windows will get out of sync,
+ 				because no differences between blank lines are
+ 				taken into account.
+ 
  		icase		Ignore changes in case of text.  "a" and "A"
  				are considered the same.  Adds the "-i" flag
  				to the "diff" command if 'diffexpr' is empty.
***************
*** 2636,2641 ****
--- 2570,2587 ----
  				exactly.  It should ignore adding trailing
  				white space, but not leading white space.
  
+ 		iwhiteall	Ignore all white space changes.  Adds
+ 				the "-w" flag to the "diff" command if
+ 				'diffexpr' is empty.  Check the documentation
+ 				of the "diff" command for what this does
+ 				exactly.
+ 
+ 		iwhiteeol	Ignore white space changes at end of line.
+ 				Adds the "-Z" flag to the "diff" command if
+ 				'diffexpr' is empty.  Check the documentation
+ 				of the "diff" command for what this does
+ 				exactly.
+ 
  		horizontal	Start diff mode with horizontal splits (unless
  				explicitly specified otherwise).
  
***************
*** 2656,2666 ****
  				option to see when this happens.
  
  		indent-heuristic
!                                  Use the indent heuristic for the internal
!                                  diff library.
  
                  algorithm:{text} Use the specified diff algorithm with the
! 				internal diff engine. Currently supported 
  				algorithms are:
  				myers      the default algorithm
  				minimal    spend extra time to generate the
--- 2602,2612 ----
  				option to see when this happens.
  
  		indent-heuristic
! 				Use the indent heuristic for the internal
! 				diff library.
  
                  algorithm:{text} Use the specified diff algorithm with the
! 				internal diff engine. Currently supported
  				algorithms are:
  				myers      the default algorithm
  				minimal    spend extra time to generate the
***************
*** 2677,2683 ****
  				     *'digraph'* *'dg'* *'nodigraph'* *'nodg'*
  'digraph' 'dg'		boolean	(default off)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+digraphs|
  			feature}
  	Enable the entering of digraphs in Insert mode with {char1} <BS>
--- 2623,2628 ----
***************
*** 2738,2744 ****
  'display' 'dy'		string	(default "", set to "truncate" in
  							       |defaults.vim|)
  			global
- 			{not in Vi}
  	Change the way text is displayed.  This is comma separated list of
  	flags:
  	lastline	When included, as much as possible of the last line
--- 2683,2688 ----
***************
*** 2756,2762 ****
  						*'eadirection'* *'ead'*
  'eadirection' 'ead'	string	(default "both")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+vertsplit|
  			feature}
  	Tells when the 'equalalways' option applies:
--- 2700,2705 ----
***************
*** 2775,2792 ****
  					*'emoji'* *'emo'* *'noemoji'* *'noemo'*
  'emoji' 'emo'	boolean (default: on)
  			global
- 			{not in Vi}
- 			{only available when compiled with the |+multi_byte|
- 			feature}
  	When on all Unicode emoji characters are considered to be full width.
  
  
  					*'encoding'* *'enc'* *E543*
  'encoding' 'enc'	string (default: "latin1" or value from $LANG)
  			global
- 			{only available when compiled with the |+multi_byte|
- 			feature}
- 			{not in Vi}
  	Sets the character encoding used inside Vim.  It applies to text in
  	the buffers, registers, Strings in expressions, text stored in the
  	viminfo file, etc.  It sets the kind of characters which Vim can work
--- 2718,2729 ----
***************
*** 2849,2855 ****
  			*'endofline'* *'eol'* *'noendofline'* *'noeol'*
  'endofline' 'eol'	boolean	(default on)
  			local to buffer
- 			{not in Vi}
  	When writing a file and this option is off and the 'binary' option
  	is on, or 'fixeol' option is off, no <EOL> will be written for the
  	last line in the file.  This option is automatically set or reset when
--- 2786,2791 ----
***************
*** 2865,2871 ****
  			     *'equalalways'* *'ea'* *'noequalalways'* *'noea'*
  'equalalways' 'ea'	boolean	(default on)
  			global
- 			{not in Vi}
  	When on, all the windows are automatically made the same size after
  	splitting or closing a window.  This also happens the moment the
  	option is switched on.  When off, splitting a window will reduce the
--- 2801,2806 ----
***************
*** 2884,2890 ****
  						*'equalprg'* *'ep'*
  'equalprg' 'ep'		string	(default "")
  			global or local to buffer |global-local|
- 			{not in Vi}
  	External program to use for "=" command.  When this option is empty
  	the internal formatting functions are used; either 'lisp', 'cindent'
  	or 'indentexpr'.  When Vim was compiled without internal formatting,
--- 2819,2824 ----
***************
*** 2908,2914 ****
  'errorfile' 'ef'	string	(Amiga default: "AztecC.Err",
  					others: "errors.err")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+quickfix|
  			feature}
  	Name of the errorfile for the QuickFix mode (see |:cf|).
--- 2842,2847 ----
***************
*** 2923,2929 ****
  						*'errorformat'* *'efm'*
  'errorformat' 'efm'	string	(default is very long)
  			global or local to buffer |global-local|
- 			{not in Vi}
  			{not available when compiled without the |+quickfix|
  			feature}
  	Scanf-like description of the format for the lines in the error file
--- 2856,2861 ----
***************
*** 2932,2938 ****
  				     *'esckeys'* *'ek'* *'noesckeys'* *'noek'*
  'esckeys' 'ek'		boolean	(Vim default: on, Vi default: off)
  			global
- 			{not in Vi}
  	Function keys that start with an <Esc> are recognized in Insert
  	mode.  When this option is off, the cursor and function keys cannot be
  	used in Insert mode if they start with an <Esc>.  The advantage of
--- 2864,2869 ----
***************
*** 2947,2953 ****
  						*'eventignore'* *'ei'*
  'eventignore' 'ei'	string	(default "")
  			global
- 			{not in Vi}
  	A list of autocommand event names, which are to be ignored.
  	When set to "all" or when "all" is one of the items, all autocommand
  	events are ignored, autocommands will not be executed.
--- 2878,2883 ----
***************
*** 2957,2963 ****
  				 *'expandtab'* *'et'* *'noexpandtab'* *'noet'*
  'expandtab' 'et'	boolean	(default off)
  			local to buffer
- 			{not in Vi}
  	In Insert mode: Use the appropriate number of spaces to insert a
  	<Tab>.  Spaces are used in indents with the '>' and '<' commands and
  	when 'autoindent' is on.  To insert a real tab when 'expandtab' is
--- 2887,2892 ----
***************
*** 2969,2975 ****
  					*'exrc'* *'ex'* *'noexrc'* *'noex'*
  'exrc' 'ex'		boolean (default off)
  			global
- 			{not in Vi}
  	Enables the reading of .vimrc, .exrc and .gvimrc in the current
  	directory.
  
--- 2898,2903 ----
***************
*** 2988,2996 ****
  				*'fileencoding'* *'fenc'* *E213*
  'fileencoding' 'fenc'	string (default: "")
  			local to buffer
- 			{only available when compiled with the |+multi_byte|
- 			feature}
- 			{not in Vi}
  	Sets the character encoding for the file of this buffer.
  
  	When 'fileencoding' is different from 'encoding', conversion will be
--- 2916,2921 ----
***************
*** 3045,3053 ****
  				    "ucs-bom,utf-8,default,latin1" when
  				    'encoding' is set to a Unicode value)
  			global
- 			{only available when compiled with the |+multi_byte|
- 			feature}
- 			{not in Vi}
  	This is a list of character encodings considered when starting to edit
  	an existing file.  When a file is read, Vim tries to use the first
  	mentioned character encoding.  If an error is detected, the next one
--- 2970,2975 ----
***************
*** 3104,3110 ****
  'fileformat' 'ff'	string (MS-Windows default: "dos",
  				Unix, macOS default: "unix")
  			local to buffer
- 			{not in Vi}
  	This gives the <EOL> of the current buffer, which is used for
  	reading/writing the buffer from/to a file:
  	    dos	    <CR> <NL>
--- 3026,3031 ----
***************
*** 3130,3136 ****
  				Vi	Cygwin: "unix,dos",
  				Vi	others: "")
  			global
- 			{not in Vi}
  	This gives the end-of-line (<EOL>) formats that will be tried when
  	starting to edit a new buffer and when reading a file into an existing
  	buffer:
--- 3051,3056 ----
***************
*** 3186,3199 ****
  'fileignorecase' 'fic'	boolean	(default on for systems where case in file
  				 names is normally ignored)
  			global
- 			{not in Vi}
  	When set case is ignored when using file names and directories.
  	See 'wildignorecase' for only ignoring case when doing completion.
  
  					*'filetype'* *'ft'*
  'filetype' 'ft'		string (default: "")
  			local to buffer
- 			{not in Vi}
  	When this option is set, the FileType autocommand event is triggered.
  	All autocommands that match with the value of this option will be
  	executed.  Thus the value of 'filetype' is used in place of the file
--- 3106,3117 ----
***************
*** 3219,3225 ****
  						*'fillchars'* *'fcs'*
  'fillchars' 'fcs'	string	(default "vert:|,fold:-")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+windows|
  			and |+folding| features}
  	Characters to fill the statuslines and vertical separators.
--- 3137,3142 ----
***************
*** 3254,3260 ****
  		*'fixendofline'* *'fixeol'* *'nofixendofline'* *'nofixeol'*
  'fixendofline' 'fixeol'	boolean	(default on)
  			local to buffer
- 			{not in Vi}
  	When writing a file and this option is on, <EOL> at the end of file
  	will be restored if missing. Turn this option off if you want to
  	preserve the situation from the original file.
--- 3171,3176 ----
***************
*** 3265,3271 ****
  					*'fkmap'* *'fk'* *'nofkmap'* *'nofk'*
  'fkmap' 'fk'		boolean (default off)			*E198*
  			global
- 			{not in Vi}
  			{only available when compiled with the |+rightleft|
  			feature}
  	This option was for using Farsi, which has been removed.  See
--- 3181,3186 ----
***************
*** 3274,3280 ****
  						*'foldclose'* *'fcl'*
  'foldclose' 'fcl'	string (default "")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+folding|
  			feature}
  	When set to "all", a fold is closed when the cursor isn't in it and
--- 3189,3194 ----
***************
*** 3284,3290 ****
  						*'foldcolumn'* *'fdc'*
  'foldcolumn' 'fdc'	number (default 0)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+folding|
  			feature}
  	When non-zero, a column with the specified width is shown at the side
--- 3198,3203 ----
***************
*** 3295,3301 ****
  			*'foldenable'* *'fen'* *'nofoldenable'* *'nofen'*
  'foldenable' 'fen'	boolean (default on)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+folding|
  			feature}
  	When off, all folds are open.  This option can be used to quickly
--- 3208,3213 ----
***************
*** 3309,3315 ****
  						*'foldexpr'* *'fde'*
  'foldexpr' 'fde'	string (default: "0")
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+folding|
  			or |+eval| features}
  	The expression used for when 'foldmethod' is "expr".  It is evaluated
--- 3221,3226 ----
***************
*** 3326,3332 ****
  						*'foldignore'* *'fdi'*
  'foldignore' 'fdi'	string (default: "#")
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+folding|
  			feature}
  	Used only when 'foldmethod' is "indent".  Lines starting with
--- 3237,3242 ----
***************
*** 3337,3343 ****
  						*'foldlevel'* *'fdl'*
  'foldlevel' 'fdl'	number (default: 0)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+folding|
  			feature}
  	Sets the fold level: Folds with a higher level will be closed.
--- 3247,3252 ----
***************
*** 3349,3355 ****
  						*'foldlevelstart'* *'fdls'*
  'foldlevelstart' 'fdls'	number (default: -1)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+folding|
  			feature}
  	Sets 'foldlevel' when starting to edit another buffer in a window.
--- 3258,3263 ----
***************
*** 3365,3371 ****
  						*'foldmarker'* *'fmr'* *E536*
  'foldmarker' 'fmr'	string (default: "{{{,}}}")
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+folding|
  			feature}
  	The start and end marker used when 'foldmethod' is "marker".  There
--- 3273,3278 ----
***************
*** 3376,3382 ****
  						*'foldmethod'* *'fdm'*
  'foldmethod' 'fdm'	string (default: "manual")
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+folding|
  			feature}
  	The kind of folding used for the current window.  Possible values:
--- 3283,3288 ----
***************
*** 3390,3396 ****
  						*'foldminlines'* *'fml'*
  'foldminlines' 'fml'	number (default: 1)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+folding|
  			feature}
  	Sets the number of screen lines above which a fold can be displayed
--- 3296,3301 ----
***************
*** 3404,3410 ****
  						*'foldnestmax'* *'fdn'*
  'foldnestmax' 'fdn'	number (default: 20)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+folding|
  			feature}
  	Sets the maximum nesting of folds for the "indent" and "syntax"
--- 3309,3314 ----
***************
*** 3415,3421 ****
  'foldopen' 'fdo'	string (default: "block,hor,mark,percent,quickfix,
  							     search,tag,undo")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+folding|
  			feature}
  	Specifies for which type of commands folds will be opened, if the
--- 3319,3324 ----
***************
*** 3452,3458 ****
  						*'foldtext'* *'fdt'*
  'foldtext' 'fdt'	string (default: "foldtext()")
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+folding|
  			feature}
  	An expression which is used to specify the text displayed for a closed
--- 3355,3360 ----
***************
*** 3467,3473 ****
  						*'formatexpr'* *'fex'*
  'formatexpr' 'fex'	string (default "")
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the |+eval|
  			feature}
  	Expression which is evaluated to format a range of lines for the |gq|
--- 3369,3374 ----
***************
*** 3500,3522 ****
  	since changing the buffer text is not allowed.
  	NOTE: This option is set to "" when 'compatible' is set.
  
- 					*'formatoptions'* *'fo'*
- 'formatoptions' 'fo'	string (Vim default: "tcq", Vi default: "vt")
- 			local to buffer
- 			{not in Vi}
- 	This is a sequence of letters which describes how automatic
- 	formatting is to be done.  See |fo-table|.  When the 'paste' option is
- 	on, no formatting is done (like 'formatoptions' is empty).  Commas can
- 	be inserted for readability.
- 	To avoid problems with flags that are added in the future, use the
- 	"+=" and "-=" feature of ":set" |add-option-flags|.
- 	NOTE: This option is set to the Vi default value when 'compatible' is
- 	set and to the Vim default value when 'compatible' is reset.
- 
  					*'formatlistpat'* *'flp'*
  'formatlistpat' 'flp'	string (default: "^\s*\d\+[\]:.)}\t ]\s*")
  			local to buffer
- 			{not in Vi}
  	A pattern that is used to recognize a list header.  This is used for
  	the "n" flag in 'formatoptions'.
  	The pattern must match exactly the text that will be the indent for
--- 3401,3409 ----
***************
*** 3527,3536 ****
  	The default recognizes a number, followed by an optional punctuation
  	character and white space.
  
  						*'formatprg'* *'fp'*
  'formatprg' 'fp'	string (default "")
  			global or local to buffer |global-local|
- 			{not in Vi}
  	The name of an external program that will be used to format the lines
  	selected with the |gq| operator.  The program must take the input on
  	stdin and produce the output on stdout.  The Unix program "fmt" is
--- 3414,3434 ----
  	The default recognizes a number, followed by an optional punctuation
  	character and white space.
  
+ 					*'formatoptions'* *'fo'*
+ 'formatoptions' 'fo'	string (Vim default: "tcq", Vi default: "vt")
+ 			local to buffer
+ 	This is a sequence of letters which describes how automatic
+ 	formatting is to be done.  See |fo-table|.  When the 'paste' option is
+ 	on, no formatting is done (like 'formatoptions' is empty).  Commas can
+ 	be inserted for readability.
+ 	To avoid problems with flags that are added in the future, use the
+ 	"+=" and "-=" feature of ":set" |add-option-flags|.
+ 	NOTE: This option is set to the Vi default value when 'compatible' is
+ 	set and to the Vim default value when 'compatible' is reset.
+ 
  						*'formatprg'* *'fp'*
  'formatprg' 'fp'	string (default "")
  			global or local to buffer |global-local|
  	The name of an external program that will be used to format the lines
  	selected with the |gq| operator.  The program must take the input on
  	stdin and produce the output on stdout.  The Unix program "fmt" is
***************
*** 3546,3552 ****
  					*'fsync'* *'fs'* *'nofsync'* *'nofs'*
  'fsync' 'fs'		boolean	(default on)
  			global
- 			{not in Vi}
  	When on, the library function fsync() will be called after writing a
  	file.  This will flush a file to disk, ensuring that it is safely
  	written even on filesystems which do metadata-only journaling.  This
--- 3444,3449 ----
***************
*** 3562,3568 ****
  				   *'gdefault'* *'gd'* *'nogdefault'* *'nogd'*
  'gdefault' 'gd'		boolean	(default off)
  			global
- 			{not in Vi}
  	When on, the ":substitute" flag 'g' is default on.  This means that
  	all matches in a line are substituted instead of one.  When a 'g' flag
  	is given to a ":substitute" command, this will toggle the substitution
--- 3459,3464 ----
***************
*** 3581,3587 ****
  						*'grepformat'* *'gfm'*
  'grepformat' 'gfm'	string	(default "%f:%l:%m,%f:%l%m,%f  %l%m")
  			global
- 			{not in Vi}
  	Format to recognize for the ":grep" command output.
  	This is a scanf-like string that uses the same format as the
  	'errorformat' option: see |errorformat|.
--- 3477,3482 ----
***************
*** 3592,3598 ****
  					Win32: "findstr /n" or "grep -n",
  						      VMS: "SEARCH/NUMBERS ")
  			global or local to buffer |global-local|
- 			{not in Vi}
  	Program to use for the |:grep| command.  This option may contain '%'
  	and '#' characters, which are expanded like when used in a command-
  	line.  The placeholder "$*" is allowed to specify where the arguments
--- 3487,3492 ----
***************
*** 3623,3629 ****
  					"n-v-c:block,o:hor50,i-ci:hor15,
  					r-cr:hor30,sm:block")
  			global
- 			{not in Vi}
  			{only available when compiled with GUI enabled, and
  			for MS-DOS and Win32 console}
  	This option tells Vim what the cursor should look like in different
--- 3517,3522 ----
***************
*** 3702,3708 ****
  						   *E235* *E596*
  'guifont' 'gfn'		string	(default "")
  			global
- 			{not in Vi}
  			{only available when compiled with GUI enabled}
  	This is a list of fonts which will be used for the GUI version of Vim.
  	In its simplest form the value is just one font name.
--- 3595,3600 ----
***************
*** 3712,3718 ****
  					*E250* *E252* *E234* *E597* *E598*
  'guifontset' 'gfs'	string	(default "")
  			global
- 			{not in Vi}
  			{only available when compiled with GUI enabled and
  			with the |+xfontset| feature}
  			{not available in the GTK+ GUI}
--- 3604,3609 ----
***************
*** 3723,3729 ****
  				*'guifontwide'* *'gfw'* *E231* *E533* *E534*
  'guifontwide' 'gfw'	string	(default "")
  			global
- 			{not in Vi}
  			{only available when compiled with GUI enabled}
  	When not empty, specifies a comma-separated list of fonts to be used
  	for double-width characters.  The first font that can be loaded is
--- 3614,3619 ----
***************
*** 3732,3738 ****
  						*'guiheadroom'* *'ghr'*
  'guiheadroom' 'ghr'	number	(default 50)
  			global
! 			{not in Vi} {only for GTK and X11 GUI}
  	The number of pixels subtracted from the screen height when fitting
  	the GUI window on the screen.  Set this before the GUI is started,
  	e.g., in your |gvimrc| file.  When zero, the whole screen height will
--- 3622,3628 ----
  						*'guiheadroom'* *'ghr'*
  'guiheadroom' 'ghr'	number	(default 50)
  			global
! - 			{only for GTK and X11 GUI}
  	The number of pixels subtracted from the screen height when fitting
  	the GUI window on the screen.  Set this before the GUI is started,
  	e.g., in your |gvimrc| file.  When zero, the whole screen height will
***************
*** 3742,3753 ****
  	screen.
  
  						*'guioptions'* *'go'*
! 'guioptions' 'go'	string	(default "egmrLtT"   (MS-Windows, "t" is
! 						   removed in |defaults.vim|),
  					 "aegimrLtT" (GTK, Motif and Athena),
  					 )
  			global
- 			{not in Vi}
  			{only available when compiled with GUI enabled}
  	This option only has an effect in the GUI version of Vim.  It is a
  	sequence of letters which describes what components and options of the
--- 3632,3642 ----
  	screen.
  
  						*'guioptions'* *'go'*
! 'guioptions' 'go'	string	(default "egmrLtT"   (MS-Windows,
! 					   "t" is removed in |defaults.vim|),
  					 "aegimrLtT" (GTK, Motif and Athena),
  					 )
  			global
  			{only available when compiled with GUI enabled}
  	This option only has an effect in the GUI version of Vim.  It is a
  	sequence of letters which describes what components and options of the
***************
*** 3763,3769 ****
  		terminal to list the command output.
  		The terminal window will be positioned at the bottom, and grow
  		upwards as needed.
! 							*guioptions_a* *'go-a'*
  	  'a'	Autoselect:  If present, then whenever VISUAL mode is started,
  		or the Visual area extended, Vim tries to become the owner of
  		the windowing system's global selection.  This means that the
--- 3652,3658 ----
  		terminal to list the command output.
  		The terminal window will be positioned at the bottom, and grow
  		upwards as needed.
! 								*'go-a'*
  	  'a'	Autoselect:  If present, then whenever VISUAL mode is started,
  		or the Visual area extended, Vim tries to become the owner of
  		the windowing system's global selection.  This means that the
***************
*** 3874,3880 ****
  						*'guipty'* *'noguipty'*
  'guipty'		boolean	(default on)
  			global
- 			{not in Vi}
  			{only available when compiled with GUI enabled}
  	Only in the GUI: If on, an attempt is made to open a pseudo-tty for
  	I/O to/from shell commands.  See |gui-pty|.
--- 3763,3768 ----
***************
*** 3882,3888 ****
  						*'guitablabel'* *'gtl'*
  'guitablabel' 'gtl'	string	(default empty)
  			global
- 			{not in Vi}
  			{only available when compiled with GUI enabled and
  			with the |+windows| feature}
  	When nonempty describes the text to use in a label of the GUI tab
--- 3770,3775 ----
***************
*** 3901,3907 ****
  						*'guitabtooltip'* *'gtt'*
  'guitabtooltip' 'gtt'	string	(default empty)
  			global
- 			{not in Vi}
  			{only available when compiled with GUI enabled and
  			with the |+windows| feature}
  	When nonempty describes the text to use in a tooltip for the GUI tab
--- 3788,3793 ----
***************
*** 3915,3921 ****
  'helpfile' 'hf'		string	(default (MSDOS)  "$VIMRUNTIME\doc\help.txt"
  					 (others) "$VIMRUNTIME/doc/help.txt")
  			global
- 			{not in Vi}
  	Name of the main help file.  All distributed help files should be
  	placed together in one directory.  Additionally, all "doc" directories
  	in 'runtimepath' will be used.
--- 3801,3806 ----
***************
*** 3929,3935 ****
  						*'helpheight'* *'hh'*
  'helpheight' 'hh'	number	(default 20)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+windows|
  			feature}
  	Minimal initial height of the help window when it is opened with the
--- 3814,3819 ----
***************
*** 3943,3949 ****
  			global
  			{only available when compiled with the |+multi_lang|
  			feature}
- 			{not in Vi}
  	Comma separated list of languages.  Vim will use the first language
  	for which the desired help can be found.  The English help will always
  	be used as a last resort.  You can add "en" to prefer English over
--- 3827,3832 ----
***************
*** 3960,3966 ****
  				     *'hidden'* *'hid'* *'nohidden'* *'nohid'*
  'hidden' 'hid'		boolean	(default off)
  			global
- 			{not in Vi}
  	When off a buffer is unloaded when it is |abandon|ed.  When on a
  	buffer becomes hidden when it is |abandon|ed.  If the buffer is still
  	displayed in another window, it does not become hidden, of course.
--- 3843,3848 ----
***************
*** 3980,3996 ****
  				     l:Search,m:MoreMsg,M:ModeMsg,n:LineNr,
  				     N:CursorLineNr,r:Question,s:StatusLine,
  				     S:StatusLineNC,c:VertSplit,t:Title,
! 				     v:Visual,w:WarningMsg,W:WildMenu,f:Folded,
! 				     F:FoldColumn,A:DiffAdd,C:DiffChange,
! 				     D:DiffDelete,T:DiffText,>:SignColumn,
  				     B:SpellBad,P:SpellCap,R:SpellRare,
! 				     L:SpellLocal,-:Conceal,+:Pmenu,=:PmenuSel,
  				     x:PmenuSbar,X:PmenuThumb,*:TabLine,
  				     #:TabLineSel,_:TabLineFill,!:CursorColumn,
  				     .:CursorLine,o:ColorColumn,q:QuickFixLine,
  				     z:StatusLineTerm,Z:StatusLineTermNC")
  			global
- 			{not in Vi}
  	This option can be used to set highlighting mode for various
  	occasions.  It is a comma separated list of character pairs.  The
  	first character in a pair gives the occasion, the second the mode to
--- 3862,3878 ----
  				     l:Search,m:MoreMsg,M:ModeMsg,n:LineNr,
  				     N:CursorLineNr,r:Question,s:StatusLine,
  				     S:StatusLineNC,c:VertSplit,t:Title,
! 				     v:Visual,V:VisualNOS,w:WarningMsg,
! 				     W:WildMenu,f:Folded,F:FoldColumn,
! 				     A:DiffAdd,C:DiffChange,D:DiffDelete,
! 				     T:DiffText,>:SignColumn,-:Conceal,
  				     B:SpellBad,P:SpellCap,R:SpellRare,
! 				     L:SpellLocal,+:Pmenu,=:PmenuSel,
  				     x:PmenuSbar,X:PmenuThumb,*:TabLine,
  				     #:TabLineSel,_:TabLineFill,!:CursorColumn,
  				     .:CursorLine,o:ColorColumn,q:QuickFixLine,
  				     z:StatusLineTerm,Z:StatusLineTermNC")
  			global
  	This option can be used to set highlighting mode for various
  	occasions.  It is a comma separated list of character pairs.  The
  	first character in a pair gives the occasion, the second the mode to
***************
*** 4029,4044 ****
  	|hl-DiffDelete|	 D  deleted line in diff mode
  	|hl-DiffText|	 T  inserted text in diff mode
  	|hl-SignColumn|	 >  column used for |signs|
  	|hl-SpellBad|	 B  misspelled word |spell|
  	|hl-SpellCap|	 P  word that should start with capital |spell|
  	|hl-SpellRare|	 R  rare word |spell|
  	|hl-SpellLocal|	 L  word from other region |spell|
! 	|hl-Conceal|	 -  the placeholders used for concealed characters
! 			    (see 'conceallevel')
! 	|hl-Pmenu|       +  popup menu normal line
! 	|hl-PmenuSel|    =  popup menu normal line
! 	|hl-PmenuSbar|   x  popup menu scrollbar
! 	|hl-PmenuThumb|  X  popup menu scrollbar thumb
  
  	The display modes are:
  		r	reverse		(termcap entry "mr" and "me")
--- 3911,3926 ----
  	|hl-DiffDelete|	 D  deleted line in diff mode
  	|hl-DiffText|	 T  inserted text in diff mode
  	|hl-SignColumn|	 >  column used for |signs|
+ 	|hl-Conceal|	 -  the placeholders used for concealed characters
+ 			    (see 'conceallevel')
  	|hl-SpellBad|	 B  misspelled word |spell|
  	|hl-SpellCap|	 P  word that should start with capital |spell|
  	|hl-SpellRare|	 R  rare word |spell|
  	|hl-SpellLocal|	 L  word from other region |spell|
! 	|hl-Pmenu|	 +  popup menu normal line
! 	|hl-PmenuSel|	 =  popup menu selected line
! 	|hl-PmenuSbar|	 x  popup menu scrollbar
! 	|hl-PmenuThumb|	 X  popup menu scrollbar thumb
  
  	The display modes are:
  		r	reverse		(termcap entry "mr" and "me")
***************
*** 4064,4070 ****
  'history' 'hi'		number	(Vim default: 50, Vi default: 0,
  						 set to 200 in |defaults.vim|)
  			global
- 			{not in Vi}
  	A history of ":" commands, and a history of previous search patterns
  	is remembered.  This option decides how many entries may be stored in
  	each of these histories (see |cmdline-editing|).
--- 3946,3951 ----
***************
*** 4075,4081 ****
  					 *'hkmap'* *'hk'* *'nohkmap'* *'nohk'*
  'hkmap' 'hk'		boolean (default off)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+rightleft|
  			feature}
  	When on, the keyboard is mapped for the Hebrew character set.
--- 3956,3961 ----
***************
*** 4086,4092 ****
  				 *'hkmapp'* *'hkp'* *'nohkmapp'* *'nohkp'*
  'hkmapp' 'hkp'		boolean (default off)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+rightleft|
  			feature}
  	When on, phonetic keyboard mapping is used.  'hkmap' must also be on.
--- 3966,3971 ----
***************
*** 4097,4103 ****
  				 *'hlsearch'* *'hls'* *'nohlsearch'* *'nohls'*
  'hlsearch' 'hls'	boolean	(default off)
  			global
- 			{not in Vi}
  			{not available when compiled without the
  			|+extra_search| feature}
  	When there is a previous search pattern, highlight all its matches.
--- 3976,3981 ----
***************
*** 4122,4128 ****
  						*'icon'* *'noicon'*
  'icon'			boolean	(default off, on when title can be restored)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+title|
  			feature}
  	When on, the icon text of the window will be set to the value of
--- 4000,4005 ----
***************
*** 4141,4147 ****
  						*'iconstring'*
  'iconstring'		string	(default "")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+title|
  			feature}
  	When this option is not empty, it will be used for the icon text of
--- 4018,4023 ----
***************
*** 4168,4176 ****
  						*'imactivatefunc'* *'imaf'*
  'imactivatefunc' 'imaf'	string (default "")
  			global
- 			{not in Vi}
- 			{only available when compiled with the |+multi_byte|
- 			feature}
  	This option specifies a function that will be called to
  	activate or deactivate the Input Method.
  	It is not used in the GUI.
--- 4044,4049 ----
***************
*** 4189,4195 ****
  						*'imactivatekey'* *'imak'*
  'imactivatekey' 'imak'	string (default "")
  			global
- 			{not in Vi}
  			{only available when compiled with |+xim| and
  			|+GUI_GTK|}				*E599*
  	Specifies the key that your Input Method in X-Windows uses for
--- 4062,4067 ----
***************
*** 4221,4229 ****
  				*'imcmdline'* *'imc'* *'noimcmdline'* *'noimc'*
  'imcmdline' 'imc'	boolean (default off)
  			global
- 			{not in Vi}
- 			{only available when compiled with the |+multi_byte|
- 			feature}
  	When set the Input Method is always on when starting to edit a command
  	line, unless entering a search pattern (see 'imsearch' for that).
  	Setting this option is useful when your input method allows entering
--- 4093,4098 ----
***************
*** 4233,4241 ****
  				*'imdisable'* *'imd'* *'noimdisable'* *'noimd'*
  'imdisable' 'imd'	boolean (default off, on for some systems (SGI))
  			global
- 			{not in Vi}
- 			{only available when compiled with the |+multi_byte|
- 			feature}
  	When set the Input Method is never used.  This is useful to disable
  	the IM when it doesn't work properly.
  	Currently this option is on by default for SGI/IRIX machines.  This
--- 4102,4107 ----
***************
*** 4244,4250 ****
  						*'iminsert'* *'imi'*
  'iminsert' 'imi'	number (default 0)
  			local to buffer
- 			{not in Vi}
  	Specifies whether :lmap or an Input Method (IM) is to be used in
  	Insert mode.  Valid values:
  		0	:lmap is off and IM is off
--- 4110,4115 ----
***************
*** 4263,4275 ****
  	methods.  Use 'imdisable' to disable XIM then.
  
  	You can set 'imactivatefunc' and 'imstatusfunc' to handle IME/XIM
! 	via external command if vim is not compiled with the |+xim|,
  	|+multi_byte_ime| or |global-ime|.
  
  						*'imsearch'* *'ims'*
  'imsearch' 'ims'	number (default -1)
  			local to buffer
- 			{not in Vi}
  	Specifies whether :lmap or an Input Method (IM) is to be used when
  	entering a search pattern.  Valid values:
  		-1	the value of 'iminsert' is used, makes it look like
--- 4128,4139 ----
  	methods.  Use 'imdisable' to disable XIM then.
  
  	You can set 'imactivatefunc' and 'imstatusfunc' to handle IME/XIM
! 	via external command if Vim is not compiled with the |+xim|,
  	|+multi_byte_ime| or |global-ime|.
  
  						*'imsearch'* *'ims'*
  'imsearch' 'ims'	number (default -1)
  			local to buffer
  	Specifies whether :lmap or an Input Method (IM) is to be used when
  	entering a search pattern.  Valid values:
  		-1	the value of 'iminsert' is used, makes it look like
***************
*** 4287,4295 ****
  						*'imstatusfunc'* *'imsf'*
  'imstatusfunc' 'imsf'	string (default "")
  			global
- 			{not in Vi}
- 			{only available when compiled with the |+multi_byte|
- 			feature}
  	This option specifies a function that is called to obtain the status
  	of Input Method.  It must return a positive number when IME is active.
  	It is not used in the GUI.
--- 4151,4156 ----
***************
*** 4306,4312 ****
  						*'imstyle'* *'imst'*
  'imstyle' 'imst'	number (default 1)
  			global
- 			{not in Vi}
  			{only available when compiled with |+xim| and
  			|+GUI_GTK|}
  	This option specifies the input style of Input Method:
--- 4167,4172 ----
***************
*** 4323,4329 ****
  						*'include'* *'inc'*
  'include' 'inc'		string	(default "^\s*#\s*include")
  			global or local to buffer |global-local|
- 			{not in Vi}
  			{not available when compiled without the
  			|+find_in_path| feature}
  	Pattern to be used to find an include command.  It is a search
--- 4183,4188 ----
***************
*** 4341,4347 ****
  						*'includeexpr'* *'inex'*
  'includeexpr' 'inex'	string	(default "")
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the
  			|+find_in_path| or |+eval| features}
  	Expression to be used to transform the string found with the 'include'
--- 4200,4205 ----
***************
*** 4363,4376 ****
  'incsearch' 'is'	boolean	(default off, set in |defaults.vim| if the
  						+reltime feature is supported)
  			global
- 			{not in Vi}
  			{not available when compiled without the
  			|+extra_search| features}
  	While typing a search command, show where the pattern, as it was typed
  	so far, matches.  The matched string is highlighted.  If the pattern
  	is invalid or not found, nothing is shown.  The screen will be updated
  	often, this is only useful on fast terminals.
! 	Note that the match will be shown, but the cursor will return to its
  	original position when no match is found and when pressing <Esc>.  You
  	still need to finish the search command with <Enter> to move the
  	cursor to the match.
--- 4221,4244 ----
  'incsearch' 'is'	boolean	(default off, set in |defaults.vim| if the
  						+reltime feature is supported)
  			global
  			{not available when compiled without the
  			|+extra_search| features}
  	While typing a search command, show where the pattern, as it was typed
  	so far, matches.  The matched string is highlighted.  If the pattern
  	is invalid or not found, nothing is shown.  The screen will be updated
  	often, this is only useful on fast terminals.
! 	Also applies to the pattern in commands: >
! 		:global
! 		:lvimgrep
! 		:lvimgrepadd
! 		:smagic
! 		:snomagic
! 		:sort
! 		:substitute
! 		:vglobal
! 		:vimgrep
! 		:vimgrepadd
! <	Note that the match will be shown, but the cursor will return to its
  	original position when no match is found and when pressing <Esc>.  You
  	still need to finish the search command with <Enter> to move the
  	cursor to the match.
***************
*** 4383,4391 ****
  	The highlighting can be set with the 'i' flag in 'highlight'.
  	When 'hlsearch' is on, all matched strings are highlighted too while
  	typing a search command. See also: 'hlsearch'.
! 	If you don't want turn 'hlsearch' on, but want to highlight all matches
! 	while searching, you can turn on and off 'hlsearch' with autocmd.
! 	Example: >
  		augroup vimrc-incsearch-highlight
  		  autocmd!
  		  autocmd CmdlineEnter /,\? :set hlsearch
--- 4251,4259 ----
  	The highlighting can be set with the 'i' flag in 'highlight'.
  	When 'hlsearch' is on, all matched strings are highlighted too while
  	typing a search command. See also: 'hlsearch'.
! 	If you don't want to turn 'hlsearch' on, but want to highlight all
! 	matches while searching, you can turn on and off 'hlsearch' with
! 	autocmd.  Example: >
  		augroup vimrc-incsearch-highlight
  		  autocmd!
  		  autocmd CmdlineEnter /,\? :set hlsearch
***************
*** 4403,4409 ****
  						*'indentexpr'* *'inde'*
  'indentexpr' 'inde'	string	(default "")
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the |+cindent|
  			or |+eval| features}
  	Expression which is evaluated to obtain the proper indent for a line.
--- 4271,4276 ----
***************
*** 4441,4447 ****
  						*'indentkeys'* *'indk'*
  'indentkeys' 'indk'	string	(default "0{,0},0),0],:,0#,!^F,o,O,e")
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the |+cindent|
  			feature}
  	A list of keys that, when typed in Insert mode, cause reindenting of
--- 4308,4313 ----
***************
*** 4452,4458 ****
  			*'infercase'* *'inf'* *'noinfercase'* *'noinf'*
  'infercase' 'inf'	boolean	(default off)
  			local to buffer
- 			{not in Vi}
  	When doing keyword completion in insert mode |ins-completion|, and
  	'ignorecase' is also on, the case of the match is adjusted depending
  	on the typed text.  If the typed text contains a lowercase letter
--- 4318,4323 ----
***************
*** 4465,4471 ****
  			*'insertmode'* *'im'* *'noinsertmode'* *'noim'*
  'insertmode' 'im'	boolean	(default off)
  			global
- 			{not in Vi}
  	Makes Vim work in a way that Insert mode is the default mode.  Useful
  	if you want to use Vim as a modeless editor.  Used for |evim|.
  	These Insert mode commands will be useful:
--- 4330,4335 ----
***************
*** 4498,4504 ****
  			    for OS/390: "@,240-249,/,.,-,_,+,,,#,$,%,~,="
  			    otherwise: "@,48-57,/,.,-,_,+,,,#,$,%,~,=")
  			global
- 			{not in Vi}
  	The characters specified by this option are included in file names and
  	path names.  Filenames are used for commands like "gf", "[i" and in
  	the tags file.  It is also used for "\f" in a |pattern|.
--- 4362,4367 ----
***************
*** 4550,4561 ****
  					   "@,48-57,_,128-167,224-235"
  				otherwise: "@,48-57,_,192-255")
  			global
- 			{not in Vi}
  	The characters given by this option are included in identifiers.
  	Identifiers are used in recognizing environment variables and after a
  	match of the 'define' option.  It is also used for "\i" in a
  	|pattern|.  See 'isfname' for a description of the format of this
! 	option.
  	Careful: If you change this option, it might break expanding
  	environment variables.  E.g., when '/' is included and Vim tries to
  	expand "$HOME/.viminfo".  Maybe you should change 'iskeyword' instead.
--- 4413,4423 ----
  					   "@,48-57,_,128-167,224-235"
  				otherwise: "@,48-57,_,192-255")
  			global
  	The characters given by this option are included in identifiers.
  	Identifiers are used in recognizing environment variables and after a
  	match of the 'define' option.  It is also used for "\i" in a
  	|pattern|.  See 'isfname' for a description of the format of this
! 	option.  For '@' only characters up to 255 are used.
  	Careful: If you change this option, it might break expanding
  	environment variables.  E.g., when '/' is included and Vim tries to
  	expand "$HOME/.viminfo".  Maybe you should change 'iskeyword' instead.
***************
*** 4566,4576 ****
  				   otherwise:  "@,48-57,_,192-255"
  				Vi default: "@,48-57,_")
  			local to buffer
- 			{not in Vi}
  	Keywords are used in searching and recognizing with many commands:
  	"w", "*", "[i", etc.  It is also used for "\k" in a |pattern|.  See
! 	'isfname' for a description of the format of this option.  For C
! 	programs you could use "a-z,A-Z,48-57,_,.,-,>".
  	For a help file it is set to all non-blank printable characters except
  	'*', '"' and '|' (so that CTRL-] on a command finds the help for that
  	command).
--- 4428,4438 ----
  				   otherwise:  "@,48-57,_,192-255"
  				Vi default: "@,48-57,_")
  			local to buffer
  	Keywords are used in searching and recognizing with many commands:
  	"w", "*", "[i", etc.  It is also used for "\k" in a |pattern|.  See
! 	'isfname' for a description of the format of this option.  For '@'
! 	characters above 255 check the "word" character class.
! 	For C programs you could use "a-z,A-Z,48-57,_,.,-,>".
  	For a help file it is set to all non-blank printable characters except
  	'*', '"' and '|' (so that CTRL-] on a command finds the help for that
  	command).
***************
*** 4584,4590 ****
  'isprint' 'isp'	string	(default for MS-DOS, Win32, OS/2 and Macintosh:
  				"@,~-255"; otherwise: "@,161-255")
  			global
- 			{not in Vi}
  	The characters given by this option are displayed directly on the
  	screen.  It is also used for "\p" in a |pattern|.  The characters from
  	space (ASCII 32) to '~' (ASCII 126) are always displayed directly,
--- 4446,4451 ----
***************
*** 4615,4621 ****
  			*'joinspaces'* *'js'* *'nojoinspaces'* *'nojs'*
  'joinspaces' 'js'	boolean	(default on)
  			global
- 			{not in Vi}
  	Insert two spaces after a '.', '?' and '!' with a join command.
  	When 'cpoptions' includes the 'j' flag, only do this after a '.'.
  	Otherwise only one space is inserted.
--- 4476,4481 ----
***************
*** 4624,4630 ****
  							*'key'*
  'key'			string	(default "")
  			local to buffer
- 			{not in Vi}
  			{only available when compiled with the |+cryptv|
  			feature}
  	The key that is used for encrypting and decrypting the current buffer.
--- 4484,4489 ----
***************
*** 4642,4648 ****
  					*'keymap'* *'kmp'* *E544*
  'keymap' 'kmp'		string	(default "")
  			local to buffer
- 			{not in Vi}
  			{only available when compiled with the |+keymap|
  			feature}
  	Name of a keyboard mapping.  See |mbyte-keymap|.
--- 4501,4506 ----
***************
*** 4654,4660 ****
  					*'keymodel'* *'km'*
  'keymodel' 'km'		string	(default "")
  			global
- 			{not in Vi}
  	List of comma separated words, which enable special things that keys
  	can do.  These values can be used:
  	   startsel	Using a shifted special key starts selection (either
--- 4512,4517 ----
***************
*** 4669,4675 ****
  'keywordprg' 'kp'	string	(default "man" or "man -s",  DOS: ":help",
  								  VMS: "help")
  			global or local to buffer |global-local|
- 			{not in Vi}
  	Program to use for the |K| command.  Environment variables are
  	expanded |:set_env|.  ":help" may be used to access the Vim internal
  	help.  (Note that previously setting the global option to the empty
--- 4526,4531 ----
***************
*** 4688,4694 ****
  					*'langmap'* *'lmap'* *E357* *E358*
  'langmap' 'lmap'	string	(default "")
  			global
- 			{not in Vi}
  			{only available when compiled with the |+langmap|
  			feature}
  	This option allows switching your keyboard into a special language
--- 4544,4549 ----
***************
*** 4734,4740 ****
  					*'langmenu'* *'lm'*
  'langmenu' 'lm'		string	(default "")
  			global
- 			{not in Vi}
  			{only available when compiled with the |+menu| and
  			|+multi_lang| features}
  	Language to use for menu translation.  Tells which file is loaded
--- 4589,4594 ----
***************
*** 4759,4765 ****
  			*'langnoremap'* *'lnr'* *'nolangnoremap'* *'nolnr'*
  'langnoremap' 'lnr'	boolean (default off, set in |defaults.vim|)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+langmap|
  			feature}
  	This is just like 'langremap' but with the value inverted.  It only
--- 4613,4618 ----
***************
*** 4769,4775 ****
  			*'langremap'* *'lrm'* *'nolangremap'* *'nolrm'*
  'langremap' 'lrm'	boolean (default on, reset in |defaults.vim|)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+langmap|
  			feature}
  	When off, setting 'langmap' does not apply to characters resulting from
--- 4622,4627 ----
***************
*** 4781,4787 ****
  					*'laststatus'* *'ls'*
  'laststatus' 'ls'	number	(default 1)
  			global
- 			{not in Vi}
  	The value of this option influences when the last window will have a
  	status line:
  		0: never
--- 4633,4638 ----
***************
*** 4793,4799 ****
  			*'lazyredraw'* *'lz'* *'nolazyredraw'* *'nolz'*
  'lazyredraw' 'lz'	boolean	(default off)
  			global
- 			{not in Vi}
  	When this option is set, the screen will not be redrawn while
  	executing macros, registers and other commands that have not been
  	typed.  Also, updating the window title is postponed.  To force an
--- 4644,4649 ----
***************
*** 4802,4808 ****
  			*'linebreak'* *'lbr'* *'nolinebreak'* *'nolbr'*
  'linebreak' 'lbr'	boolean	(default off)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+linebreak|
  			feature}
  	If on, Vim will wrap long lines at a character in 'breakat' rather
--- 4652,4657 ----
***************
*** 4835,4841 ****
  						*'linespace'* *'lsp'*
  'linespace' 'lsp'	number	(default 0, 1 for Win32 GUI)
  			global
- 			{not in Vi}
  			{only in the GUI}
  	Number of pixel lines inserted between characters.  Useful if the font
  	uses the full character cell height, making lines touch each other.
--- 4684,4689 ----
***************
*** 4864,4870 ****
  						*'lispwords'* *'lw'*
  'lispwords' 'lw'	string	(default is very long)
  			global or local to buffer |global-local|
- 			{not in Vi}
  			{not available when compiled without the |+lispindent|
  			feature}
  	Comma separated list of words that influence the Lisp indenting.
--- 4712,4717 ----
***************
*** 4889,4895 ****
  						*'listchars'* *'lcs'*
  'listchars' 'lcs'	string	(default "eol:$")
  			global
- 			{not in Vi}
  	Strings to use in 'list' mode and for the |:list| command.  It is a
  	comma separated list of string settings.
  							*lcs-eol*
--- 4736,4741 ----
***************
*** 4955,4961 ****
  			*'lpl'* *'nolpl'* *'loadplugins'* *'noloadplugins'*
  'loadplugins' 'lpl'	boolean	(default on)
  			global
- 			{not in Vi}
  	When on the plugin scripts are loaded when starting up |load-plugins|.
  	This option can be reset in your |vimrc| file to disable the loading
  	of plugins.
--- 4801,4806 ----
***************
*** 4965,4971 ****
  						*'luadll'*
  'luadll'		string	(default depends on the build)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+lua/dyn|
  			feature}
  	Specifies the name of the Lua shared library. The default is
--- 4810,4815 ----
***************
*** 5004,5010 ****
  						*'makeef'* *'mef'*
  'makeef' 'mef'		string	(default: "")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+quickfix|
  			feature}
  	Name of the errorfile for the |:make| command (see |:make_makeprg|)
--- 4848,4853 ----
***************
*** 5022,5030 ****
  					*'makeencoding'* *'menc'*
  'makeencoding' 'menc'	string	(default "")
  			global or local to buffer |global-local|
- 			{only available when compiled with the |+multi_byte|
- 			feature}
- 			{not in Vi}
  	Encoding used for reading the output of external commands.  When empty,
  	encoding is not converted.
  	This is used for `:make`, `:lmake`, `:grep`, `:lgrep`, `:grepadd`,
--- 4865,4870 ----
***************
*** 5041,5047 ****
  						*'makeprg'* *'mp'*
  'makeprg' 'mp'		string	(default "make", VMS: "MMS")
  			global or local to buffer |global-local|
- 			{not in Vi}
  	Program to use for the ":make" command.  See |:make_makeprg|.
  	This option may contain '%' and '#' characters (see  |:_%| and |:_#|),
  	which are expanded to the current and alternate file name.  Use |::S|
--- 4881,4886 ----
***************
*** 5061,5067 ****
  						*'matchpairs'* *'mps'*
  'matchpairs' 'mps'	string	(default "(:),{:},[:]")
  			local to buffer
- 			{not in Vi}
  	Characters that form pairs.  The |%| command jumps from one to the
  	other.
  	Only character pairs are allowed that are different, thus you cannot
--- 4900,4905 ----
***************
*** 5081,5087 ****
  						*'matchtime'* *'mat'*
  'matchtime' 'mat'	number	(default 5)
  			global
! 			{not in Vi}{in Nvi}
  	Tenths of a second to show the matching paren, when 'showmatch' is
  	set.  Note that this is not in milliseconds, like other options that
  	set a time.  This is to be compatible with Nvi.
--- 4919,4925 ----
  						*'matchtime'* *'mat'*
  'matchtime' 'mat'	number	(default 5)
  			global
! 			{in Nvi}
  	Tenths of a second to show the matching paren, when 'showmatch' is
  	set.  Note that this is not in milliseconds, like other options that
  	set a time.  This is to be compatible with Nvi.
***************
*** 5089,5097 ****
  						*'maxcombine'* *'mco'*
  'maxcombine' 'mco'	number (default 2)
  			global
- 			{not in Vi}
- 			{only available when compiled with the |+multi_byte|
- 			feature}
  	The maximum number of combining characters supported for displaying.
  	Only used when 'encoding' is "utf-8".
  	The default is OK for most languages.  Hebrew may require 4.
--- 4927,4932 ----
***************
*** 5103,5109 ****
  						*'maxfuncdepth'* *'mfd'*
  'maxfuncdepth' 'mfd'	number	(default 100)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+eval|
  			feature}
  	Maximum depth of function calls for user functions.  This normally
--- 4938,4943 ----
***************
*** 5117,5123 ****
  						*'maxmapdepth'* *'mmd'* *E223*
  'maxmapdepth' 'mmd'	number	(default 1000)
  			global
- 			{not in Vi}
  	Maximum number of times a mapping is done without resulting in a
  	character to be used.  This normally catches endless mappings, like
  	":map x y" with ":map y x".  It still does not catch ":map g wg",
--- 4951,4956 ----
***************
*** 5129,5135 ****
  				 dependent) or half the amount of memory
  				 available)
  			global
- 			{not in Vi}
  	Maximum amount of memory (in Kbyte) to use for one buffer.  When this
  	limit is reached allocating extra memory for a buffer will cause
  	other memory to be freed.
--- 4962,4967 ----
***************
*** 5141,5147 ****
  						*'maxmempattern'* *'mmp'*
  'maxmempattern' 'mmp'	number	(default 1000)
  			global
- 			{not in Vi}
  	Maximum amount of memory (in Kbyte) to use for pattern matching.
  	The maximum value is about 2000000.  Use this to work without a limit.
  							*E363*
--- 4973,4978 ----
***************
*** 5150,5163 ****
  	Running into the limit often means that the pattern is very
  	inefficient or too complex.  This may already happen with the pattern
  	"\(.\)*" on a very long line.  ".*" works much better.
! 	Vim may run out of memory before hitting the 'maxmempattern' limit.
  
  						*'maxmemtot'* *'mmt'*
  'maxmemtot' 'mmt'	number	(default between 2048 and 10240 (system
  				 dependent) or half the amount of memory
  				 available)
  			global
- 			{not in Vi}
  	Maximum amount of memory in Kbyte to use for all buffers together.
  	The maximum usable value is about 2000000 (2 Gbyte).  Use this to work
  	without a limit.
--- 4981,4996 ----
  	Running into the limit often means that the pattern is very
  	inefficient or too complex.  This may already happen with the pattern
  	"\(.\)*" on a very long line.  ".*" works much better.
! 	Might also happen on redraw, when syntax rules try to match a complex
! 	text structure.
! 	Vim may run out of memory before hitting the 'maxmempattern' limit, in
! 	which case you get an "Out of memory" error instead.
  
  						*'maxmemtot'* *'mmt'*
  'maxmemtot' 'mmt'	number	(default between 2048 and 10240 (system
  				 dependent) or half the amount of memory
  				 available)
  			global
  	Maximum amount of memory in Kbyte to use for all buffers together.
  	The maximum usable value is about 2000000 (2 Gbyte).  Use this to work
  	without a limit.
***************
*** 5172,5178 ****
  						*'menuitems'* *'mis'*
  'menuitems' 'mis'	number	(default 25)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+menu|
  			feature}
  	Maximum number of items to use in a menu.  Used for menus that are
--- 5005,5010 ----
***************
*** 5182,5188 ****
  						*'mkspellmem'* *'msm'*
  'mkspellmem' 'msm'	string	(default "460000,2000,500")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+syntax|
  			feature}
  	Parameters for |:mkspell|.  This tunes when to start compressing the
--- 5014,5019 ----
***************
*** 5225,5231 ****
  						*'modelines'* *'mls'*
  'modelines' 'mls'	number	(default 5)
  			global
- 			{not in Vi}
  	If 'modeline' is on 'modelines' gives the number of lines that is
  	checked for set commands.  If 'modeline' is off or 'modelines' is zero
  	no lines are checked.  See |modeline|.
--- 5056,5061 ----
***************
*** 5235,5241 ****
  				*'modifiable'* *'ma'* *'nomodifiable'* *'noma'*
  'modifiable' 'ma'	boolean	(default on)
  			local to buffer
! 			{not in Vi}		*E21*
  	When off the buffer contents cannot be changed.  The 'fileformat' and
  	'fileencoding' options also can't be changed.
  	Can be reset on startup with the |-M| command line argument.
--- 5065,5071 ----
  				*'modifiable'* *'ma'* *'nomodifiable'* *'noma'*
  'modifiable' 'ma'	boolean	(default on)
  			local to buffer
! 			*E21*
  	When off the buffer contents cannot be changed.  The 'fileformat' and
  	'fileencoding' options also can't be changed.
  	Can be reset on startup with the |-M| command line argument.
***************
*** 5243,5249 ****
  				*'modified'* *'mod'* *'nomodified'* *'nomod'*
  'modified' 'mod'	boolean	(default off)
  			local to buffer
- 			{not in Vi}
  	When on, the buffer is considered to be modified.  This option is set
  	when:
  	1. A change was made to the text since it was last written.  Using the
--- 5073,5078 ----
***************
*** 5269,5275 ****
  						*'more'* *'nomore'*
  'more'			boolean	(Vim default: on, Vi default: off)
  			global
- 			{not in Vi}
  	When on, listings pause when the whole screen is filled.  You will get
  	the |more-prompt|.  When this option is off there are no pauses, the
  	listing continues until finished.
--- 5098,5103 ----
***************
*** 5280,5286 ****
  'mouse'			string	(default "", "a" for GUI, MS-DOS and Win32,
  						 set to "a" in |defaults.vim|)
  			global
- 			{not in Vi}
  	Enable the use of the mouse.  Only works for certain terminals
  	(xterm, MS-DOS, Win32 |win32-mouse|, QNX pterm, *BSD console with
  	sysmouse and Linux console with gpm).  For using the mouse in the
--- 5108,5113 ----
***************
*** 5293,5299 ****
  		h	all previous modes when editing a help file
  		a	all previous modes
  		r	for |hit-enter| and |more-prompt| prompt
! 	Normally you would enable the mouse in all four modes with: >
  		:set mouse=a
  <	When the mouse is not enabled, the GUI will still use the mouse for
  	modeless selection.  This doesn't move the text cursor.
--- 5120,5126 ----
  		h	all previous modes when editing a help file
  		a	all previous modes
  		r	for |hit-enter| and |more-prompt| prompt
! 	Normally you would enable the mouse in all five modes with: >
  		:set mouse=a
  <	When the mouse is not enabled, the GUI will still use the mouse for
  	modeless selection.  This doesn't move the text cursor.
***************
*** 5308,5314 ****
  			*'mousefocus'* *'mousef'* *'nomousefocus'* *'nomousef'*
  'mousefocus' 'mousef'	boolean	(default off)
  			global
- 			{not in Vi}
  			{only works in the GUI}
  	The window that the mouse pointer is on is automatically activated.
  	When changing the window layout or window focus in another way, the
--- 5135,5140 ----
***************
*** 5319,5325 ****
  			*'mousehide'* *'mh'* *'nomousehide'* *'nomh'*
  'mousehide' 'mh'	boolean	(default on)
  			global
- 			{not in Vi}
  			{only works in the GUI}
  	When on, the mouse pointer is hidden when characters are typed.
  	The mouse pointer is restored when the mouse is moved.
--- 5145,5150 ----
***************
*** 5327,5333 ****
  						*'mousemodel'* *'mousem'*
  'mousemodel' 'mousem'	string	(default "extend", "popup" for MS-DOS and Win32)
  			global
- 			{not in Vi}
  	Sets the model to use for the mouse.  The name mostly specifies what
  	the right mouse button is used for:
  	   extend	Right mouse button extends a selection.  This works
--- 5152,5157 ----
***************
*** 5363,5372 ****
  	The 'mousemodel' option is set by the |:behave| command.
  
  					*'mouseshape'* *'mouses'* *E547*
! 'mouseshape' 'mouses'	string	(default "i:beam,r:beam,s:updown,sd:cross,
! 					m:no,ml:up-arrow,v:rightup-arrow")
  			global
- 			{not in Vi}
  			{only available when compiled with the |+mouseshape|
  			feature}
  	This option tells Vim what the mouse pointer should look like in
--- 5187,5196 ----
  	The 'mousemodel' option is set by the |:behave| command.
  
  					*'mouseshape'* *'mouses'* *E547*
! 'mouseshape' 'mouses'	string	(default "i-r:beam,s:updown,sd:udsizing,
! 					vs:leftright,vd:lrsizing,m:no,
! 					ml:up-arrow,v:rightup-arrow")
  			global
  			{only available when compiled with the |+mouseshape|
  			feature}
  	This option tells Vim what the mouse pointer should look like in
***************
*** 5431,5437 ****
  						*'mousetime'* *'mouset'*
  'mousetime' 'mouset'	number	(default 500)
  			global
- 			{not in Vi}
  	Only for GUI, MS-DOS, Win32 and Unix with xterm.  Defines the maximum
  	time in msec between two mouse clicks for the second click to be
  	recognized as a multi click.
--- 5255,5260 ----
***************
*** 5439,5445 ****
  						*'mzschemedll'*
  'mzschemedll'		string	(default depends on the build)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+mzscheme/dyn|
  			feature}
  	Specifies the name of the MzScheme shared library. The default is
--- 5262,5267 ----
***************
*** 5453,5459 ****
  						*'mzschemegcdll'*
  'mzschemegcdll'		string	(default depends on the build)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+mzscheme/dyn|
  			feature}
  	Specifies the name of the MzScheme GC shared library. The default is
--- 5275,5280 ----
***************
*** 5466,5472 ****
  						    *'mzquantum'* *'mzq'*
  'mzquantum' 'mzq'	number	(default 100)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+mzscheme|
  			feature}
  	The number of milliseconds between polls for MzScheme threads.
--- 5287,5292 ----
***************
*** 5478,5484 ****
  'nrformats' 'nf'	string	(default "bin,octal,hex",
  					   set to "bin,hex" in |defaults.vim|)
  			local to buffer
- 			{not in Vi}
  	This defines what bases Vim will consider for numbers when using the
  	CTRL-A and CTRL-X commands for adding to and subtracting from a number
  	respectively; see |CTRL-A| for more info on these commands.
--- 5298,5303 ----
***************
*** 5525,5531 ****
  						*'numberwidth'* *'nuw'*
  'numberwidth' 'nuw'	number	(Vim default: 4  Vi default: 8)
  			local to window
- 			{not in Vi}
  			{only available when compiled with the |+linebreak|
  			feature}
  	Minimal number of columns to use for the line number.  Only relevant
--- 5344,5349 ----
***************
*** 5544,5550 ****
  						*'omnifunc'* *'ofu'*
  'omnifunc' 'ofu'	string	(default: empty)
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the |+eval|
  			or |+insert_expand| features}
  	This option specifies a function to be used for Insert mode omni
--- 5362,5367 ----
***************
*** 5560,5566 ****
  			    *'opendevice'* *'odev'* *'noopendevice'* *'noodev'*
  'opendevice' 'odev'	boolean	(default off)
  			global
- 			{not in Vi}
  			{only for MS-DOS, MS-Windows and OS/2}
  	Enable reading and writing from devices.  This may get Vim stuck on a
  	device that can be opened but doesn't actually do the I/O.  Therefore
--- 5377,5382 ----
***************
*** 5572,5578 ****
  						*'operatorfunc'* *'opfunc'*
  'operatorfunc' 'opfunc'	string	(default: empty)
  			global
- 			{not in Vi}
  	This option specifies a function to be called by the |g@| operator.
  	See |:map-operator| for more info and an example.
  
--- 5388,5393 ----
***************
*** 5583,5595 ****
  					*'osfiletype'* *'oft'*
  'osfiletype' 'oft'	string (default: "")
  			local to buffer
- 			{not in Vi}
  	This option was supported on RISC OS, which has been removed.
  
  
  				*'packpath'* *'pp'*
  'packpath' 'pp'		string	(default: see 'runtimepath')
- 			{not in Vi}
  	Directories used to find packages.  See |packages|.
  
  
--- 5398,5408 ----
***************
*** 5602,5608 ****
  						*'paste'* *'nopaste'*
  'paste'			boolean	(default off)
  			global
- 			{not in Vi}
  	Put Vim in Paste mode.  This is useful if you want to cut or copy
  	some text from one window and paste it in Vim.  This will avoid
  	unexpected effects.
--- 5415,5420 ----
***************
*** 5646,5652 ****
  						*'pastetoggle'* *'pt'*
  'pastetoggle' 'pt'	string	(default "")
  			global
- 			{not in Vi}
  	When non-empty, specifies the key sequence that toggles the 'paste'
  	option.  This is like specifying a mapping: >
  	    :map {keys} :set invpaste<CR>
--- 5458,5463 ----
***************
*** 5671,5677 ****
  						*'pex'* *'patchexpr'*
  'patchexpr' 'pex'	string	(default "")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+diff|
  			feature}
  	Expression which is evaluated to apply a patch to a file and generate
--- 5482,5487 ----
***************
*** 5680,5686 ****
  					*'patchmode'* *'pm'* *E205* *E206*
  'patchmode' 'pm'	string	(default "")
  			global
- 			{not in Vi}
  	When non-empty the oldest version of a file is kept.  This can be used
  	to keep the original version of a file if you are changing files in a
  	source distribution.  Only the first time that a file is written a
--- 5490,5495 ----
***************
*** 5703,5709 ****
  				   on OS/2:	  ".,/emx/include,,"
  				   other systems: ".,,")
  			global or local to buffer |global-local|
- 			{not in Vi}
  	This is a list of directories which will be searched when using the
  	|gf|, [f, ]f, ^Wf, |:find|, |:sfind|, |:tabfind| and other commands,
  	provided that the file being searched for has a relative path (not
--- 5512,5517 ----
***************
*** 5756,5762 ****
  						*'perldll'*
  'perldll'		string	(default depends on the build)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+perl/dyn|
  			feature}
  	Specifies the name of the Perl shared library. The default is
--- 5564,5569 ----
***************
*** 5768,5774 ****
  			*'preserveindent'* *'pi'* *'nopreserveindent'* *'nopi'*
  'preserveindent' 'pi'	boolean	(default off)
  			local to buffer
- 			{not in Vi}
  	When changing the indent of the current line, preserve as much of the
  	indent structure as possible.  Normally the indent is replaced by a
  	series of tabs followed by spaces as required (unless |'expandtab'| is
--- 5575,5580 ----
***************
*** 5786,5792 ****
  					*'previewheight'* *'pvh'*
  'previewheight' 'pvh'	number (default 12)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+windows| or
  			|+quickfix| features}
  	Default height for a preview window.  Used for |:ptag| and associated
--- 5592,5597 ----
***************
*** 5796,5802 ****
  					*'pvw'* *'nopvw'* *E590*
  'previewwindow' 'pvw'	boolean (default off)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+windows| or
  			|+quickfix| features}
  	Identifies the preview window.  Only one window can have this option
--- 5601,5606 ----
***************
*** 5806,5812 ****
  						*'printdevice'* *'pdev'*
  'printdevice' 'pdev'	string	(default empty)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+printer|
  			feature}
  	The name of the printer to be used for |:hardcopy|.
--- 5610,5615 ----
***************
*** 5815,5832 ****
  	security reasons.
  
  						*'printencoding'* *'penc'*
! 'printencoding' 'penc'	String	(default empty, except for some systems)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+printer|
  			and |+postscript| features}
  	Sets the character encoding used when printing.
  	See |penc-option|.
  
  						*'printexpr'* *'pexpr'*
! 'printexpr' 'pexpr'	String	(default: see below)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+printer|
  			and |+postscript| features}
  	Expression used to print the PostScript produced with |:hardcopy|.
--- 5618,5633 ----
  	security reasons.
  
  						*'printencoding'* *'penc'*
! 'printencoding' 'penc'	string	(default empty, except for some systems)
  			global
  			{only available when compiled with the |+printer|
  			and |+postscript| features}
  	Sets the character encoding used when printing.
  	See |penc-option|.
  
  						*'printexpr'* *'pexpr'*
! 'printexpr' 'pexpr'	string	(default: see below)
  			global
  			{only available when compiled with the |+printer|
  			and |+postscript| features}
  	Expression used to print the PostScript produced with |:hardcopy|.
***************
*** 5837,5843 ****
  						*'printfont'* *'pfn'*
  'printfont' 'pfn'	string	(default "courier")
  			global
- 			{not in Vi}
  			{only available when compiled with the |+printer|
  			feature}
  	The name of the font that will be used for |:hardcopy|.
--- 5638,5643 ----
***************
*** 5846,5852 ****
  						*'printheader'* *'pheader'*
  'printheader' 'pheader'  string  (default "%<%f%h%m%=Page %N")
  			global
- 			{not in Vi}
  			{only available when compiled with the |+printer|
  			feature}
  	The format of the header produced in |:hardcopy| output.
--- 5646,5651 ----
***************
*** 5855,5879 ****
  						*'printmbcharset'* *'pmbcs'*
  'printmbcharset' 'pmbcs'  string (default "")
  			global
! 			{not in Vi}
! 			{only available when compiled with the |+printer|,
! 			|+postscript| and |+multi_byte| features}
  	The CJK character set to be used for CJK output from |:hardcopy|.
  	See |pmbcs-option|.
  
  						*'printmbfont'* *'pmbfn'*
  'printmbfont' 'pmbfn'	string (default "")
  			global
! 			{not in Vi}
! 			{only available when compiled with the |+printer|,
! 			|+postscript| and |+multi_byte| features}
  	List of font names to be used for CJK output from |:hardcopy|.
  	See |pmbfn-option|.
  
  						*'printoptions'* *'popt'*
  'printoptions' 'popt' string (default "")
  			global
- 			{not in Vi}
  			{only available when compiled with |+printer| feature}
  	List of items that control the format of the output of |:hardcopy|.
  	See |popt-option|.
--- 5654,5675 ----
  						*'printmbcharset'* *'pmbcs'*
  'printmbcharset' 'pmbcs'  string (default "")
  			global
! 			{only available when compiled with the |+printer|
! 			and |+postscript| features}
  	The CJK character set to be used for CJK output from |:hardcopy|.
  	See |pmbcs-option|.
  
  						*'printmbfont'* *'pmbfn'*
  'printmbfont' 'pmbfn'	string (default "")
  			global
! 			{only available when compiled with the |+printer|
! 			and |+postscript| features}
  	List of font names to be used for CJK output from |:hardcopy|.
  	See |pmbfn-option|.
  
  						*'printoptions'* *'popt'*
  'printoptions' 'popt' string (default "")
  			global
  			{only available when compiled with |+printer| feature}
  	List of items that control the format of the output of |:hardcopy|.
  	See |popt-option|.
***************
*** 5888,5894 ****
  			global
  			{not available when compiled without the
  			|+insert_expand| feature}
- 			{not in Vi}
  	Determines the maximum number of items to show in the popup menu for
  	Insert mode completion.  When zero as much space as available is used.
  	|ins-completion-menu|.
--- 5684,5689 ----
***************
*** 5898,5911 ****
  			global
  			{not available when compiled without the
  			|+insert_expand| feature}
- 			{not in Vi}
  	Determines the minimum width to use for the popup menu for Insert mode
  	completion.  |ins-completion-menu|.
  
  						*'pythondll'*
  'pythondll'		string	(default depends on the build)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+python/dyn|
  			feature}
  	Specifies the name of the Python 2.x shared library. The default is
--- 5693,5704 ----
***************
*** 5917,5923 ****
  						*'pythonhome'*
  'pythonhome'		string	(default "")
  			global
- 			{not in Vi}
  			{only available when compiled with the |+python/dyn|
  			feature}
  	Specifies the name of the Python 2.x home directory. When 'pythonhome'
--- 5710,5715 ----
***************
*** 5931,5937 ****
  						*'pythonthreedll'*
  'pythonthreedll'	string	(default depends on the build)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+python3/dyn|
  			feature}
  	Specifies the name of the Python 3 shared library. The default is
--- 5723,5728 ----
***************
*** 5943,5949 ****
  						*'pythonthreehome'*
  'pythonthreehome'	string	(default "")
  			global
- 			{not in Vi}
  			{only available when compiled with the |+python3/dyn|
  			feature}
  	Specifies the name of the Python 3 home directory. When
--- 5734,5739 ----
***************
*** 5957,5963 ****
  						*'pyxversion'* *'pyx'*
  'pyxversion' 'pyx'	number	(default depends on the build)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+python| or
  			the |+python3| feature}
  	Specifies the python version used for pyx* functions and commands
--- 5747,5752 ----
***************
*** 5985,5991 ****
  						*'quoteescape'* *'qe'*
  'quoteescape' 'qe'	string	(default "\")
  			local to buffer
- 			{not in Vi}
  	The characters that are used to escape quotes in a string.  Used for
  	objects like a', a" and a` |a'|.
  	When one of the characters in this option is found inside a string,
--- 5774,5779 ----
***************
*** 6000,6013 ****
  	in read-only mode ("vim -R") or when the executable is called "view".
  	When using ":w!" the 'readonly' option is reset for the current
  	buffer, unless the 'Z' flag is in 'cpoptions'.
! 	{not in Vi:}  When using the ":view" command the 'readonly' option is
! 	set for the newly edited buffer.
  	See 'modifiable' for disallowing changes to the buffer.
  
  						*'redrawtime'* *'rdt'*
  'redrawtime' 'rdt'	number	(default 2000)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+reltime|
  			feature}
  	The time in milliseconds for redrawing the display.  This applies to
--- 5788,5800 ----
  	in read-only mode ("vim -R") or when the executable is called "view".
  	When using ":w!" the 'readonly' option is reset for the current
  	buffer, unless the 'Z' flag is in 'cpoptions'.
! 	When using the ":view" command the 'readonly' option is set for the
! 	newly edited buffer.
  	See 'modifiable' for disallowing changes to the buffer.
  
  						*'redrawtime'* *'rdt'*
  'redrawtime' 'rdt'	number	(default 2000)
  			global
  			{only available when compiled with the |+reltime|
  			feature}
  	The time in milliseconds for redrawing the display.  This applies to
***************
*** 6023,6029 ****
  						*'regexpengine'* *'re'*
  'regexpengine' 're'	number	(default 0)
  			global
- 			{not in Vi}
  	This selects the default regexp engine. |two-engines|
  	The possible values are:
  		0	automatic selection
--- 5810,5815 ----
***************
*** 6040,6046 ****
  		*'relativenumber'* *'rnu'* *'norelativenumber'* *'nornu'*
  'relativenumber' 'rnu'	boolean	(default off)
  			local to window
- 			{not in Vi}
  	Show the line number relative to the line with the cursor in front of
  	each line. Relative line numbers help you use the |count| you can
  	precede some vertical motion commands (e.g. j k + -) with, without
--- 5826,5831 ----
***************
*** 6072,6078 ****
                                                 *'renderoptions'* *'rop'*
  'renderoptions' 'rop'	string  (default: empty)
  			global
- 			{not in Vi}
  			{only available when compiled with GUI and DIRECTX on
  			MS-Windows}
  	Select a text renderer and set its options.  The options depend on the
--- 5857,5862 ----
***************
*** 6179,6185 ****
  			 *'restorescreen'* *'rs'* *'norestorescreen'* *'nors'*
  'restorescreen' 'rs'	boolean	(default on)
  			global
! 			{not in Vi}  {only in Windows 95/NT console version}
  	When set, the screen contents is restored when exiting Vim.  This also
  	happens when executing external commands.
  
--- 5963,5969 ----
  			 *'restorescreen'* *'rs'* *'norestorescreen'* *'nors'*
  'restorescreen' 'rs'	boolean	(default on)
  			global
! 			{only in Windows 95/NT console version}
  	When set, the screen contents is restored when exiting Vim.  This also
  	happens when executing external commands.
  
***************
*** 6193,6199 ****
  				*'revins'* *'ri'* *'norevins'* *'nori'*
  'revins' 'ri'		boolean	(default off)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+rightleft|
  			feature}
  	Inserting characters in Insert mode will work backwards.  See "typing
--- 5977,5982 ----
***************
*** 6206,6212 ****
  				 *'rightleft'* *'rl'* *'norightleft'* *'norl'*
  'rightleft' 'rl'	boolean	(default off)
  			local to window
- 			{not in Vi}
  			{only available when compiled with the |+rightleft|
  			feature}
  	When on, display orientation becomes right-to-left, i.e., characters
--- 5989,5994 ----
***************
*** 6222,6228 ****
  			*'rightleftcmd'* *'rlc'*
  'rightleftcmd' 'rlc'	string	(default "search")
  			local to window
- 			{not in Vi}
  			{only available when compiled with the |+rightleft|
  			feature}
  	Each word in this option enables the command line editing to work in
--- 6004,6009 ----
***************
*** 6236,6242 ****
  						*'rubydll'*
  'rubydll'		string	(default: depends on the build)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+ruby/dyn|
  			feature}
  	Specifies the name of the Ruby shared library. The default is
--- 6017,6022 ----
***************
*** 6248,6254 ****
  					 *'ruler'* *'ru'* *'noruler'* *'noru'*
  'ruler' 'ru'		boolean	(default off, set in |defaults.vim|)
  			global
- 			{not in Vi}
  			{not available when compiled without the
  			|+cmdline_info| feature}
  	Show the line and column number of the cursor position, separated by a
--- 6028,6033 ----
***************
*** 6278,6284 ****
  						*'rulerformat'* *'ruf'*
  'rulerformat' 'ruf'	string	(default empty)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+statusline|
  			feature}
  	When this option is not empty, it determines the content of the ruler
--- 6057,6062 ----
***************
*** 6318,6324 ****
  						$VIM/vimfiles/after,
  						sys$login:vimfiles/after")
  			global
- 			{not in Vi}
  	This is a list of directories which will be searched for runtime
  	files:
  	  filetype.vim	filetypes by file name |new-filetype|
--- 6096,6101 ----
***************
*** 6393,6399 ****
  			*'scrollbind'* *'scb'* *'noscrollbind'* *'noscb'*
  'scrollbind' 'scb'	boolean  (default off)
  			local to window
- 			{not in Vi}
  	See also |scroll-binding|.  When this option is set, the current
  	window scrolls as other scrollbind windows (windows that also have
  	this option set) scroll.  This option is useful for viewing the
--- 6170,6175 ----
***************
*** 6407,6413 ****
  						*'scrolljump'* *'sj'*
  'scrolljump' 'sj'	number	(default 1)
  			global
- 			{not in Vi}
  	Minimal number of lines to scroll when the cursor gets off the
  	screen (e.g., with "j").  Not used for scroll commands (e.g., CTRL-E,
  	CTRL-D).  Useful if your terminal scrolls very slowly.
--- 6183,6188 ----
***************
*** 6419,6425 ****
  						*'scrolloff'* *'so'*
  'scrolloff' 'so'	number	(default 0, set to 5 in |defaults.vim|)
  			global or local to window |global-local|
- 			{not in Vi}
  	Minimal number of screen lines to keep above and below the cursor.
  	This will make some context visible around where you are working.  If
  	you set it to a very large value (999) the cursor line will always be
--- 6194,6199 ----
***************
*** 6435,6441 ****
  						*'scrollopt'* *'sbo'*
  'scrollopt' 'sbo'	string	(default "ver,jump")
  			global
- 			{not in Vi}
  	This is a comma-separated list of words that specifies how
  	'scrollbind' windows should behave.  'sbo' stands for ScrollBind
  	Options.
--- 6209,6214 ----
***************
*** 6474,6480 ****
  						*'secure'* *'nosecure'* *E523*
  'secure'		boolean	(default off)
  			global
- 			{not in Vi}
  	When on, ":autocmd", shell and write commands are not allowed in
  	".vimrc" and ".exrc" in the current directory and map commands are
  	displayed.  Switch it off only if you know that you will not run into
--- 6247,6252 ----
***************
*** 6488,6494 ****
  						*'selection'* *'sel'*
  'selection' 'sel'	string	(default "inclusive")
  			global
- 			{not in Vi}
  	This option defines the behavior of the selection.  It is only used
  	in Visual and Select mode.
  	Possible values:
--- 6260,6265 ----
***************
*** 6512,6518 ****
  						*'selectmode'* *'slm'*
  'selectmode' 'slm'	string	(default "")
  			global
- 			{not in Vi}
  	This is a comma separated list of words, which specifies when to start
  	Select mode instead of Visual mode, when a selection is started.
  	Possible values:
--- 6283,6288 ----
***************
*** 6526,6532 ****
  'sessionoptions' 'ssop'	string	(default: "blank,buffers,curdir,folds,
  					 help,options,tabpages,winsize,terminal")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+mksession|
  			feature}
  	Changes the effect of the |:mksession| command.  It is a comma
--- 6296,6301 ----
***************
*** 6556,6562 ****
  	   tabpages	all tab pages; without this only the current tab page
  			is restored, so that you can make a session for each
  			tab page separately
! 	   terminal	include terminal windows where the command can be restored
  	   unix		with Unix end-of-line format (single <NL>), even when
  			on Windows or DOS
  	   winpos	position of the whole Vim window
--- 6325,6332 ----
  	   tabpages	all tab pages; without this only the current tab page
  			is restored, so that you can make a session for each
  			tab page separately
! 	   terminal	include terminal windows where the command can be
! 			restored
  	   unix		with Unix end-of-line format (single <NL>), even when
  			on Windows or DOS
  	   winpos	position of the whole Vim window
***************
*** 6592,6598 ****
  	Example with escaped space (Vim will do this when initializing the
  	option from $SHELL): >
  		:set shell=/bin/with\\\ space/sh
! <	The resulting value of 'shell' is  "/bin/with\ space/sh", two
  	backslashes are consumed by `:set`.
  
  	Under MS-Windows, when the executable ends in ".com" it must be
--- 6362,6368 ----
  	Example with escaped space (Vim will do this when initializing the
  	option from $SHELL): >
  		:set shell=/bin/with\\\ space/sh
! <	The resulting value of 'shell' is "/bin/with\ space/sh", two
  	backslashes are consumed by `:set`.
  
  	Under MS-Windows, when the executable ends in ".com" it must be
***************
*** 6610,6616 ****
  				 MS-DOS and Win32, when 'shell' does not
  				 contain "sh" somewhere: "/c")
  			global
- 			{not in Vi}
  	Flag passed to the shell to execute "!" and ":!" commands; e.g.,
  	"bash.exe -c ls" or "command.com /c dir".  For the MS-DOS-like
  	systems, the default is set according to the value of 'shell', to
--- 6380,6385 ----
***************
*** 6625,6631 ****
  						*'shellpipe'* *'sp'*
  'shellpipe' 'sp'	string	(default ">", "| tee", "|& tee" or "2>&1| tee")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+quickfix|
  			feature}
  	String to be used to put the output of the ":make" command in the
--- 6394,6399 ----
***************
*** 6661,6667 ****
  'shellquote' 'shq'	string	(default: ""; MS-DOS and Win32, when 'shell'
  					contains "sh" somewhere: "\"")
  			global
- 			{not in Vi}
  	Quoting character(s), put around the command passed to the shell, for
  	the "!" and ":!" commands.  The redirection is kept outside of the
  	quoting.  See 'shellxquote' to include the redirection.  It's
--- 6429,6434 ----
***************
*** 6677,6683 ****
  						*'shellredir'* *'srr'*
  'shellredir' 'srr'	string	(default ">", ">&" or ">%s 2>&1")
  			global
- 			{not in Vi}
  	String to be used to put the output of a filter command in a temporary
  	file.  See also |:!|.  See |option-backslash| about including spaces
  	and backslashes.
--- 6444,6449 ----
***************
*** 6703,6709 ****
  			*'shellslash'* *'ssl'* *'noshellslash'* *'nossl'*
  'shellslash' 'ssl'	boolean	(default off)
  			global
! 			{not in Vi} {only for MSDOS, MS-Windows and OS/2}
  	When set, a forward slash is used when expanding file names.  This is
  	useful when a Unix-like shell is used instead of command.com or
  	cmd.exe.  Backward slashes can still be typed, but they are changed to
--- 6469,6475 ----
  			*'shellslash'* *'ssl'* *'noshellslash'* *'nossl'*
  'shellslash' 'ssl'	boolean	(default off)
  			global
! 			{only for MSDOS, MS-Windows and OS/2}
  	When set, a forward slash is used when expanding file names.  This is
  	useful when a Unix-like shell is used instead of command.com or
  	cmd.exe.  Backward slashes can still be typed, but they are changed to
***************
*** 6718,6724 ****
  			*'shelltemp'* *'stmp'* *'noshelltemp'* *'nostmp'*
  'shelltemp' 'stmp'	boolean	(Vi default off, Vim default on)
  			global
- 			{not in Vi}
  	When on, use temp files for shell commands.  When off use a pipe.
  	When using a pipe is not possible temp files are used anyway.
  	Currently a pipe is only supported on Unix and MS-Windows 2K and
--- 6484,6489 ----
***************
*** 6739,6745 ****
  						*'shelltype'* *'st'*
  'shelltype' 'st'	number	(default 0)
  			global
! 			{not in Vi} {only for the Amiga}
  	On the Amiga this option influences the way how the commands work
  	which use a shell.
  	0 and 1: always use the shell
--- 6504,6510 ----
  						*'shelltype'* *'st'*
  'shelltype' 'st'	number	(default 0)
  			global
! 			{only for the Amiga}
  	On the Amiga this option influences the way how the commands work
  	which use a shell.
  	0 and 1: always use the shell
***************
*** 6754,6760 ****
  'shellxescape' 'sxe'	string	(default: "";
  				 for MS-DOS and MS-Windows: "\"&|<>()@^")
  			global
- 			{not in Vi}
  	When 'shellxquote' is set to "(" then the characters listed in this
  	option will be escaped with a '^' character.  This makes it possible
  	to execute most external commands with cmd.exe.
--- 6519,6524 ----
***************
*** 6766,6772 ****
  					somewhere: "\""
  					for Unix, when using system(): "\"")
  			global
- 			{not in Vi}
  	Quoting character(s), put around the command passed to the shell, for
  	the "!" and ":!" commands.  Includes the redirection.  See
  	'shellquote' to exclude the redirection.  It's probably not useful
--- 6530,6535 ----
***************
*** 6786,6792 ****
  			*'shiftround'* *'sr'* *'noshiftround'* *'nosr'*
  'shiftround' 'sr'	boolean	(default off)
  			global
- 			{not in Vi}
  	Round indent to multiple of 'shiftwidth'.  Applies to > and <
  	commands.  CTRL-T and CTRL-D in Insert mode always round the indent to
  	a multiple of 'shiftwidth' (this is Vi compatible).
--- 6549,6554 ----
***************
*** 6804,6810 ****
  'shortmess' 'shm'	string	(Vim default "filnxtToO", Vi default: "",
  							POSIX default: "A")
  			global
- 			{not in Vi}
  	This option helps to avoid all the |hit-enter| prompts caused by file
  	messages, for example  with CTRL-G, and to avoid some other messages.
  	It is a list of flags:
--- 6566,6571 ----
***************
*** 6859,6865 ****
  				 *'shortname'* *'sn'* *'noshortname'* *'nosn'*
  'shortname' 'sn'	boolean	(default off)
  			local to buffer
- 			{not in Vi, not in MS-DOS versions}
  	Filenames are assumed to be 8 characters plus one extension of 3
  	characters.  Multiple dots in file names are not allowed.  When this
  	option is on, dots in file names are replaced with underscores when
--- 6620,6625 ----
***************
*** 6872,6878 ****
  						*'showbreak'* *'sbr'* *E595*
  'showbreak' 'sbr'	string	(default "")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+linebreak|
  			feature}
  	String to put at the start of lines that have been wrapped.  Useful
--- 6632,6637 ----
***************
*** 6894,6900 ****
  'showcmd' 'sc'		boolean	(Vim default: on, off for Unix,
  				       Vi default: off, set in |defaults.vim|)
  			global
- 			{not in Vi}
  			{not available when compiled without the
  			|+cmdline_info| feature}
  	Show (partial) command in the last line of the screen.  Set this
--- 6653,6658 ----
***************
*** 6912,6918 ****
  			*'showfulltag'* *'sft'* *'noshowfulltag'* *'nosft'*
  'showfulltag' 'sft'	boolean (default off)
  			global
- 			{not in Vi}
  	When completing a word in insert mode (see |ins-completion|) from the
  	tags file, show both the tag name and a tidied-up form of the search
  	pattern (if there is one) as possible matches.  Thus, if you have
--- 6670,6675 ----
***************
*** 6958,6964 ****
  						*'showtabline'* *'stal'*
  'showtabline' 'stal'	number	(default 1)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+windows|
  			feature}
  	The value of this option specifies when the line with tab page labels
--- 6715,6720 ----
***************
*** 6973,6979 ****
  						*'sidescroll'* *'ss'*
  'sidescroll' 'ss'	number	(default 0)
  			global
- 			{not in Vi}
  	The minimal number of columns to scroll horizontally.  Used only when
  	the 'wrap' option is off and the cursor is moved off of the screen.
  	When it is zero the cursor will be put in the middle of the screen.
--- 6729,6734 ----
***************
*** 6984,6990 ****
  						*'sidescrolloff'* *'siso'*
  'sidescrolloff' 'siso'	number (default 0)
  			global or local to window |global-local|
- 			{not in Vi}
  	The minimal number of screen columns to keep to the left and to the
  	right of the cursor if 'nowrap' is set.  Setting this option to a
  	value greater than 0 while having |'sidescroll'| also at a non-zero
--- 6739,6744 ----
***************
*** 7009,7015 ****
  						*'signcolumn'* *'scl'*
  'signcolumn' 'scl'	string	(default "auto")
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+signs|
  			feature}
  	Whether or not to draw the signcolumn. Valid values are:
--- 6763,6768 ----
***************
*** 7021,7027 ****
  			*'smartcase'* *'scs'* *'nosmartcase'* *'noscs'*
  'smartcase' 'scs'	boolean	(default off)
  			global
- 			{not in Vi}
  	Override the 'ignorecase' option if the search pattern contains upper
  	case characters.  Only used when the search pattern is typed and
  	'ignorecase' option is on.  Used for the commands "/", "?", "n", "N",
--- 6774,6779 ----
***************
*** 7033,7039 ****
  			     *'smartindent'* *'si'* *'nosmartindent'* *'nosi'*
  'smartindent' 'si'	boolean	(default off)
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the
  			|+smartindent| feature}
  	Do smart autoindenting when starting a new line.  Works for C-like
--- 6785,6790 ----
***************
*** 7062,7068 ****
  				 *'smarttab'* *'sta'* *'nosmarttab'* *'nosta'*
  'smarttab' 'sta'	boolean	(default off)
  			global
- 			{not in Vi}
  	When on, a <Tab> in front of a line inserts blanks according to
  	'shiftwidth'.  'tabstop' or 'softtabstop' is used in other places.  A
  	<BS> will delete a 'shiftwidth' worth of space at the start of the
--- 6813,6818 ----
***************
*** 7080,7086 ****
  					*'softtabstop'* *'sts'*
  'softtabstop' 'sts'	number	(default 0)
  			local to buffer
- 			{not in Vi}
  	Number of spaces that a <Tab> counts for while performing editing
  	operations, like inserting a <Tab> or using <BS>.  It "feels" like
  	<Tab>s are being inserted, while in fact a mix of spaces and <Tab>s is
--- 6830,6835 ----
***************
*** 7104,7110 ****
  						*'spell'* *'nospell'*
  'spell'			boolean	(default off)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+syntax|
  			feature}
  	When on spell checking will be done.  See |spell|.
--- 6853,6858 ----
***************
*** 7113,7119 ****
  						*'spellcapcheck'* *'spc'*
  'spellcapcheck' 'spc'	string	(default "[.?!]\_[\])'" \t]\+")
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the |+syntax|
  			feature}
  	Pattern to locate the end of a sentence.  The following word will be
--- 6861,6866 ----
***************
*** 7129,7135 ****
  						*'spellfile'* *'spf'*
  'spellfile' 'spf'	string	(default empty)
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the |+syntax|
  			feature}
  	Name of the word list file where words are added for the |zg| and |zw|
--- 6876,6881 ----
***************
*** 7156,7162 ****
  						*'spelllang'* *'spl'*
  'spelllang' 'spl'	string	(default "en")
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the |+syntax|
  			feature}
  	A comma separated list of word list names.  When the 'spell' option is
--- 6902,6907 ----
***************
*** 7164,7170 ****
  		set spelllang=en_us,nl,medical
  <	This means US English, Dutch and medical words are recognized.  Words
  	that are not recognized will be highlighted.
! 	The word list name must not include a comma or dot.  Using a dash is
  	recommended to separate the two letter language name from a
  	specification.  Thus "en-rare" is used for rare English words.
  	A region name must come last and have the form "_xx", where "xx" is
--- 6909,6916 ----
  		set spelllang=en_us,nl,medical
  <	This means US English, Dutch and medical words are recognized.  Words
  	that are not recognized will be highlighted.
! 	The word list name must consist of alphanumeric characters, a dash or
! 	an underscore.  It should not include a comma or dot.  Using a dash is
  	recommended to separate the two letter language name from a
  	specification.  Thus "en-rare" is used for rare English words.
  	A region name must come last and have the form "_xx", where "xx" is
***************
*** 7193,7206 ****
  
  	After this option has been set successfully, Vim will source the files
  	"spell/LANG.vim" in 'runtimepath'.  "LANG" is the value of 'spelllang'
! 	up to the first character that is not an ASCII letter and not a dash.
! 	Also see |set-spc-auto|.
  
  
  						*'spellsuggest'* *'sps'*
  'spellsuggest' 'sps'	string	(default "best")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+syntax|
  			feature}
  	Methods used for spelling suggestions.  Both for the |z=| command and
--- 6939,6951 ----
  
  	After this option has been set successfully, Vim will source the files
  	"spell/LANG.vim" in 'runtimepath'.  "LANG" is the value of 'spelllang'
! 	up to the first character that is not an ASCII letter or number and
! 	not a dash.  Also see |set-spc-auto|.
  
  
  						*'spellsuggest'* *'sps'*
  'spellsuggest' 'sps'	string	(default "best")
  			global
  			{not available when compiled without the |+syntax|
  			feature}
  	Methods used for spelling suggestions.  Both for the |z=| command and
***************
*** 7266,7272 ****
  			*'splitbelow'* *'sb'* *'nosplitbelow'* *'nosb'*
  'splitbelow' 'sb'	boolean	(default off)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+windows|
  			feature}
  	When on, splitting a window will put the new window below the current
--- 7011,7016 ----
***************
*** 7275,7281 ****
  			*'splitright'* *'spr'* *'nosplitright'* *'nospr'*
  'splitright' 'spr'	boolean	(default off)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+vertsplit|
  			feature}
  	When on, splitting a window will put the new window right of the
--- 7019,7024 ----
***************
*** 7284,7290 ****
  			   *'startofline'* *'sol'* *'nostartofline'* *'nosol'*
  'startofline' 'sol'	boolean	(default on)
  			global
- 			{not in Vi}
  	When "on" the commands listed below move the cursor to the first
  	non-blank of the line.  When off the cursor is kept in the same column
  	(if possible).  This applies to the commands: CTRL-D, CTRL-U, CTRL-B,
--- 7027,7032 ----
***************
*** 7299,7305 ****
  			   *'statusline'* *'stl'* *E540* *E542*
  'statusline' 'stl'	string	(default empty)
  			global or local to window |global-local|
- 			{not in Vi}
  			{not available when compiled without the |+statusline|
  			feature}
  	When nonempty, this option determines the content of the status line.
--- 7041,7046 ----
***************
*** 7422,7428 ****
  	line is displayed.  The current buffer and current window will be set
  	temporarily to that of the window (and buffer) whose statusline is
  	currently being drawn.  The expression will evaluate in this context.
! 	The variable "actual_curbuf" is set to the 'bufnr()' number of the
  	real current buffer.
  
  	The 'statusline' option will be evaluated in the |sandbox| if set from
--- 7163,7169 ----
  	line is displayed.  The current buffer and current window will be set
  	temporarily to that of the window (and buffer) whose statusline is
  	currently being drawn.  The expression will evaluate in this context.
! 	The variable "g:actual_curbuf" is set to the `bufnr()` number of the
  	real current buffer.
  
  	The 'statusline' option will be evaluated in the |sandbox| if set from
***************
*** 7466,7472 ****
  						*'suffixes'* *'su'*
  'suffixes' 'su'		string	(default ".bak,~,.o,.h,.info,.swp,.obj")
  			global
- 			{not in Vi}
  	Files with these suffixes get a lower priority when multiple files
  	match a wildcard.  See |suffixes|.  Commas can be used to separate the
  	suffixes.  Spaces after the comma are ignored.  A dot is also seen as
--- 7207,7212 ----
***************
*** 7481,7487 ****
  						*'suffixesadd'* *'sua'*
  'suffixesadd' 'sua'	string	(default "")
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the
  			|+file_in_path| feature}
  	Comma separated list of suffixes, which are used when searching for a
--- 7221,7226 ----
***************
*** 7491,7497 ****
  				*'swapfile'* *'swf'* *'noswapfile'* *'noswf'*
  'swapfile' 'swf'	boolean (default on)
  			local to buffer
- 			{not in Vi}
  	Use a swapfile for the buffer.  This option can be reset when a
  	swapfile is not wanted for a specific buffer.  For example, with
  	confidential information that even root must not be able to access.
--- 7230,7235 ----
***************
*** 7514,7520 ****
  						*'swapsync'* *'sws'*
  'swapsync' 'sws'	string	(default "fsync")
  			global
- 			{not in Vi}
  	When this option is not empty a swap file is synced to disk after
  	writing to it.  This takes some time, especially on busy unix systems.
  	When this option is empty parts of the swap file may be in memory and
--- 7252,7257 ----
***************
*** 7529,7535 ****
  						*'switchbuf'* *'swb'*
  'switchbuf' 'swb'	string	(default "")
  			global
- 			{not in Vi}
  	This option controls the behavior when switching between buffers.
  	Possible values (comma separated list):
  	   useopen	If included, jump to the first open window that
--- 7266,7271 ----
***************
*** 7543,7549 ****
  			pages.
  	   split	If included, split the current window before loading
  			a buffer for a |quickfix| command that display errors.
! 			Otherwise: do not split, use current window.
  	   vsplit	Just like "split" but split vertically.
  	   newtab	Like "split", but open a new tab page.  Overrules
  			"split" when both are present.
--- 7279,7287 ----
  			pages.
  	   split	If included, split the current window before loading
  			a buffer for a |quickfix| command that display errors.
! 			Otherwise: do not split, use current window (when used
! 			in the quickfix window: the previously used window or
! 			split if there is no other window).
  	   vsplit	Just like "split" but split vertically.
  	   newtab	Like "split", but open a new tab page.  Overrules
  			"split" when both are present.
***************
*** 7551,7557 ****
  						*'synmaxcol'* *'smc'*
  'synmaxcol' 'smc'	number	(default 3000)
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the |+syntax|
  			feature}
  	Maximum column in which to search for syntax items.  In long lines the
--- 7289,7294 ----
***************
*** 7564,7570 ****
  						*'syntax'* *'syn'*
  'syntax' 'syn'		string	(default empty)
  			local to buffer
- 			{not in Vi}
  			{not available when compiled without the |+syntax|
  			feature}
  	When this option is set, the syntax with this name is loaded, unless
--- 7301,7306 ----
***************
*** 7594,7600 ****
  						*'tabline'* *'tal'*
  'tabline' 'tal'		string	(default empty)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+windows|
  			feature}
  	When nonempty, this option determines the content of the tab pages
--- 7330,7335 ----
***************
*** 7621,7627 ****
  						*'tabpagemax'* *'tpm'*
  'tabpagemax' 'tpm'	number	(default 10)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+windows|
  			feature}
  	Maximum number of tab pages to be opened by the |-p| command line
--- 7356,7361 ----
***************
*** 7662,7668 ****
  			*'tagbsearch'* *'tbs'* *'notagbsearch'* *'notbs'*
  'tagbsearch' 'tbs'	boolean	(default on)
  			global
- 			{not in Vi}
  	When searching for a tag (e.g., for the |:ta| command), Vim can either
  	use a binary search or a linear search in a tags file.  Binary
  	searching makes searching for a tag a LOT faster, but a linear search
--- 7396,7401 ----
***************
*** 7715,7721 ****
  							*'tagcase'* *'tc'*
  'tagcase' 'tc'		string	(default "followic")
  			global or local to buffer |global-local|
- 			{not in Vi}
  	This option specifies how case is handled when searching the tags
  	file:
  	   followic	Follow the 'ignorecase' option
--- 7448,7453 ----
***************
*** 7734,7740 ****
  			*'tagrelative'* *'tr'* *'notagrelative'* *'notr'*
  'tagrelative' 'tr'	boolean	(Vim default: on, Vi default: off)
  			global
- 			{not in Vi}
  	If on and using a tags file in another directory, file names in that
  	tags file are relative to the directory where the tags file is.
  	NOTE: This option is set to the Vi default value when 'compatible' is
--- 7466,7471 ----
***************
*** 7771,7777 ****
  				*'tagstack'* *'tgst'* *'notagstack'* *'notgst'*
  'tagstack' 'tgst'	boolean	(default on)
  			global
- 			{not in all versions of Vi}
  	When on, the |tagstack| is used normally.  When off, a ":tag" or
  	":tselect" command with an argument will not push the tag onto the
  	tagstack.  A following ":tag" without an argument, a ":pop" command or
--- 7502,7507 ----
***************
*** 7783,7789 ****
  						*'tcldll'*
  'tcldll'		string	(default depends on the build)
  			global
- 			{not in Vi}
  			{only available when compiled with the |+tcl/dyn|
  			feature}
  	Specifies the name of the Tcl shared library. The default is
--- 7513,7518 ----
***************
*** 7815,7821 ****
  						*'notermbidi'* *'notbidi'*
  'termbidi' 'tbidi'	boolean (default off, on for "mlterm")
  			global
- 			{not in Vi}
  			{only available when compiled with the |+arabic|
  			feature}
  	The terminal is in charge of Bi-directionality of text (as specified
--- 7544,7549 ----
***************
*** 7832,7840 ****
  'termencoding' 'tenc'	string	(default ""; with GTK+ GUI: "utf-8"; with
  						    Macintosh GUI: "macroman")
  			global
- 			{only available when compiled with the |+multi_byte|
- 			feature}
- 			{not in Vi}
  	Encoding used for the terminal.  This specifies what character
  	encoding the keyboard produces and the display will understand.  For
  	the GUI it only applies to the keyboard ('encoding' is used for the
--- 7560,7565 ----
***************
*** 7863,7869 ****
  					*'termguicolors'* *'tgc'* *E954*
  'termguicolors' 'tgc'	boolean (default off)
  			global
- 			{not in Vi}
  			{not available when compiled without the
  			|+termguicolors| feature}
  	When on, uses |highlight-guifg| and |highlight-guibg| attributes in
--- 7588,7593 ----
***************
*** 7881,7900 ****
  	Note that the "cterm" attributes are still used, not the "gui" ones.
  	NOTE: This option is reset when 'compatible' is set.
  
- 						*'termwinscroll'* *'twsl'*
- 'termwinscroll' 'twsl'	number	(default 10000)
- 			local to buffer
- 			{not in Vi}
- 			{not available when compiled without the
- 			|+terminal| feature}
- 	Number of scrollback lines to keep.  When going over this limit the
- 	first 10% of the scrollback lines are deleted.  This is just to reduce
- 	the memory usage.  See |Terminal-Normal|.
- 
  						*'termwinkey'* *'twk'*
  'termwinkey' 'twk'	string	(default "")
  			local to window
- 			{not in Vi}
  	The key that starts a CTRL-W command in a terminal window.  Other keys
  	are sent to the job running in the window.
  	The <> notation can be used, e.g.: >
--- 7605,7613 ----
***************
*** 7904,7913 ****
  	line.  If 'termwinkey' is set to CTRL-L then CTRL-L : gets you to the
  	command line.
  
  						*'termwinsize'* *'tws'*
  'termwinsize' 'tws'	string	(default "")
  			local to window
- 			{not in Vi}
  	Size of the |terminal| window.  Format: {rows}x{columns} or
  	{rows}*{columns}.
  	- When empty the terminal gets the size from the window.
--- 7617,7634 ----
  	line.  If 'termwinkey' is set to CTRL-L then CTRL-L : gets you to the
  	command line.
  
+ 						*'termwinscroll'* *'twsl'*
+ 'termwinscroll' 'twsl'	number	(default 10000)
+ 			local to buffer
+ 			{not available when compiled without the
+ 			|+terminal| feature}
+ 	Number of scrollback lines to keep.  When going over this limit the
+ 	first 10% of the scrollback lines are deleted.  This is just to reduce
+ 	the memory usage.  See |Terminal-Normal|.
+ 
  						*'termwinsize'* *'tws'*
  'termwinsize' 'tws'	string	(default "")
  			local to window
  	Size of the |terminal| window.  Format: {rows}x{columns} or
  	{rows}*{columns}.
  	- When empty the terminal gets the size from the window.
***************
*** 7932,7938 ****
  						*'termwintype'* *'twt'*
  'termwintype' 'twt'	string  (default "")
  			global
- 			{not in Vi}
  			{only available when compiled with the |terminal|
  			feature on MS-Windows}
  	Specify the virtual console (pty) used when opening the terminal
--- 7653,7658 ----
***************
*** 7960,7966 ****
  				   *'textauto'* *'ta'* *'notextauto'* *'nota'*
  'textauto' 'ta'		boolean	(Vim default: on, Vi default: off)
  			global
- 			{not in Vi}
  	This option is obsolete.  Use 'fileformats'.
  	For backwards compatibility, when 'textauto' is set, 'fileformats' is
  	set to the default value for the current system.  When 'textauto' is
--- 7680,7685 ----
***************
*** 7972,7978 ****
  'textmode' 'tx'		boolean	(MS-DOS, Win32 and OS/2: default on,
  				 others: default off)
  			local to buffer
- 			{not in Vi}
  	This option is obsolete.  Use 'fileformat'.
  	For backwards compatibility, when 'textmode' is set, 'fileformat' is
  	set to "dos".  When 'textmode' is reset, 'fileformat' is set to
--- 7691,7696 ----
***************
*** 7981,7987 ****
  						*'textwidth'* *'tw'*
  'textwidth' 'tw'	number	(default 0)
  			local to buffer
- 			{not in Vi}
  	Maximum width of text that is being inserted.  A longer line will be
  	broken after white space to get this width.  A zero value disables
  	this.
--- 7699,7704 ----
***************
*** 7995,8009 ****
  						*'thesaurus'* *'tsr'*
  'thesaurus' 'tsr'	string	(default "")
  			global or local to buffer |global-local|
- 			{not in Vi}
  	List of file names, separated by commas, that are used to lookup words
! 	for thesaurus completion commands |i_CTRL-X_CTRL-T|.  Each line in
! 	the file should contain words with similar meaning, separated by
! 	non-keyword characters (white space is preferred).  Maximum line
! 	length is 510 bytes.
! 	To obtain a file to be used here, check out this ftp site:
! 	[Sorry this link doesn't work anymore, do you know the right one?]
! 	ftp://ftp.ox.ac.uk/pub/wordlists/  First get the README file.
  	To include a comma in a file name precede it with a backslash.  Spaces
  	after a comma are ignored, otherwise spaces are included in the file
  	name.  See |option-backslash| about using backslashes.
--- 7712,7730 ----
  						*'thesaurus'* *'tsr'*
  'thesaurus' 'tsr'	string	(default "")
  			global or local to buffer |global-local|
  	List of file names, separated by commas, that are used to lookup words
! 	for thesaurus completion commands |i_CTRL-X_CTRL-T|.
! 
! 	Each line in the file should contain words with similar meaning,
! 	separated by non-keyword characters (white space is preferred).
! 	Maximum line length is 510 bytes.
! 
! 	An English word list was added to this github issue:
! 	https://github.com/vim/vim/issues/629#issuecomment-443293282
! 	Unpack thesaurus_pkg.zip, put the thesaurus.txt file somewhere, e.g.
! 	~/.vim/thesaurus/english.txt, and the 'thesaurus' option to this file
! 	name.
! 
  	To include a comma in a file name precede it with a backslash.  Spaces
  	after a comma are ignored, otherwise spaces are included in the file
  	name.  See |option-backslash| about using backslashes.
***************
*** 8015,8021 ****
  			     *'tildeop'* *'top'* *'notildeop'* *'notop'*
  'tildeop' 'top'		boolean	(default off)
  			global
- 			{not in Vi}
  	When on: The tilde command "~" behaves like an operator.
  	NOTE: This option is reset when 'compatible' is set.
  
--- 7736,7741 ----
***************
*** 8025,8031 ****
  						*'ttimeout'* *'nottimeout'*
  'ttimeout'		boolean (default off, set in |defaults.vim|)
  			global
- 			{not in Vi}
  	These two options together determine the behavior when part of a
  	mapped key sequence or keyboard code has been received:
  
--- 7745,7750 ----
***************
*** 8060,8066 ****
  						*'ttimeoutlen'* *'ttm'*
  'ttimeoutlen' 'ttm'	number	(default -1, set to 100 in |defaults.vim|)
  			global
- 			{not in Vi}
  	The time in milliseconds that is waited for a key code or mapped key
  	sequence to complete.  Also used for CTRL-\ CTRL-N and CTRL-\ CTRL-G
  	when part of a command has been typed.
--- 7779,7784 ----
***************
*** 8081,8087 ****
  						*'title'* *'notitle'*
  'title'			boolean	(default off, on when title can be restored)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+title|
  			feature}
  	When on, the title of the window will be set to the value of
--- 7799,7804 ----
***************
*** 8117,8123 ****
  								*'titlelen'*
  'titlelen'		number	(default 85)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+title|
  			feature}
  	Gives the percentage of 'columns' to use for the length of the window
--- 7834,7839 ----
***************
*** 8133,8139 ****
  						*'titleold'*
  'titleold'		string	(default "Thanks for flying Vim")
  			global
- 			{not in Vi}
  			{only available when compiled with the |+title|
  			feature}
  	This option will be used for the window title when exiting Vim if the
--- 7849,7854 ----
***************
*** 8144,8150 ****
  						*'titlestring'*
  'titlestring'		string	(default "")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+title|
  			feature}
  	When this option is not empty, it will be used for the title of the
--- 7859,7864 ----
***************
*** 8200,8206 ****
  						*'toolbariconsize'* *'tbis'*
  'toolbariconsize' 'tbis'	string	(default "small")
  				global
- 				{not in Vi}
  				{only in the GTK+ GUI}
  	Controls the size of toolbar icons.  The possible values are:
  		tiny		Use tiny icons.
--- 7914,7919 ----
***************
*** 8219,8225 ****
  			     *'ttybuiltin'* *'tbi'* *'nottybuiltin'* *'notbi'*
  'ttybuiltin' 'tbi'	boolean	(default on)
  			global
- 			{not in Vi}
  	When on, the builtin termcaps are searched before the external ones.
  	When off the builtin termcaps are searched after the external ones.
  	When this option is changed, you should set the 'term' option next for
--- 7932,7937 ----
***************
*** 8236,8242 ****
  					iris-ansi; also on when running Vim in
  					a DOS console)
  			global
- 			{not in Vi}
  	Indicates a fast terminal connection.  More characters will be sent to
  	the screen for redrawing, instead of using insert/delete line
  	commands.  Improves smoothness of redrawing when there are multiple
--- 7948,7953 ----
***************
*** 8248,8254 ****
  						*'ttymouse'* *'ttym'*
  'ttymouse' 'ttym'	string	(default depends on 'term')
  			global
- 			{not in Vi}
  			{only in Unix and VMS, doesn't work in the GUI; not
  			available when compiled without |+mouse|}
  	Name of the terminal type for which mouse codes are to be recognized.
--- 7959,7964 ----
***************
*** 8308,8315 ****
  	|t_RV| is set to the escape sequence to request the xterm version
  	number, more intelligent detection process runs.
  	The "xterm2" value will be set if the xterm version is reported to be
! 	from 95 to 276.  The "sgr" value will be set if the xterm version is
! 	277 or higher and when Vim detects Mac Terminal.app or iTerm2.
  	If you do not want 'ttymouse' to be set to "xterm2" or "sgr"
  	automatically, set t_RV to an empty string: >
  		:set t_RV=
--- 8018,8026 ----
  	|t_RV| is set to the escape sequence to request the xterm version
  	number, more intelligent detection process runs.
  	The "xterm2" value will be set if the xterm version is reported to be
! 	from 95 to 276.  The "sgr" value will be set if Vim detects Mac
! 	Terminal.app, iTerm2 or mintty, and when the xterm version is 277 or
! 	higher.
  	If you do not want 'ttymouse' to be set to "xterm2" or "sgr"
  	automatically, set t_RV to an empty string: >
  		:set t_RV=
***************
*** 8330,8336 ****
  						*'undodir'* *'udir'*
  'undodir' 'udir'	string	(default ".")
  			global
- 			{not in Vi}
  			{only when compiled with the |+persistent_undo| feature}
  	List of directory names for undo files, separated with commas.
  	See |'backupdir'| for details of the format.
--- 8041,8046 ----
***************
*** 8348,8354 ****
  				*'undofile'* *'noundofile'* *'udf'* *'noudf'*
  'undofile' 'udf'	boolean	(default off)
  			local to buffer
- 			{not in Vi}
  			{only when compiled with the |+persistent_undo| feature}
  	When on, Vim automatically saves undo history to an undo file when
  	writing a buffer to a file, and restores undo history from the same
--- 8058,8063 ----
***************
*** 8364,8370 ****
  'undolevels' 'ul'	number	(default 100, 1000 for Unix, VMS,
  						Win32 and OS/2)
  			global or local to buffer |global-local|
- 			{not in Vi}
  	Maximum number of changes that can be undone.  Since undo information
  	is kept in memory, higher numbers will cause more memory to be used
  	(nevertheless, a single change can use an unlimited amount of memory).
--- 8073,8078 ----
***************
*** 8386,8392 ****
  						*'undoreload'* *'ur'*
  'undoreload' 'ur'	number	(default 10000)
  			global
- 			{not in Vi}
  	Save the whole buffer for undo when reloading it.  This applies to the
  	":e!" command and reloading for when the buffer changed outside of
  	Vim. |FileChangedShell|
--- 8094,8099 ----
***************
*** 8402,8408 ****
  						*'updatecount'* *'uc'*
  'updatecount' 'uc'	number	(default: 200)
  			global
- 			{not in Vi}
  	After typing this many characters the swap file will be written to
  	disk.  When zero, no swap file will be created at all (see chapter on
  	recovery |crash-recovery|).  'updatecount' is set to zero by starting
--- 8109,8114 ----
***************
*** 8419,8425 ****
  						*'updatetime'* *'ut'*
  'updatetime' 'ut'	number	(default 4000)
  			global
- 			{not in Vi}
  	If this many milliseconds nothing is typed the swap file will be
  	written to disk (see |crash-recovery|).  Also used for the
  	|CursorHold| autocommand event.
--- 8125,8130 ----
***************
*** 8429,8435 ****
  			local to buffer
  			{only available when compiled with the |+vartabs|
  			feature}
- 			{not in Vi}
  	A list of the number of spaces that a <Tab> counts for while editing,
  	such as inserting a <Tab> or using <BS>.  It "feels" like variable-
  	width <Tab>s are being inserted, while in fact a mixture of spaces
--- 8134,8139 ----
***************
*** 8437,8447 ****
  	final value applying to all subsequent tabs.
  
  	For example, when editing assembly language files where statements
! 	start in the 8th column and comments in the 40th, it may be useful
  	to use the following: >
  		:set varsofttabstop=8,32,8
! <	This will set soft tabstops at the 8th and 40th columns, and at every
! 	8th column thereafter.
  
  	Note that the value of |'softtabstop'| will be ignored while
  	'varsofttabstop' is set.
--- 8141,8151 ----
  	final value applying to all subsequent tabs.
  
  	For example, when editing assembly language files where statements
! 	start in the 9th column and comments in the 41st, it may be useful
  	to use the following: >
  		:set varsofttabstop=8,32,8
! <	This will set soft tabstops with 8 and 8 + 32 spaces, and 8 more
! 	for every column thereafter.
  
  	Note that the value of |'softtabstop'| will be ignored while
  	'varsofttabstop' is set.
***************
*** 8451,8457 ****
  			local to buffer
  			{only available when compiled with the |+vartabs|
  			feature}
- 			{not in Vi}
  	A list of the number of spaces that a <Tab> in the file counts for,
  	separated by commas.  Each value corresponds to one tab, with the
  	final value applying to all subsequent tabs. For example: >
--- 8155,8160 ----
***************
*** 8465,8472 ****
  						*'verbose'* *'vbs'*
  'verbose' 'vbs'		number	(default 0)
  			global
- 			{not in Vi, although some versions have a boolean
- 			verbose option}
  	When bigger than zero, Vim will give messages about what it is doing.
  	Currently, these messages are given:
  	>= 1	When the viminfo file is read or written.
--- 8168,8173 ----
***************
*** 8488,8494 ****
  						*'verbosefile'* *'vfile'*
  'verbosefile' 'vfile'	string	(default empty)
  			global
- 			{not in Vi}
  	When not empty all messages are written in a file with this name.
  	When the file exists messages are appended.
  	Writing to the file ends when Vim exits or when 'verbosefile' is made
--- 8189,8194 ----
***************
*** 8505,8511 ****
  				 for VMS: "sys$login:vimfiles/view"
  				 for RiscOS: "Choices:vimfiles/view")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+mksession|
  			feature}
  	Name of the directory where to store files for |:mkview|.
--- 8205,8210 ----
***************
*** 8515,8521 ****
  						*'viewoptions'* *'vop'*
  'viewoptions' 'vop'	string	(default: "folds,options,cursor,curdir")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+mksession|
  			feature}
  	Changes the effect of the |:mkview| command.  It is a comma separated
--- 8214,8219 ----
***************
*** 8543,8549 ****
  				   for Amiga: '100,<50,s10,h,rdf0:,rdf1:,rdf2:
  				   for others: '100,<50,s10,h)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+viminfo|
  			feature}
  	When non-empty, the viminfo file is read upon startup and written
--- 8241,8246 ----
***************
*** 8660,8666 ****
  				*'viminfofile'* *'vif'*
  'viminfofile' 'vif'	string	(default: "")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+viminfo|
  			feature}
  	When non-empty, overrides the file name used for viminfo.
--- 8357,8362 ----
***************
*** 8671,8677 ****
  					    *'virtualedit'* *'ve'*
  'virtualedit' 've'	string	(default "")
  			global
- 			{not in Vi}
  			{not available when compiled without the
  			|+virtualedit| feature}
  	A comma separated list of these words:
--- 8367,8372 ----
***************
*** 8700,8706 ****
  			*'visualbell'* *'vb'* *'novisualbell'* *'novb'* *beep*
  'visualbell' 'vb'	boolean	(default off)
  			global
- 			{not in Vi}
  	Use a visual bell instead of beeping.  The terminal code to display the
  	visual bell is given with 't_vb'.  When no beep or flash is wanted,
  	use: >
--- 8395,8400 ----
***************
*** 8734,8740 ****
  		     *'weirdinvert'* *'wiv'* *'noweirdinvert'* *'nowiv'*
  'weirdinvert' 'wiv'	boolean	(default off)
  			global
- 			{not in Vi}
  	This option has the same effect as the 't_xs' terminal option.
  	It is provided for backwards compatibility with version 4.x.
  	Setting 'weirdinvert' has the effect of making 't_xs' non-empty, and
--- 8428,8433 ----
***************
*** 8743,8749 ****
  						*'whichwrap'* *'ww'*
  'whichwrap' 'ww'	string	(Vim default: "b,s", Vi default: "")
  			global
- 			{not in Vi}
  	Allow specified keys that move the cursor left/right to move to the
  	previous/next line when the cursor is on the first/last character in
  	the line.  Concatenate characters to allow this for these keys:
--- 8436,8441 ----
***************
*** 8776,8782 ****
  						*'wildchar'* *'wc'*
  'wildchar' 'wc'		number	(Vim default: <Tab>, Vi default: CTRL-E)
  			global
- 			{not in Vi}
  	Character you have to type to start wildcard expansion in the
  	command-line, as specified with 'wildmode'.
  	More info here: |cmdline-completion|.
--- 8468,8473 ----
***************
*** 8790,8796 ****
  						*'wildcharm'* *'wcm'*
  'wildcharm' 'wcm'	number	(default: none (0))
  			global
- 			{not in Vi}
  	'wildcharm' works exactly like 'wildchar', except that it is
  	recognized when used inside a macro.  You can find "spare" command-line
  	keys suitable for this option by looking at |ex-edit-index|.  Normally
--- 8481,8486 ----
***************
*** 8803,8809 ****
  						*'wildignore'* *'wig'*
  'wildignore' 'wig'	string	(default "")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+wildignore|
  			feature}
  	A list of file patterns.  A file that matches with one of these
--- 8493,8498 ----
***************
*** 8822,8828 ****
  			*'wildignorecase'* *'wic'* *'nowildignorecase'* *'nowic'*
  'wildignorecase' 'wic'	boolean	(default off)
  			global
- 			{not in Vi}
  	When set case is ignored when completing file names and directories.
  	Has no effect when 'fileignorecase' is set.
  	Does not apply when the shell is used to expand wildcards, which
--- 8511,8516 ----
***************
*** 8832,8838 ****
  				*'wildmenu'* *'wmnu'* *'nowildmenu'* *'nowmnu'*
  'wildmenu' 'wmnu'	boolean	(default off, set in |defaults.vim|)
  			global
- 			{not in Vi}
  			{not available if compiled without the |+wildmenu|
  			feature}
  	When 'wildmenu' is on, command-line completion operates in an enhanced
--- 8520,8525 ----
***************
*** 8873,8879 ****
  						*'wildmode'* *'wim'*
  'wildmode' 'wim'	string	(Vim default: "full")
  			global
- 			{not in Vi}
  	Completion mode that is used for the character specified with
  	'wildchar'.  It is a comma separated list of up to four parts.  Each
  	part specifies what to do for each consecutive use of 'wildchar'.  The
--- 8560,8565 ----
***************
*** 8911,8917 ****
  						*'wildoptions'* *'wop'*
  'wildoptions' 'wop'	string	(default "")
  			global
- 			{not in Vi}
  			{not available when compiled without the |+wildignore|
  			feature}
  	A list of words that change how command line completion is done.
--- 8597,8602 ----
***************
*** 8926,8932 ****
  						*'winaltkeys'* *'wak'*
  'winaltkeys' 'wak'	string	(default "menu")
  			global
- 			{not in Vi}
  			{only used in Win32, Motif, GTK and Photon GUI}
  	Some GUI versions allow the access to menu entries by using the ALT
  	key in combination with a character that appears underlined in the
--- 8611,8616 ----
***************
*** 8962,8968 ****
  						*'winheight'* *'wh'* *E591*
  'winheight' 'wh'	number	(default 1)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+windows|
  			feature}
  	Minimal number of lines for the current window.  This is not a hard
--- 8646,8651 ----
***************
*** 8985,8991 ****
  			*'winfixheight'* *'wfh'* *'nowinfixheight'* *'nowfh'*
  'winfixheight' 'wfh'	boolean	(default off)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+windows|
  			feature}
  	Keep the window height when windows are opened or closed and
--- 8668,8673 ----
***************
*** 8996,9002 ****
  			*'winfixwidth'* *'wfw'* *'nowinfixwidth'* *'nowfw'*
  'winfixwidth' 'wfw'	boolean	(default off)
  			local to window
- 			{not in Vi}
  			{not available when compiled without the |+windows|
  			feature}
  	Keep the window width when windows are opened or closed and
--- 8678,8683 ----
***************
*** 9006,9012 ****
  						*'winminheight'* *'wmh'*
  'winminheight' 'wmh'	number	(default 1)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+windows|
  			feature}
  	The minimal height of a window, when it's not the current window.
--- 8687,8692 ----
***************
*** 9022,9028 ****
  						*'winminwidth'* *'wmw'*
  'winminwidth' 'wmw'	number	(default 1)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+vertsplit|
  			feature}
  	The minimal width of a window, when it's not the current window.
--- 8702,8707 ----
***************
*** 9039,9045 ****
  						*'winptydll'*
  'winptydll'		string	(default "winpty32.dll" or "winpty64.dll")
  			global
- 			{not in Vi}
  			{only available when compiled with the |terminal|
  			feature on MS-Windows}
  	Specifies the name of the winpty shared library, used for the
--- 8718,8723 ----
***************
*** 9053,9059 ****
  						*'winwidth'* *'wiw'* *E592*
  'winwidth' 'wiw'	number	(default 20)
  			global
- 			{not in Vi}
  			{not available when compiled without the |+vertsplit|
  			feature}
  	Minimal number of columns for the current window.  This is not a hard
--- 8731,8736 ----
***************
*** 9069,9075 ****
  						*'wrap'* *'nowrap'*
  'wrap'			boolean	(default on)
  			local to window
- 			{not in Vi}
  	This option changes how text is displayed.  It doesn't change the text
  	in the buffer, see 'textwidth' for that.
  	When on, lines longer than the width of the window will wrap and
--- 8746,8751 ----
***************
*** 9109,9115 ****
  						   *'write'* *'nowrite'*
  'write'			boolean	(default on)
  			global
- 			{not in Vi}
  	Allows writing files.  When not set, writing a file is not allowed.
  	Can be used for a view-only mode, where modifications to the text are
  	still allowed.  Can be reset with the |-m| or |-M| command line
--- 8785,8790 ----
***************
*** 9125,9131 ****
  'writebackup' 'wb'	boolean	(default on with |+writebackup| feature, off
  					otherwise)
  			global
- 			{not in Vi}
  	Make a backup before overwriting a file.  The backup is removed after
  	the file was successfully written, unless the 'backup' option is
  	also on.
--- 8800,8805 ----
***************
*** 9142,9150 ****
  						*'writedelay'* *'wd'*
  'writedelay' 'wd'	number	(default 0)
  			global
- 			{not in Vi}
  	The number of milliseconds to wait for each character sent to the
  	screen.  When non-zero, characters are sent to the terminal one by
  	one.  For MS-DOS pcterm this does not work.  For debugging purposes.
  
!  vim:tw=78:ts=8:ft=help:norl:
--- 8816,8823 ----
  						*'writedelay'* *'wd'*
  'writedelay' 'wd'	number	(default 0)
  			global
  	The number of milliseconds to wait for each character sent to the
  	screen.  When non-zero, characters are sent to the terminal one by
  	one.  For MS-DOS pcterm this does not work.  For debugging purposes.
  
!  vim:tw=78:ts=8:noet:ft=help:norl:
*** ../vim-8.1.1225/src/version.c	2019-04-28 14:59:55.845503790 +0200
--- src/version.c	2019-04-28 15:55:46.832806798 +0200
***************
*** 769,770 ****
--- 769,772 ----
  {   /* Add new patch number below this line */
+ /**/
+     1226,
  /**/

-- 
WOMAN:   Well, 'ow did you become king then?
ARTHUR:  The Lady of the Lake, [angels sing] her arm clad in the purest
         shimmering samite, held aloft Excalibur from the bosom of the water
         signifying by Divine Providence that I, Arthur, was to carry
         Excalibur.  [singing stops] That is why I am your king!
                                  The Quest for the Holy Grail (Monty Python)

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\  an exciting new programming language -- http://www.Zimbu.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
