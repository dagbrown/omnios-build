To: vim_dev@googlegroups.com
Subject: Patch 8.1.1524
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
------------

Patch 8.1.1524
Problem:    Tests are silently skipped.
Solution:   Throw an exception for skipped tests in more places.
Files:	    src/testdir/test_assert.vim, src/testdir/test_paste.vim,
            src/testdir/shared.vim, src/testdir/test_crypt.vim,
            src/testdir/test_cscope.vim, src/testdir/test_digraph.vim,
            src/testdir/test_float_func.vim, src/testdir/test_gui.vim,
            src/testdir/test_gui_init.vim, src/testdir/test_history.vim,
            src/testdir/test_langmap.vim, src/testdir/test_listlbr.vim,
            src/testdir/test_listlbr_utf8.vim, src/testdir/test_lua.vim,
            src/testdir/test_makeencoding.vim,
            src/testdir/test_matchadd_conceal.vim,
            src/testdir/test_matchadd_conceal_utf8.vim,
            src/testdir/test_memory_usage.vim, src/testdir/test_menu.vim,
            src/testdir/test_mksession.vim,
            src/testdir/test_mksession_utf8.vim,
            src/testdir/test_netbeans.vim, src/testdir/test_paste.vim,
            src/testdir/test_perl.vim, src/testdir/test_profile.vim,
            src/testdir/test_prompt_buffer.vim, src/testdir/test_python2.vim,
            src/testdir/test_python3.vim, src/testdir/test_pyx2.vim,
            src/testdir/test_pyx3.vim, src/testdir/test_quickfix.vim,
            src/testdir/test_quotestar.vim, src/testdir/test_reltime.vim,
            src/testdir/test_ruby.vim, src/testdir/test_sha256.vim,
            src/testdir/test_shortpathname.vim, src/testdir/test_signals.vim,
            src/testdir/test_signs.vim, src/testdir/test_spell.vim,
            src/testdir/test_syntax.vim, src/testdir/test_tcl.vim,
            src/testdir/test_termcodes.vim, src/testdir/test_terminal.vim,
            src/testdir/test_terminal_fail.vim,
            src/testdir/test_textobjects.vim, src/testdir/test_textprop.vim,
            src/testdir/test_timers.vim, src/testdir/test_vartabs.vim,
            src/testdir/test_winbar.vim, src/testdir/test_windows_home.vim,
            src/testdir/test_xxd.vim


*** ../vim-8.1.1523/src/testdir/test_assert.vim	2019-02-20 22:04:28.823721308 +0100
--- src/testdir/test_assert.vim	2019-06-06 17:12:04.180454895 +0200
***************
*** 222,227 ****
--- 222,246 ----
    call assert_fails("call test_override('redraw', 'yes')", 'E474')
  endfunc
  
+ func Test_mouse_position()
+   let save_mouse = &mouse
+   set mouse=a
+   new
+   call setline(1, ['line one', 'line two'])
+   call assert_equal([0, 1, 1, 0], getpos('.'))
+   call test_setmouse(1, 5)
+   call feedkeys("\<LeftMouse>", "xt")
+   call assert_equal([0, 1, 5, 0], getpos('.'))
+   call test_setmouse(2, 20)
+   call feedkeys("\<LeftMouse>", "xt")
+   call assert_equal([0, 2, 8, 0], getpos('.'))
+   call test_setmouse(5, 1)
+   call feedkeys("\<LeftMouse>", "xt")
+   call assert_equal([0, 2, 1, 0], getpos('.'))
+   bwipe!
+   let &mouse = save_mouse
+ endfunc
+ 
  func Test_user_is_happy()
    smile
    sleep 300m
*** ../vim-8.1.1523/src/testdir/shared.vim	2018-12-16 16:16:05.384854629 +0100
--- src/testdir/shared.vim	2019-05-06 21:25:49.852986823 +0200
***************
*** 330,336 ****
  
  " Get line "lnum" as displayed on the screen.
  " Trailing white space is trimmed.
! func! Screenline(lnum)
    let chars = []
    for c in range(1, winwidth(0))
      call add(chars, nr2char(screenchar(a:lnum, c)))
--- 330,336 ----
  
  " Get line "lnum" as displayed on the screen.
  " Trailing white space is trimmed.
! func Screenline(lnum)
    let chars = []
    for c in range(1, winwidth(0))
      call add(chars, nr2char(screenchar(a:lnum, c)))
*** ../vim-8.1.1523/src/testdir/test_crypt.vim	2019-01-18 22:48:30.900796633 +0100
--- src/testdir/test_crypt.vim	2019-06-13 21:50:07.949893368 +0200
***************
*** 1,7 ****
  " Tests for encryption.
  
  if !has('cryptv')
!   finish
  endif
  
  func Common_head_only(text)
--- 1,7 ----
  " Tests for encryption.
  
  if !has('cryptv')
!   throw 'Skipped, encryption feature missing'
  endif
  
  func Common_head_only(text)
*** ../vim-8.1.1523/src/testdir/test_cscope.vim	2019-06-04 23:20:19.974043597 +0200
--- src/testdir/test_cscope.vim	2019-06-13 21:51:51.509485128 +0200
***************
*** 1,7 ****
  " Test for cscope commands.
  
! if !has('cscope') || !executable('cscope') || !has('quickfix')
!   finish
  endif
  
  func CscopeSetupOrClean(setup)
--- 1,10 ----
  " Test for cscope commands.
  
! if !has('cscope') || !has('quickfix')
!   throw 'Skipped, cscope or quickfix feature missing'
! endif
! if !executable('cscope')
!   throw 'Skipped, cscope program missing'
  endif
  
  func CscopeSetupOrClean(setup)
*** ../vim-8.1.1523/src/testdir/test_digraph.vim	2019-01-24 17:59:35.139217458 +0100
--- src/testdir/test_digraph.vim	2019-06-13 21:52:33.157323405 +0200
***************
*** 1,7 ****
  " Tests for digraphs
  
  if !has("digraphs")
!   finish
  endif
  
  func Put_Dig(chars)
--- 1,7 ----
  " Tests for digraphs
  
  if !has("digraphs")
!   throw 'Skipped, digraphs feature missing'
  endif
  
  func Put_Dig(chars)
*** ../vim-8.1.1523/src/testdir/test_float_func.vim	2019-05-16 22:24:52.407017760 +0200
--- src/testdir/test_float_func.vim	2019-06-13 21:52:49.177261534 +0200
***************
*** 1,7 ****
  " test float functions
  
  if !has('float')
!   finish
  end
  
  func Test_abs()
--- 1,7 ----
  " test float functions
  
  if !has('float')
!   throw 'Skipped, float feature missing'
  end
  
  func Test_abs()
*** ../vim-8.1.1523/src/testdir/test_gui.vim	2019-06-06 15:40:04.643505352 +0200
--- src/testdir/test_gui.vim	2019-06-13 21:53:12.133173180 +0200
***************
*** 2,8 ****
  
  source shared.vim
  if !CanRunGui()
!   finish
  endif
  
  source setup_gui.vim
--- 2,8 ----
  
  source shared.vim
  if !CanRunGui()
!   throw 'Skipped, cannot run GUI'
  endif
  
  source setup_gui.vim
*** ../vim-8.1.1523/src/testdir/test_gui_init.vim	2017-08-29 20:40:10.000000000 +0200
--- src/testdir/test_gui_init.vim	2019-06-13 21:53:27.937112542 +0200
***************
*** 3,9 ****
  
  source shared.vim
  if !CanRunGui()
!   finish
  endif
  
  source setup_gui.vim
--- 3,9 ----
  
  source shared.vim
  if !CanRunGui()
!   throw 'Skipped, cannot run GUI'
  endif
  
  source setup_gui.vim
*** ../vim-8.1.1523/src/testdir/test_history.vim	2018-12-02 14:55:04.904731741 +0100
--- src/testdir/test_history.vim	2019-06-13 21:53:45.793044073 +0200
***************
*** 1,7 ****
  " Tests for the history functions
  
  if !has('cmdline_hist')
!   finish
  endif
  
  set history=7
--- 1,7 ----
  " Tests for the history functions
  
  if !has('cmdline_hist')
!   throw 'Skipped, cmdline_hist feature missing'
  endif
  
  set history=7
*** ../vim-8.1.1523/src/testdir/test_langmap.vim	2016-01-21 23:51:53.000000000 +0100
--- src/testdir/test_langmap.vim	2019-06-13 21:54:00.636948573 +0200
***************
*** 1,7 ****
  " tests for 'langmap'
  
  if !has('langmap')
!   finish
  endif
  
  func Test_langmap()
--- 1,7 ----
  " tests for 'langmap'
  
  if !has('langmap')
!   throw 'Skipped, langmap feature missing'
  endif
  
  func Test_langmap()
*** ../vim-8.1.1523/src/testdir/test_listlbr.vim	2019-01-09 23:00:58.001176090 +0100
--- src/testdir/test_listlbr.vim	2019-06-13 21:54:50.612633357 +0200
***************
*** 3,10 ****
  set encoding=latin1
  scriptencoding latin1
  
! if !exists("+linebreak") || !has("conceal")
!   finish
  endif
  
  source view_util.vim
--- 3,13 ----
  set encoding=latin1
  scriptencoding latin1
  
! if !exists("+linebreak")
!   throw 'Skipped, linebreak option missing'
! endif
! if !has("conceal")
!   throw 'Skipped, conceal feature missing'
  endif
  
  source view_util.vim
*** ../vim-8.1.1523/src/testdir/test_listlbr_utf8.vim	2019-01-09 23:00:58.001176090 +0100
--- src/testdir/test_listlbr_utf8.vim	2019-06-13 21:55:38.056344791 +0200
***************
*** 3,10 ****
  set encoding=utf-8
  scriptencoding utf-8
  
! if !exists("+linebreak") || !has("conceal") || !has("signs")
!   finish
  endif
  
  source view_util.vim
--- 3,16 ----
  set encoding=utf-8
  scriptencoding utf-8
  
! if !exists("+linebreak")
!   throw 'Skipped, linebreak option missing'
! endif
! if !has("conceal")
!   throw 'Skipped, conceal feature missing'
! endif
! if !has("signs")
!   throw 'Skipped, signs feature missing'
  endif
  
  source view_util.vim
*** ../vim-8.1.1523/src/testdir/test_lua.vim	2019-03-23 13:56:30.189804811 +0100
--- src/testdir/test_lua.vim	2019-06-13 21:55:58.456223641 +0200
***************
*** 1,7 ****
  " Tests for Lua.
  
  if !has('lua')
!   finish
  endif
  
  func TearDown()
--- 1,7 ----
  " Tests for Lua.
  
  if !has('lua')
!   throw 'Skipped, lua feature missing'
  endif
  
  func TearDown()
*** ../vim-8.1.1523/src/testdir/test_makeencoding.vim	2019-01-24 17:59:35.139217458 +0100
--- src/testdir/test_makeencoding.vim	2019-06-13 21:56:30.420037138 +0200
***************
*** 4,11 ****
  
  let s:python = PythonProg()
  if s:python == ''
!   " Can't run this test.
!   finish
  endif
  
  let s:script = 'test_makeencoding.py'
--- 4,10 ----
  
  let s:python = PythonProg()
  if s:python == ''
!   throw 'Skipped, python program missing'
  endif
  
  let s:script = 'test_makeencoding.py'
*** ../vim-8.1.1523/src/testdir/test_matchadd_conceal.vim	2019-01-09 23:00:58.001176090 +0100
--- src/testdir/test_matchadd_conceal.vim	2019-06-13 21:56:52.063913066 +0200
***************
*** 1,6 ****
  " Test for matchadd() and conceal feature
  if !has('conceal')
!   finish
  endif
  
  if !has('gui_running') && has('unix')
--- 1,7 ----
  " Test for matchadd() and conceal feature
+ 
  if !has('conceal')
!   throw 'Skipped, conceal feature missing'
  endif
  
  if !has('gui_running') && has('unix')
*** ../vim-8.1.1523/src/testdir/test_matchadd_conceal_utf8.vim	2019-01-24 17:59:35.139217458 +0100
--- src/testdir/test_matchadd_conceal_utf8.vim	2019-06-13 21:57:13.135793919 +0200
***************
*** 1,6 ****
  " Test for matchadd() and conceal feature using utf-8.
  if !has('conceal')
!   finish
  endif
  
  if !has('gui_running') && has('unix')
--- 1,7 ----
  " Test for matchadd() and conceal feature using utf-8.
+ 
  if !has('conceal')
!   throw 'Skipped, conceal feature missing'
  endif
  
  if !has('gui_running') && has('unix')
*** ../vim-8.1.1523/src/testdir/test_memory_usage.vim	2019-05-31 20:23:22.552256671 +0200
--- src/testdir/test_memory_usage.vim	2019-06-13 21:59:45.622973956 +0200
***************
*** 1,9 ****
  " Tests for memory usage.
  
! if !has('terminal') || has('gui_running') || $ASAN_OPTIONS !=# ''
    " Skip tests on Travis CI ASAN build because it's difficult to estimate
    " memory usage.
!   finish
  endif
  
  source shared.vim
--- 1,15 ----
  " Tests for memory usage.
  
! if !has('terminal')
!   throw 'Skipped, terminal feature missing'
! endif
! if has('gui_running')
!   throw 'Skipped, does not work in GUI'
! endif
! if $ASAN_OPTIONS !=# ''
    " Skip tests on Travis CI ASAN build because it's difficult to estimate
    " memory usage.
!   throw 'Skipped, does not work with ASAN'
  endif
  
  source shared.vim
***************
*** 14,20 ****
  
  if has('win32')
    if !executable('wmic')
!     finish
    endif
    func s:memory_usage(pid) abort
      let cmd = printf('wmic process where processid=%d get WorkingSetSize', a:pid)
--- 20,26 ----
  
  if has('win32')
    if !executable('wmic')
!     throw 'Skipped, wmic program missing'
    endif
    func s:memory_usage(pid) abort
      let cmd = printf('wmic process where processid=%d get WorkingSetSize', a:pid)
***************
*** 22,34 ****
    endfunc
  elseif has('unix')
    if !executable('ps')
!     finish
    endif
    func s:memory_usage(pid) abort
      return s:pick_nr(system('ps -o rss= -p ' . a:pid))
    endfunc
  else
!   finish
  endif
  
  " Wait for memory usage to level off.
--- 28,40 ----
    endfunc
  elseif has('unix')
    if !executable('ps')
!     throw 'Skipped, ps program missing'
    endif
    func s:memory_usage(pid) abort
      return s:pick_nr(system('ps -o rss= -p ' . a:pid))
    endfunc
  else
!   throw 'Skipped, not win32 or unix'
  endif
  
  " Wait for memory usage to level off.
*** ../vim-8.1.1523/src/testdir/test_menu.vim	2019-05-05 14:19:17.594303166 +0200
--- src/testdir/test_menu.vim	2019-06-13 21:59:57.826911156 +0200
***************
*** 1,7 ****
  " Test that the system menu can be loaded.
  
  if !has('menu')
!   finish
  endif
  
  func Test_load_menu()
--- 1,7 ----
  " Test that the system menu can be loaded.
  
  if !has('menu')
!   throw 'Skipped, menu feature missing'
  endif
  
  func Test_load_menu()
*** ../vim-8.1.1523/src/testdir/test_mksession.vim	2019-04-27 20:36:52.534303564 +0200
--- src/testdir/test_mksession.vim	2019-06-13 22:00:13.390831643 +0200
***************
*** 4,10 ****
  scriptencoding latin1
  
  if !has('mksession')
!   finish
  endif
  
  source shared.vim
--- 4,10 ----
  scriptencoding latin1
  
  if !has('mksession')
!   throw 'Skipped, mksession feature missing'
  endif
  
  source shared.vim
*** ../vim-8.1.1523/src/testdir/test_mksession_utf8.vim	2019-05-20 22:12:30.720442793 +0200
--- src/testdir/test_mksession_utf8.vim	2019-06-13 22:00:42.554684224 +0200
***************
*** 4,10 ****
  scriptencoding utf-8
  
  if !has('mksession')
!   finish
  endif
  
  func Test_mksession_utf8()
--- 4,10 ----
  scriptencoding utf-8
  
  if !has('mksession')
!   throw 'Skipped, mksession feature missing'
  endif
  
  func Test_mksession_utf8()
*** ../vim-8.1.1523/src/testdir/test_netbeans.vim	2018-11-26 21:22:03.128367125 +0100
--- src/testdir/test_netbeans.vim	2019-06-13 22:01:21.990487983 +0200
***************
*** 1,15 ****
  " Test the netbeans interface.
  
  if !has('netbeans_intg')
!   finish
  endif
  
  source shared.vim
  
  let s:python = PythonProg()
  if s:python == ''
!   " Can't run this test.
!   finish
  endif
  
  " Run "testfunc" after sarting the server and stop the server afterwards.
--- 1,14 ----
  " Test the netbeans interface.
  
  if !has('netbeans_intg')
!   throw 'Skipped, netbeans_intg feature missing'
  endif
  
  source shared.vim
  
  let s:python = PythonProg()
  if s:python == ''
!   throw 'Skipped, python program missing'
  endif
  
  " Run "testfunc" after sarting the server and stop the server afterwards.
*** ../vim-8.1.1523/src/testdir/test_paste.vim	2019-05-09 18:59:27.228463605 +0200
--- src/testdir/test_paste.vim	2019-06-13 22:02:04.222281492 +0200
***************
*** 1,8 ****
  " Tests for bracketed paste and other forms of pasting.
  
  " Bracketed paste only works with "xterm".  Not in GUI or Windows console.
! if has('gui_running') || has('win32')
!   finish
  endif
  set term=xterm
  
--- 1,11 ----
  " Tests for bracketed paste and other forms of pasting.
  
  " Bracketed paste only works with "xterm".  Not in GUI or Windows console.
! if has('win32')
!   throw 'Skipped, does not work on MS-Windows'
! endif
! if has('gui_running')
!   throw 'Skipped, does not work in the GUI'
  endif
  set term=xterm
  
***************
*** 122,128 ****
    if !has('xterm_clipboard')
      return
    endif
- call ch_logfile('logfile', 'w')
    let display = $DISPLAY
    new
    call CheckCopyPaste()
--- 125,130 ----
***************
*** 133,138 ****
    exe "xrestore " .. display
    call CheckCopyPaste()
  
- call ch_logfile('', '')
    bwipe!
  endfunc
--- 135,139 ----
*** ../vim-8.1.1523/src/testdir/test_perl.vim	2019-02-23 15:04:12.891251272 +0100
--- src/testdir/test_perl.vim	2019-06-13 22:02:20.014205215 +0200
***************
*** 1,7 ****
  " Tests for Perl interface
  
  if !has('perl')
!   finish
  end
  
  " FIXME: RunTest don't see any error when Perl abort...
--- 1,7 ----
  " Tests for Perl interface
  
  if !has('perl')
!   throw 'Skipped, perl feature missing'
  end
  
  " FIXME: RunTest don't see any error when Perl abort...
*** ../vim-8.1.1523/src/testdir/test_profile.vim	2019-05-20 22:12:30.720442793 +0200
--- src/testdir/test_profile.vim	2019-06-13 22:02:35.198132308 +0200
***************
*** 1,6 ****
  " Test Vim profiler
  if !has('profile')
!   finish
  endif
  
  func Test_profile_func()
--- 1,7 ----
  " Test Vim profiler
+ 
  if !has('profile')
!   throw 'Skipped, profile feature missing'
  endif
  
  func Test_profile_func()
*** ../vim-8.1.1523/src/testdir/test_prompt_buffer.vim	2018-06-21 12:07:00.065296930 +0200
--- src/testdir/test_prompt_buffer.vim	2019-06-13 22:02:57.886024178 +0200
***************
*** 1,7 ****
  " Tests for setting 'buftype' to "prompt"
  
  if !has('channel')
!   finish
  endif
  
  source shared.vim
--- 1,7 ----
  " Tests for setting 'buftype' to "prompt"
  
  if !has('channel')
!   throw 'Skipped, channel feature missing'
  endif
  
  source shared.vim
*** ../vim-8.1.1523/src/testdir/test_python2.vim	2019-05-18 15:02:20.970415904 +0200
--- src/testdir/test_python2.vim	2019-06-13 22:03:07.793977265 +0200
***************
*** 2,8 ****
  " TODO: move tests from test87.in here.
  
  if !has('python')
!   finish
  endif
  
  func Test_pydo()
--- 2,8 ----
  " TODO: move tests from test87.in here.
  
  if !has('python')
!   throw 'Skipped, python feature missing'
  endif
  
  func Test_pydo()
*** ../vim-8.1.1523/src/testdir/test_python3.vim	2019-05-18 15:02:20.970415904 +0200
--- src/testdir/test_python3.vim	2019-06-13 22:03:27.393884908 +0200
***************
*** 2,8 ****
  " TODO: move tests from test88.in here.
  
  if !has('python3')
!   finish
  endif
  
  func Test_py3do()
--- 2,8 ----
  " TODO: move tests from test88.in here.
  
  if !has('python3')
!   throw 'Skipped, python3 feature missing'
  endif
  
  func Test_py3do()
*** ../vim-8.1.1523/src/testdir/test_pyx2.vim	2019-05-18 15:02:20.970415904 +0200
--- src/testdir/test_pyx2.vim	2019-06-13 22:03:42.189815583 +0200
***************
*** 2,8 ****
  
  set pyx=2
  if !has('python')
!   finish
  endif
  
  let s:py2pattern = '^2\.[0-7]\.\d\+'
--- 2,8 ----
  
  set pyx=2
  if !has('python')
!   throw 'Skipped, python feature missing'
  endif
  
  let s:py2pattern = '^2\.[0-7]\.\d\+'
*** ../vim-8.1.1523/src/testdir/test_pyx3.vim	2019-05-18 15:02:20.970415904 +0200
--- src/testdir/test_pyx3.vim	2019-06-13 22:03:56.393749397 +0200
***************
*** 2,8 ****
  
  set pyx=3
  if !has('python3')
!   finish
  endif
  
  let s:py2pattern = '^2\.[0-7]\.\d\+'
--- 2,8 ----
  
  set pyx=3
  if !has('python3')
!   throw 'Skipped, python3 feature missing'
  endif
  
  let s:py2pattern = '^2\.[0-7]\.\d\+'
*** ../vim-8.1.1523/src/testdir/test_quickfix.vim	2019-05-20 22:12:30.720442793 +0200
--- src/testdir/test_quickfix.vim	2019-06-13 22:04:22.693627665 +0200
***************
*** 1,7 ****
  " Test for the quickfix feature.
  
  if !has('quickfix')
!   finish
  endif
  
  set encoding=utf-8
--- 1,7 ----
  " Test for the quickfix feature.
  
  if !has('quickfix')
!   throw 'Skipped, quickfix feature missing'
  endif
  
  set encoding=utf-8
*** ../vim-8.1.1523/src/testdir/test_quotestar.vim	2019-04-28 13:00:08.627933382 +0200
--- src/testdir/test_quotestar.vim	2019-06-13 22:04:43.573531754 +0200
***************
*** 2,8 ****
  
  source shared.vim
  if !WorkingClipboard()
!   finish
  endif
  
  source shared.vim
--- 2,8 ----
  
  source shared.vim
  if !WorkingClipboard()
!   throw 'Skipped, no working clipboard'
  endif
  
  source shared.vim
*** ../vim-8.1.1523/src/testdir/test_reltime.vim	2016-03-03 13:05:57.000000000 +0100
--- src/testdir/test_reltime.vim	2019-06-13 22:05:16.953379723 +0200
***************
*** 1,7 ****
  " Tests for reltime()
  
! if !has('reltime') || !has('float')
!   finish
  endif
  
  func Test_reltime()
--- 1,10 ----
  " Tests for reltime()
  
! if !has('reltime')
!   throw 'Skipped, reltime feature missing'
! endif
! if !has('float')
!   throw 'Skipped, float feature missing'
  endif
  
  func Test_reltime()
*** ../vim-8.1.1523/src/testdir/test_ruby.vim	2019-03-26 22:50:19.151698126 +0100
--- src/testdir/test_ruby.vim	2019-06-13 22:05:40.805272037 +0200
***************
*** 1,7 ****
  " Tests for ruby interface
  
  if !has('ruby')
!   finish
  end
  
  func Test_ruby_change_buffer()
--- 1,7 ----
  " Tests for ruby interface
  
  if !has('ruby')
!   throw 'Skipped, ruby feature missing'
  end
  
  func Test_ruby_change_buffer()
*** ../vim-8.1.1523/src/testdir/test_sha256.vim	2017-06-27 18:18:14.000000000 +0200
--- src/testdir/test_sha256.vim	2019-06-13 22:06:31.217046783 +0200
***************
*** 1,7 ****
  " Tests for the sha256() function.
  
! if !has('cryptv') || !exists('*sha256')
!   finish
  endif
  
  function Test_sha256()
--- 1,10 ----
  " Tests for the sha256() function.
  
! if !has('cryptv')
!   throw 'Skipped, cryptv feature missing'
! endif
! if !exists('*sha256')
!   throw 'Skipped, sha256 function missing'
  endif
  
  function Test_sha256()
*** ../vim-8.1.1523/src/testdir/test_shortpathname.vim	2018-01-31 19:23:08.000000000 +0100
--- src/testdir/test_shortpathname.vim	2019-06-13 22:06:57.552930322 +0200
***************
*** 2,8 ****
  " Only for use on Win32 systems!
  
  if !has('win32')
!   finish
  endif
  
  func TestIt(file, bits, expected)
--- 2,8 ----
  " Only for use on Win32 systems!
  
  if !has('win32')
!   throw 'Skipped, not on MS-Windows'
  endif
  
  func TestIt(file, bits, expected)
*** ../vim-8.1.1523/src/testdir/test_signals.vim	2019-04-27 17:32:36.390686708 +0200
--- src/testdir/test_signals.vim	2019-06-13 22:07:15.652850724 +0200
***************
*** 1,7 ****
  " Test signal handling.
  
  if !has('unix')
!   finish
  endif
  
  source shared.vim
--- 1,7 ----
  " Test signal handling.
  
  if !has('unix')
!   throw 'Skipped, not on Unix'
  endif
  
  source shared.vim
*** ../vim-8.1.1523/src/testdir/test_signs.vim	2019-06-07 21:37:10.409300183 +0200
--- src/testdir/test_signs.vim	2019-06-13 22:07:30.400786155 +0200
***************
*** 1,7 ****
  " Test for signs
  
  if !has('signs')
!   finish
  endif
  
  func Test_sign()
--- 1,7 ----
  " Test for signs
  
  if !has('signs')
!   throw 'Skipped, signs feature missing'
  endif
  
  func Test_sign()
*** ../vim-8.1.1523/src/testdir/test_spell.vim	2019-04-10 22:33:37.514161278 +0200
--- src/testdir/test_spell.vim	2019-06-13 22:07:48.396707646 +0200
***************
*** 1,7 ****
  " Test spell checking
  
  if !has('spell')
!   finish
  endif
  
  func TearDown()
--- 1,7 ----
  " Test spell checking
  
  if !has('spell')
!   throw 'Skipped, spell feature missing'
  endif
  
  func TearDown()
*** ../vim-8.1.1523/src/testdir/test_syntax.vim	2019-06-06 16:12:05.927134625 +0200
--- src/testdir/test_syntax.vim	2019-06-13 22:08:00.956653076 +0200
***************
*** 1,7 ****
  " Test for syntax and syntax iskeyword option
  
  if !has("syntax")
!   finish
  endif
  
  source view_util.vim
--- 1,7 ----
  " Test for syntax and syntax iskeyword option
  
  if !has("syntax")
!   throw 'Skipped, syntax feature missing'
  endif
  
  source view_util.vim
*** ../vim-8.1.1523/src/testdir/test_tcl.vim	2018-07-25 22:02:32.235966277 +0200
--- src/testdir/test_tcl.vim	2019-06-13 22:08:14.344595054 +0200
***************
*** 1,7 ****
  " Tests for the Tcl interface.
  
  if !has('tcl')
!   finish
  end
  
  " Helper function as there is no builtin tcleval() function similar
--- 1,7 ----
  " Tests for the Tcl interface.
  
  if !has('tcl')
!   throw 'Skipped, tcl feature missing'
  end
  
  " Helper function as there is no builtin tcleval() function similar
*** ../vim-8.1.1523/src/testdir/test_termcodes.vim	2019-06-06 12:36:11.887259331 +0200
--- src/testdir/test_termcodes.vim	2019-06-13 22:09:03.416383815 +0200
***************
*** 1,8 ****
  " Tests for decoding escape sequences sent by the terminal.
  
  " This only works for Unix in a terminal
! if has('gui_running') || !has('unix')
!   finish
  endif
  
  source shared.vim
--- 1,11 ----
  " Tests for decoding escape sequences sent by the terminal.
  
  " This only works for Unix in a terminal
! if has('gui_running')
!   throw 'Skipped, does not work in the GUI'
! endif
! if !has('unix')
!   throw 'Skipped, not on Unix'
  endif
  
  source shared.vim
*** ../vim-8.1.1523/src/testdir/test_terminal.vim	2019-06-06 16:12:05.927134625 +0200
--- src/testdir/test_terminal.vim	2019-06-13 22:09:16.612327342 +0200
***************
*** 1,7 ****
  " Tests for the terminal window.
  
  if !has('terminal')
!   finish
  endif
  
  source shared.vim
--- 1,7 ----
  " Tests for the terminal window.
  
  if !has('terminal')
!   throw 'Skipped, terminal feature missing'
  endif
  
  source shared.vim
*** ../vim-8.1.1523/src/testdir/test_terminal_fail.vim	2017-09-09 17:57:51.000000000 +0200
--- src/testdir/test_terminal_fail.vim	2019-06-13 22:10:06.492115170 +0200
***************
*** 3,9 ****
  " freed.  Since the process exists right away it's not a real leak.
  
  if !has('terminal')
!   finish
  endif
  
  source shared.vim
--- 3,9 ----
  " freed.  Since the process exists right away it's not a real leak.
  
  if !has('terminal')
!   throw 'Skipped, terminal feature missing'
  endif
  
  source shared.vim
*** ../vim-8.1.1523/src/testdir/test_textobjects.vim	2019-02-22 15:04:09.714683845 +0100
--- src/testdir/test_textobjects.vim	2019-06-13 22:10:14.572080979 +0200
***************
*** 1,7 ****
  " Test for textobjects
  
  if !has('textobjects')
!   finish
  endif
  
  func CpoM(line, useM, expected)
--- 1,7 ----
  " Test for textobjects
  
  if !has('textobjects')
!   throw 'Skipped, textobjects feature missing'
  endif
  
  func CpoM(line, useM, expected)
*** ../vim-8.1.1523/src/testdir/test_textprop.vim	2019-06-06 16:12:05.927134625 +0200
--- src/testdir/test_textprop.vim	2019-06-13 22:10:29.576017621 +0200
***************
*** 2,8 ****
  " buffer.
  
  if !has('textprop')
!   finish
  endif
  
  source screendump.vim
--- 2,8 ----
  " buffer.
  
  if !has('textprop')
!   throw 'Skipped, textprop feature missing'
  endif
  
  source screendump.vim
*** ../vim-8.1.1523/src/testdir/test_timers.vim	2019-06-06 16:12:05.927134625 +0200
--- src/testdir/test_timers.vim	2019-06-13 22:10:49.451934023 +0200
***************
*** 1,7 ****
  " Test for timers
  
  if !has('timers')
!   finish
  endif
  
  source shared.vim
--- 1,7 ----
  " Test for timers
  
  if !has('timers')
!   throw 'Skipped, timers feature missing'
  endif
  
  source shared.vim
*** ../vim-8.1.1523/src/testdir/test_vartabs.vim	2019-04-20 23:47:42.518391308 +0200
--- src/testdir/test_vartabs.vim	2019-06-13 22:10:57.855898782 +0200
***************
*** 1,7 ****
  " Test for variable tabstops
  
  if !has("vartabs")
!   finish
  endif
  
  source view_util.vim
--- 1,7 ----
  " Test for variable tabstops
  
  if !has("vartabs")
!   throw 'Skipped, vartabs feature missing'
  endif
  
  source view_util.vim
*** ../vim-8.1.1523/src/testdir/test_winbar.vim	2019-06-02 20:33:27.018782294 +0200
--- src/testdir/test_winbar.vim	2019-06-13 22:11:22.927793817 +0200
***************
*** 1,7 ****
  " Test WinBar
  
  if !has('menu')
!   finish
  endif
  
  source shared.vim
--- 1,7 ----
  " Test WinBar
  
  if !has('menu')
!   throw 'Skipped, menu feature missing'
  endif
  
  source shared.vim
*** ../vim-8.1.1523/src/testdir/test_windows_home.vim	2017-08-30 14:49:56.000000000 +0200
--- src/testdir/test_windows_home.vim	2019-06-13 22:11:43.339708630 +0200
***************
*** 1,7 ****
  " Test for $HOME on Windows.
  
  if !has('win32')
!   finish
  endif
  
  let s:env = {}
--- 1,7 ----
  " Test for $HOME on Windows.
  
  if !has('win32')
!   throw 'Skipped, not on MS-Windows'
  endif
  
  let s:env = {}
*** ../vim-8.1.1523/src/testdir/test_xxd.vim	2019-05-20 22:12:30.724442773 +0200
--- src/testdir/test_xxd.vim	2019-06-13 22:12:10.723594808 +0200
***************
*** 2,8 ****
  if empty($XXD) && executable('..\xxd\xxd.exe')
    let s:xxd_cmd = '..\xxd\xxd.exe'
  elseif empty($XXD) || !executable($XXD)
!   finish
  else
    let s:xxd_cmd = $XXD
  endif
--- 2,8 ----
  if empty($XXD) && executable('..\xxd\xxd.exe')
    let s:xxd_cmd = '..\xxd\xxd.exe'
  elseif empty($XXD) || !executable($XXD)
!   throw 'Skipped, xxd program missing'
  else
    let s:xxd_cmd = $XXD
  endif
*** ../vim-8.1.1523/src/version.c	2019-06-12 23:39:42.257782258 +0200
--- src/version.c	2019-06-13 22:17:29.034299363 +0200
***************
*** 779,780 ****
--- 779,782 ----
  {   /* Add new patch number below this line */
+ /**/
+     1524,
  /**/

-- 
An error has occurred.  Hit any user to continue.

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\  an exciting new programming language -- http://www.Zimbu.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
