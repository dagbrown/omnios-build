To: vim_dev@googlegroups.com
Subject: Patch 8.1.1735
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
------------

Patch 8.1.1735 (after 8.1.1734)
Problem:    Can't build with tiny features.
Solution:   Add missing #ifdefs.
Files:	    src/json.c, src/highlight.c


*** ../vim-8.1.1734/src/json.c	2019-07-22 23:03:53.322360395 +0200
--- src/json.c	2019-07-22 23:12:21.688528591 +0200
***************
*** 1126,1132 ****
      reader->js_used = used_save;
      return ret;
  }
- #endif
  
  /*
   * "js_decode()" function
--- 1126,1131 ----
***************
*** 1176,1178 ****
--- 1175,1178 ----
      rettv->v_type = VAR_STRING;
      rettv->vval.v_string = json_encode(&argvars[0], 0);
  }
+ #endif
*** ../vim-8.1.1734/src/highlight.c	2019-07-22 23:03:53.322360395 +0200
--- src/highlight.c	2019-07-22 23:15:04.563822881 +0200
***************
*** 3948,3954 ****
--- 3948,3957 ----
  	cur = cur->next;
      return cur;
  }
+ #endif
  
+ #if defined(FEAT_EVAL) || defined(PROTO)
+ # ifdef FEAT_SEARCH_EXTRA
      static int
  matchadd_dict_arg(typval_T *tv, char_u **conceal_char, win_T **win)
  {
***************
*** 3984,3990 ****
      void
  f_getmatches(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
  {
! #ifdef FEAT_SEARCH_EXTRA
      dict_T	*dict;
      matchitem_T	*cur;
      int		i;
--- 3987,3993 ----
      void
  f_getmatches(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
  {
! # ifdef FEAT_SEARCH_EXTRA
      dict_T	*dict;
      matchitem_T	*cur;
      int		i;
***************
*** 4031,4037 ****
  	dict_add_string(dict, "group", syn_id2name(cur->hlg_id));
  	dict_add_number(dict, "priority", (long)cur->priority);
  	dict_add_number(dict, "id", (long)cur->id);
! # if defined(FEAT_CONCEAL)
  	if (cur->conceal_char)
  	{
  	    char_u buf[MB_MAXBYTES + 1];
--- 4034,4040 ----
  	dict_add_string(dict, "group", syn_id2name(cur->hlg_id));
  	dict_add_number(dict, "priority", (long)cur->priority);
  	dict_add_number(dict, "id", (long)cur->id);
! #  if defined(FEAT_CONCEAL)
  	if (cur->conceal_char)
  	{
  	    char_u buf[MB_MAXBYTES + 1];
***************
*** 4039,4049 ****
  	    buf[(*mb_char2bytes)((int)cur->conceal_char, buf)] = NUL;
  	    dict_add_string(dict, "conceal", (char_u *)&buf);
  	}
! # endif
  	list_append_dict(rettv->vval.v_list, dict);
  	cur = cur->next;
      }
! #endif
  }
  
  /*
--- 4042,4052 ----
  	    buf[(*mb_char2bytes)((int)cur->conceal_char, buf)] = NUL;
  	    dict_add_string(dict, "conceal", (char_u *)&buf);
  	}
! #  endif
  	list_append_dict(rettv->vval.v_list, dict);
  	cur = cur->next;
      }
! # endif
  }
  
  /*
***************
*** 4052,4058 ****
      void
  f_matchadd(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
  {
! #ifdef FEAT_SEARCH_EXTRA
      char_u	buf[NUMBUFLEN];
      char_u	*grp = tv_get_string_buf_chk(&argvars[0], buf);	/* group */
      char_u	*pat = tv_get_string_buf_chk(&argvars[1], buf);	/* pattern */
--- 4055,4061 ----
      void
  f_matchadd(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
  {
! # ifdef FEAT_SEARCH_EXTRA
      char_u	buf[NUMBUFLEN];
      char_u	*grp = tv_get_string_buf_chk(&argvars[0], buf);	/* group */
      char_u	*pat = tv_get_string_buf_chk(&argvars[1], buf);	/* pattern */
***************
*** 4087,4093 ****
  
      rettv->vval.v_number = match_add(win, grp, pat, prio, id, NULL,
  								conceal_char);
! #endif
  }
  
  /*
--- 4090,4096 ----
  
      rettv->vval.v_number = match_add(win, grp, pat, prio, id, NULL,
  								conceal_char);
! # endif
  }
  
  /*
***************
*** 4096,4102 ****
      void
  f_matchaddpos(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
  {
! #ifdef FEAT_SEARCH_EXTRA
      char_u	buf[NUMBUFLEN];
      char_u	*group;
      int		prio = 10;
--- 4099,4105 ----
      void
  f_matchaddpos(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
  {
! # ifdef FEAT_SEARCH_EXTRA
      char_u	buf[NUMBUFLEN];
      char_u	*group;
      int		prio = 10;
***************
*** 4145,4151 ****
  
      rettv->vval.v_number = match_add(win, group, NULL, prio, id, l,
  								conceal_char);
! #endif
  }
  
  /*
--- 4148,4154 ----
  
      rettv->vval.v_number = match_add(win, group, NULL, prio, id, l,
  								conceal_char);
! # endif
  }
  
  /*
***************
*** 4156,4162 ****
  {
      if (rettv_list_alloc(rettv) == OK)
      {
! #ifdef FEAT_SEARCH_EXTRA
  	int	    id = (int)tv_get_number(&argvars[0]);
  	matchitem_T *m;
  
--- 4159,4165 ----
  {
      if (rettv_list_alloc(rettv) == OK)
      {
! # ifdef FEAT_SEARCH_EXTRA
  	int	    id = (int)tv_get_number(&argvars[0]);
  	matchitem_T *m;
  
***************
*** 4174,4180 ****
  		list_append_string(rettv->vval.v_list, NULL, -1);
  	    }
  	}
! #endif
      }
  }
  
--- 4177,4183 ----
  		list_append_string(rettv->vval.v_list, NULL, -1);
  	    }
  	}
! # endif
      }
  }
  
***************
*** 4184,4190 ****
      void
  f_matchdelete(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
  {
! #ifdef FEAT_SEARCH_EXTRA
      win_T   *win = get_optional_window(argvars, 1);
  
      if (win == NULL)
--- 4187,4193 ----
      void
  f_matchdelete(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
  {
! # ifdef FEAT_SEARCH_EXTRA
      win_T   *win = get_optional_window(argvars, 1);
  
      if (win == NULL)
***************
*** 4192,4196 ****
      else
  	rettv->vval.v_number = match_delete(win,
  				       (int)tv_get_number(&argvars[0]), TRUE);
! #endif
  }
--- 4195,4200 ----
      else
  	rettv->vval.v_number = match_delete(win,
  				       (int)tv_get_number(&argvars[0]), TRUE);
! # endif
  }
+ #endif
*** ../vim-8.1.1734/src/version.c	2019-07-22 23:03:53.326360384 +0200
--- src/version.c	2019-07-22 23:16:14.583508746 +0200
***************
*** 779,780 ****
--- 779,782 ----
  {   /* Add new patch number below this line */
+ /**/
+     1735,
  /**/

-- 
SUPERIMPOSE "England AD 787".  After a few more seconds we hear hoofbeats in
the distance.  They come slowly closer.  Then out of the mist comes KING
ARTHUR followed by a SERVANT who is banging two half coconuts together.
                 "Monty Python and the Holy Grail" PYTHON (MONTY) PICTURES LTD

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\  an exciting new programming language -- http://www.Zimbu.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
