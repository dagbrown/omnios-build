To: vim_dev@googlegroups.com
Subject: Patch 8.1.0941
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
------------

Patch 8.1.0941
Problem:    Macros for MS-Windows are inconsistent, using "32", "3264 and
            others.
Solution:   Use MSWIN for all MS-Windows builds.  Use FEAT_GUI_MSWIN for the
            GUI build. (Hirohito Higashi, closes #3932)
Files:	    src/GvimExt/gvimext.h, src/Make_bc5.mak, src/Make_cyg_ming.mak,
            src/Make_ivc.mak, src/Make_mvc.mak, src/beval.h, src/blowfish.c,
            src/channel.c, src/edit.c, src/eval.c, src/evalfunc.c,
            src/ex_cmds.c, src/ex_cmds2.c, src/ex_docmd.c, src/ex_getln.c,
            src/feature.h, src/fileio.c, src/getchar.c, src/glbl_ime.cpp,
            src/globals.h, src/gui.c, src/gui.h, src/gui_beval.c,
            src/gui_gtk.c, src/gui_gtk_f.c, src/gui_gtk_x11.c,
            src/if_cscope.c, src/if_cscope.h, src/if_lua.c, src/if_mzsch.c,
            src/if_ole.cpp, src/if_perl.xs, src/if_python.c, src/if_python3.c,
            src/if_ruby.c, src/if_tcl.c, src/macros.h, src/main.c,
            src/mbyte.c, src/memfile.c, src/memline.c, src/menu.c,
            src/message.c, src/misc1.c, src/misc2.c, src/nbdebug.c,
            src/netbeans.c, src/normal.c, src/option.c, src/option.h,
            src/os_mswin.c, src/os_unix.c, src/os_w32exe.c, src/os_win32.c,
            src/os_win32.h, src/proto.h, src/screen.c, src/search.c,
            src/structs.h, src/syntax.c, src/term.c, src/terminal.c, src/ui.c,
            src/undo.c, src/version.c, src/vim.h, src/vim.rc, src/winclip.c



*** ../vim-8.1.0940/src/GvimExt/gvimext.h	2016-02-21 20:28:32.000000000 +0100
--- src/GvimExt/gvimext.h	2019-02-17 17:29:18.536788953 +0100
***************
*** 31,37 ****
  # define STRICT
  #endif
  
! #define INC_OLE2	// WIN32, get ole2 from windows.h
  
  /* Visual Studio 2005 has 'deprecated' many of the standard CRT functions */
  #if defined(_MSC_VER) && _MSC_VER >= 1400
--- 31,37 ----
  # define STRICT
  #endif
  
! #define INC_OLE2	// MS-Windows, get ole2 from windows.h
  
  /* Visual Studio 2005 has 'deprecated' many of the standard CRT functions */
  #if defined(_MSC_VER) && _MSC_VER >= 1400
*** ../vim-8.1.0940/src/Make_bc5.mak	2019-02-16 15:09:21.221946179 +0100
--- src/Make_bc5.mak	2019-02-17 17:29:18.536788953 +0100
***************
*** 405,411 ****
  !endif
  
  !if ("$(GUI)"=="yes")
! DEFINES = $(DEFINES) -DFEAT_GUI_W32 -DFEAT_CLIPBOARD
  !if ("$(DEBUG)"=="yes")
  TARGET = gvimd.exe
  !else
--- 405,411 ----
  !endif
  
  !if ("$(GUI)"=="yes")
! DEFINES = $(DEFINES) -DFEAT_GUI -DFEAT_CLIPBOARD
  !if ("$(DEBUG)"=="yes")
  TARGET = gvimd.exe
  !else
*** ../vim-8.1.0940/src/Make_cyg_ming.mak	2019-02-16 15:09:21.221946179 +0100
--- src/Make_cyg_ming.mak	2019-02-17 17:29:18.536788953 +0100
***************
*** 491,497 ****
  
  # See feature.h for a list of options.
  # Any other defines can be included here.
! DEF_GUI=-DFEAT_GUI_W32 -DFEAT_CLIPBOARD
  DEFINES=-DWIN32 -DWINVER=$(WINVER) -D_WIN32_WINNT=$(WINVER) \
  	-DHAVE_PATHDEF -DFEAT_$(FEATURES) -DHAVE_STDINT_H
  ifeq ($(ARCH),x86-64)
--- 491,497 ----
  
  # See feature.h for a list of options.
  # Any other defines can be included here.
! DEF_GUI=-DFEAT_GUI -DFEAT_CLIPBOARD
  DEFINES=-DWIN32 -DWINVER=$(WINVER) -D_WIN32_WINNT=$(WINVER) \
  	-DHAVE_PATHDEF -DFEAT_$(FEATURES) -DHAVE_STDINT_H
  ifeq ($(ARCH),x86-64)
*** ../vim-8.1.0940/src/Make_ivc.mak	2019-02-16 15:09:21.221946179 +0100
--- src/Make_ivc.mak	2019-02-17 17:29:18.536788953 +0100
***************
*** 92,99 ****
  # ADD LINK32  oldnames.lib kernel32.lib user32.lib gdi32.lib version.lib comdlg32.lib comctl32.lib advapi32.lib shell32.lib ole32.lib uuid.lib /nologo /machine:I386 /nodefaultlib
  # SUBTRACT LINK32 /incremental:yes
  
! RSC_PROJ= /l 0x409 /d "FEAT_GUI_W32"
! # ADD RSC /l 0x409 /d "FEAT_GUI_W32"
  
  !IF  "$(CFG)" == "Vim - Win32 Release gvim OLE"
  
--- 92,99 ----
  # ADD LINK32  oldnames.lib kernel32.lib user32.lib gdi32.lib version.lib comdlg32.lib comctl32.lib advapi32.lib shell32.lib ole32.lib uuid.lib /nologo /machine:I386 /nodefaultlib
  # SUBTRACT LINK32 /incremental:yes
  
! RSC_PROJ= /l 0x409 /d "FEAT_GUI"
! # ADD RSC /l 0x409 /d "FEAT_GUI"
  
  !IF  "$(CFG)" == "Vim - Win32 Release gvim OLE"
  
***************
*** 105,112 ****
  VIM=gvim
  EXTRAS="$(INTDIR)/if_ole.obj" "$(INTDIR)/vim.res" "$(INTDIR)/gui.obj" "$(INTDIR)/gui_w32.obj" "$(INTDIR)/gui_beval.obj" "$(INTDIR)/os_w32exe.obj"
  
! CPP_PROJ=$(CPP_PROJ) /Zi /O2 /D "NDEBUG" /D "FEAT_GUI_W32" /D "DYNAMIC_GETTEXT" /D "FEAT_OLE" /Fd.\oleRel/ /Fo.\oleRel/
! # ADD CPP            /Zi /O2 /D "NDEBUG" /D "FEAT_GUI_W32" /D "DYNAMIC_GETTEXT" /D "FEAT_OLE" /Fd.\oleRel/ /Fo.\oleRel/
  
  RSC_PROJ=$(RSC_PROJ) /I ".\oleRel" /d "NDEBUG" /d "FEAT_OLE" /fo.\oleRel\vim.res
  # ADD RSC            /I ".\oleRel" /d "NDEBUG" /d "FEAT_OLE" /fo.\oleRel\vim.res
--- 105,112 ----
  VIM=gvim
  EXTRAS="$(INTDIR)/if_ole.obj" "$(INTDIR)/vim.res" "$(INTDIR)/gui.obj" "$(INTDIR)/gui_w32.obj" "$(INTDIR)/gui_beval.obj" "$(INTDIR)/os_w32exe.obj"
  
! CPP_PROJ=$(CPP_PROJ) /Zi /O2 /D "NDEBUG" /D "FEAT_GUI" /D "DYNAMIC_GETTEXT" /D "FEAT_OLE" /Fd.\oleRel/ /Fo.\oleRel/
! # ADD CPP            /Zi /O2 /D "NDEBUG" /D "FEAT_GUI" /D "DYNAMIC_GETTEXT" /D "FEAT_OLE" /Fd.\oleRel/ /Fo.\oleRel/
  
  RSC_PROJ=$(RSC_PROJ) /I ".\oleRel" /d "NDEBUG" /d "FEAT_OLE" /fo.\oleRel\vim.res
  # ADD RSC            /I ".\oleRel" /d "NDEBUG" /d "FEAT_OLE" /fo.\oleRel\vim.res
***************
*** 124,131 ****
  VIM=gvimd
  EXTRAS="$(INTDIR)/if_ole.obj" "$(INTDIR)/vim.res" "$(INTDIR)/gui.obj" "$(INTDIR)/gui_w32.obj" "$(INTDIR)/gui_beval.obj" "$(INTDIR)/os_w32exe.obj"
  
! CPP_PROJ=$(CPP_PROJ) /Zi /Od /D "_DEBUG" /D "FEAT_GUI_W32" /D "DYNAMIC_GETTEXT" /D "FEAT_OLE" /Fd.\oleDbg/ /Fo.\oleDbg/
! # ADD CPP            /Zi /Od /D "_DEBUG" /D "FEAT_GUI_W32" /D "DYNAMIC_GETTEXT" /D "FEAT_OLE" /Fd.\oleDbg/ /Fo.\oleDbg/
  
  RSC_PROJ=$(RSC_PROJ) /I .\oleDbg /d "_DEBUG" /d "FEAT_OLE" /fo.\oleDbg\vim.res
  # ADD RSC            /I .\oleDbg /d "_DEBUG" /d "FEAT_OLE" /fo.\oleDbg\vim.res
--- 124,131 ----
  VIM=gvimd
  EXTRAS="$(INTDIR)/if_ole.obj" "$(INTDIR)/vim.res" "$(INTDIR)/gui.obj" "$(INTDIR)/gui_w32.obj" "$(INTDIR)/gui_beval.obj" "$(INTDIR)/os_w32exe.obj"
  
! CPP_PROJ=$(CPP_PROJ) /Zi /Od /D "_DEBUG" /D "FEAT_GUI" /D "DYNAMIC_GETTEXT" /D "FEAT_OLE" /Fd.\oleDbg/ /Fo.\oleDbg/
! # ADD CPP            /Zi /Od /D "_DEBUG" /D "FEAT_GUI" /D "DYNAMIC_GETTEXT" /D "FEAT_OLE" /Fd.\oleDbg/ /Fo.\oleDbg/
  
  RSC_PROJ=$(RSC_PROJ) /I .\oleDbg /d "_DEBUG" /d "FEAT_OLE" /fo.\oleDbg\vim.res
  # ADD RSC            /I .\oleDbg /d "_DEBUG" /d "FEAT_OLE" /fo.\oleDbg\vim.res
***************
*** 144,151 ****
  VIM=gvim
  EXTRAS="$(INTDIR)/vim.res" "$(INTDIR)/gui.obj" "$(INTDIR)/gui_w32.obj" "$(INTDIR)/gui_beval.obj" "$(INTDIR)/os_w32exe.obj"
  
! CPP_PROJ=$(CPP_PROJ) /Zi /O2 /D "NDEBUG" /D "FEAT_GUI_W32" /Fd.\gRel/ /Fo.\gRel/
! # ADD CPP            /Zi /O2 /D "NDEBUG" /D "FEAT_GUI_W32" /Fd.\gRel/ /Fo.\gRel/
  
  RSC_PROJ=$(RSC_PROJ) /d "NDEBUG" /fo.\gRel\vim.res
  # ADD RSC            /d "NDEBUG" /fo.\gRel\vim.res
--- 144,151 ----
  VIM=gvim
  EXTRAS="$(INTDIR)/vim.res" "$(INTDIR)/gui.obj" "$(INTDIR)/gui_w32.obj" "$(INTDIR)/gui_beval.obj" "$(INTDIR)/os_w32exe.obj"
  
! CPP_PROJ=$(CPP_PROJ) /Zi /O2 /D "NDEBUG" /D "FEAT_GUI" /Fd.\gRel/ /Fo.\gRel/
! # ADD CPP            /Zi /O2 /D "NDEBUG" /D "FEAT_GUI" /Fd.\gRel/ /Fo.\gRel/
  
  RSC_PROJ=$(RSC_PROJ) /d "NDEBUG" /fo.\gRel\vim.res
  # ADD RSC            /d "NDEBUG" /fo.\gRel\vim.res
***************
*** 163,170 ****
  VIM=gvimd
  EXTRAS="$(INTDIR)/vim.res" "$(INTDIR)/gui.obj" "$(INTDIR)/gui_w32.obj" "$(INTDIR)/gui_beval.obj" "$(INTDIR)/os_w32exe.obj"
  
! CPP_PROJ=$(CPP_PROJ) /Zi /Od /D "_DEBUG" /D "FEAT_GUI_W32" /Fd.\gDbg/ /Fo.\gDbg/
! # ADD CPP            /Zi /Od /D "_DEBUG" /D "FEAT_GUI_W32" /Fd.\gDbg/ /Fo.\gDbg/
  
  RSC_PROJ=$(RSC_PROJ) /d "_DEBUG" /fo.\gDbg\vim.res
  # ADD RSC            /d "_DEBUG" /fo.\gDbg\vim.res
--- 163,170 ----
  VIM=gvimd
  EXTRAS="$(INTDIR)/vim.res" "$(INTDIR)/gui.obj" "$(INTDIR)/gui_w32.obj" "$(INTDIR)/gui_beval.obj" "$(INTDIR)/os_w32exe.obj"
  
! CPP_PROJ=$(CPP_PROJ) /Zi /Od /D "_DEBUG" /D "FEAT_GUI" /Fd.\gDbg/ /Fo.\gDbg/
! # ADD CPP            /Zi /Od /D "_DEBUG" /D "FEAT_GUI" /Fd.\gDbg/ /Fo.\gDbg/
  
  RSC_PROJ=$(RSC_PROJ) /d "_DEBUG" /fo.\gDbg\vim.res
  # ADD RSC            /d "_DEBUG" /fo.\gDbg\vim.res
***************
*** 508,514 ****
  # Begin Custom Build
  
  "$(INTDIR)\if_ole.obj" : $(SOURCE) "$(INTDIR)" "$(INTDIR)\if_ole.h"
!  cl.exe /nologo /MT /W3 /GX /I ".\proto" /D "WIN32" /c /Zi /O2 /D "NDEBUG" /D "FEAT_GUI_W32" /D "FEAT_OLE" /Fd.\oleRel/ /Fo.\oleRel/ /I ".\oleRel" .\if_ole.cpp
   @rem This is the default rule with /I "$(IntDir)" added
  
  # End Custom Build
--- 508,514 ----
  # Begin Custom Build
  
  "$(INTDIR)\if_ole.obj" : $(SOURCE) "$(INTDIR)" "$(INTDIR)\if_ole.h"
!  cl.exe /nologo /MT /W3 /GX /I ".\proto" /D "WIN32" /c /Zi /O2 /D "NDEBUG" /D "FEAT_GUI" /D "FEAT_OLE" /Fd.\oleRel/ /Fo.\oleRel/ /I ".\oleRel" .\if_ole.cpp
   @rem This is the default rule with /I "$(IntDir)" added
  
  # End Custom Build
***************
*** 519,525 ****
  # Begin Custom Build
  
  "$(INTDIR)\if_ole.obj" : $(SOURCE) "$(INTDIR)" "$(INTDIR)\if_ole.h"
!  cl.exe /nologo /MT /W3 /GX /I ".\proto" /D "WIN32" /c /Zi /Od /D "_DEBUG" /D "FEAT_GUI_W32" /D "FEAT_OLE" /Fd.\oleDbg/ /Fo.\oleDbg/ /I ".\oleDbg" .\if_ole.cpp
   @rem This is the default rule with /I "$(IntDir)" added
  
  # End Custom Build
--- 519,525 ----
  # Begin Custom Build
  
  "$(INTDIR)\if_ole.obj" : $(SOURCE) "$(INTDIR)" "$(INTDIR)\if_ole.h"
!  cl.exe /nologo /MT /W3 /GX /I ".\proto" /D "WIN32" /c /Zi /Od /D "_DEBUG" /D "FEAT_GUI" /D "FEAT_OLE" /Fd.\oleDbg/ /Fo.\oleDbg/ /I ".\oleDbg" .\if_ole.cpp
   @rem This is the default rule with /I "$(IntDir)" added
  
  # End Custom Build
*** ../vim-8.1.0940/src/Make_mvc.mak	2019-02-16 15:09:21.221946179 +0100
--- src/Make_mvc.mak	2019-02-17 17:29:18.536788953 +0100
***************
*** 791,798 ****
  
  !if "$(GUI)" == "yes"
  SUBSYSTEM = windows
! CFLAGS = $(CFLAGS) -DFEAT_GUI_W32
! RCFLAGS = $(RCFLAGS) -DFEAT_GUI_W32
  VIM = g$(VIM)
  GUI_INCL = \
  	gui.h
--- 791,798 ----
  
  !if "$(GUI)" == "yes"
  SUBSYSTEM = windows
! CFLAGS = $(CFLAGS) -DFEAT_GUI
! RCFLAGS = $(RCFLAGS) -DFEAT_GUI
  VIM = g$(VIM)
  GUI_INCL = \
  	gui.h
*** ../vim-8.1.0940/src/beval.h	2018-12-28 19:13:28.591806287 +0100
--- src/beval.h	2019-02-17 17:29:18.536788953 +0100
***************
*** 43,49 ****
      int			y;
      unsigned int	state;		/* Button/Modifier key state */
  # else
! #  if !defined(FEAT_GUI_W32)
      Widget		target;		/* widget we are monitoring */
      Widget		balloonShell;
      Widget		balloonLabel;
--- 43,49 ----
      int			y;
      unsigned int	state;		/* Button/Modifier key state */
  # else
! #  if !defined(FEAT_GUI_MSWIN)
      Widget		target;		/* widget we are monitoring */
      Widget		balloonShell;
      Widget		balloonLabel;
***************
*** 63,69 ****
      BeState		showState;	/* tells us whats currently going on */
  #  endif
  # endif
! # if !defined(FEAT_GUI_GTK) && !defined(FEAT_GUI_W32)
      Dimension		screen_width;	/* screen width in pixels */
      Dimension		screen_height;	/* screen height in pixels */
  # endif
--- 63,69 ----
      BeState		showState;	/* tells us whats currently going on */
  #  endif
  # endif
! # if !defined(FEAT_GUI_GTK) && !defined(FEAT_GUI_MSWIN)
      Dimension		screen_width;	/* screen width in pixels */
      Dimension		screen_height;	/* screen height in pixels */
  # endif
***************
*** 76,82 ****
      int			*vts;		// vartabstop setting for this buffer
  #endif
      char_u		*msg;
! #ifdef FEAT_GUI_W32
      void		*tofree;
  #endif
  } BalloonEval;
--- 76,82 ----
      int			*vts;		// vartabstop setting for this buffer
  #endif
      char_u		*msg;
! #ifdef FEAT_GUI_MSWIN
      void		*tofree;
  #endif
  } BalloonEval;
*** ../vim-8.1.0940/src/blowfish.c	2019-01-13 23:38:33.375773418 +0100
--- src/blowfish.c	2019-02-17 17:29:18.536788953 +0100
***************
*** 34,40 ****
      char_u   uc[8];
  } block8;
  
! #if defined(WIN3264)
    /* MS-Windows is always little endian */
  #else
  # ifdef HAVE_CONFIG_H
--- 34,40 ----
      char_u   uc[8];
  } block8;
  
! #if defined(MSWIN)
    /* MS-Windows is always little endian */
  #else
  # ifdef HAVE_CONFIG_H
*** ../vim-8.1.0940/src/channel.c	2019-02-10 22:23:23.020415140 +0100
--- src/channel.c	2019-02-17 17:29:18.536788953 +0100
***************
*** 20,26 ****
  #endif
  
  /* Note: when making changes here also adjust configure.ac. */
! #ifdef WIN32
  /* WinSock API is separated from C API, thus we can't use read(), write(),
   * errno... */
  # define SOCK_ERRNO errno = WSAGetLastError()
--- 20,26 ----
  #endif
  
  /* Note: when making changes here also adjust configure.ac. */
! #ifdef MSWIN
  /* WinSock API is separated from C API, thus we can't use read(), write(),
   * errno... */
  # define SOCK_ERRNO errno = WSAGetLastError()
***************
*** 65,71 ****
  
  static char *part_names[] = {"sock", "out", "err", "in"};
  
! #ifdef WIN32
      static int
  fd_read(sock_T fd, char *buf, size_t len)
  {
--- 65,71 ----
  
  static char *part_names[] = {"sock", "out", "err", "in"};
  
! #ifdef MSWIN
      static int
  fd_read(sock_T fd, char *buf, size_t len)
  {
***************
*** 234,240 ****
      }
  }
  
! #ifdef _WIN32
  # undef PERROR
  # define PERROR(msg) (void)semsg("%s: %s", msg, strerror_win32(errno))
  
--- 234,240 ----
      }
  }
  
! #ifdef MSWIN
  # undef PERROR
  # define PERROR(msg) (void)semsg("%s: %s", msg, strerror_win32(errno))
  
***************
*** 687,693 ****
      int			sd = -1;
      struct sockaddr_in	server;
      struct hostent	*host;
! #ifdef WIN32
      u_short		port = port_in;
      u_long		val = 1;
  #else
--- 687,693 ----
      int			sd = -1;
      struct sockaddr_in	server;
      struct hostent	*host;
! #ifdef MSWIN
      u_short		port = port_in;
      u_long		val = 1;
  #else
***************
*** 696,702 ****
      channel_T		*channel;
      int			ret;
  
! #ifdef WIN32
      channel_init_winsock();
  #endif
  
--- 696,702 ----
      channel_T		*channel;
      int			ret;
  
! #ifdef MSWIN
      channel_init_winsock();
  #endif
  
***************
*** 758,764 ****
  	{
  	    /* Make connect() non-blocking. */
  	    if (
! #ifdef _WIN32
  		ioctlsocket(sd, FIONBIO, &val) < 0
  #else
  		fcntl(sd, F_SETFL, O_NONBLOCK) < 0
--- 758,764 ----
  	{
  	    /* Make connect() non-blocking. */
  	    if (
! #ifdef MSWIN
  		ioctlsocket(sd, FIONBIO, &val) < 0
  #else
  		fcntl(sd, F_SETFL, O_NONBLOCK) < 0
***************
*** 804,817 ****
  
  	/* If connect() didn't finish then try using select() to wait for the
  	 * connection to be made. For Win32 always use select() to wait. */
! #ifndef WIN32
  	if (errno != ECONNREFUSED)
  #endif
  	{
  	    struct timeval	tv;
  	    fd_set		rfds;
  	    fd_set		wfds;
! #ifndef WIN32
  	    int			so_error = 0;
  	    socklen_t		so_error_len = sizeof(so_error);
  	    struct timeval	start_tv;
--- 804,817 ----
  
  	/* If connect() didn't finish then try using select() to wait for the
  	 * connection to be made. For Win32 always use select() to wait. */
! #ifndef MSWIN
  	if (errno != ECONNREFUSED)
  #endif
  	{
  	    struct timeval	tv;
  	    fd_set		rfds;
  	    fd_set		wfds;
! #ifndef MSWIN
  	    int			so_error = 0;
  	    socklen_t		so_error_len = sizeof(so_error);
  	    struct timeval	start_tv;
***************
*** 824,830 ****
  
  	    tv.tv_sec = waitnow / 1000;
  	    tv.tv_usec = (waitnow % 1000) * 1000;
! #ifndef WIN32
  	    gettimeofday(&start_tv, NULL);
  #endif
  	    ch_log(channel,
--- 824,830 ----
  
  	    tv.tv_sec = waitnow / 1000;
  	    tv.tv_usec = (waitnow % 1000) * 1000;
! #ifndef MSWIN
  	    gettimeofday(&start_tv, NULL);
  #endif
  	    ch_log(channel,
***************
*** 842,848 ****
  		return NULL;
  	    }
  
! #ifdef WIN32
  	    /* On Win32: select() is expected to work and wait for up to
  	     * "waitnow" msec for the socket to be open. */
  	    if (FD_ISSET(sd, &wfds))
--- 842,848 ----
  		return NULL;
  	    }
  
! #ifdef MSWIN
  	    /* On Win32: select() is expected to work and wait for up to
  	     * "waitnow" msec for the socket to be open. */
  	    if (FD_ISSET(sd, &wfds))
***************
*** 893,899 ****
  #endif
  	}
  
! #ifndef WIN32
  	if (waittime > 1 && elapsed_msec < waittime)
  	{
  	    /* The port isn't ready but we also didn't get an error.
--- 893,899 ----
  #endif
  	}
  
! #ifndef MSWIN
  	if (waittime > 1 && elapsed_msec < waittime)
  	{
  	    /* The port isn't ready but we also didn't get an error.
***************
*** 930,936 ****
  
      if (waittime >= 0)
      {
! #ifdef _WIN32
  	val = 0;
  	ioctlsocket(sd, FIONBIO, &val);
  #else
--- 930,936 ----
  
      if (waittime >= 0)
      {
! #ifdef MSWIN
  	val = 0;
  	ioctlsocket(sd, FIONBIO, &val);
  #else
***************
*** 1029,1035 ****
  		    && (part == PART_OUT || channel->CH_OUT_FD != *fd)
  		    && (part == PART_ERR || channel->CH_ERR_FD != *fd))
  	    {
! #ifdef WIN32
  		if (channel->ch_named_pipe)
  		    DisconnectNamedPipe((HANDLE)fd);
  #endif
--- 1029,1035 ----
  		    && (part == PART_OUT || channel->CH_OUT_FD != *fd)
  		    && (part == PART_ERR || channel->CH_ERR_FD != *fd))
  	    {
! #ifdef MSWIN
  		if (channel->ch_named_pipe)
  		    DisconnectNamedPipe((HANDLE)fd);
  #endif
***************
*** 1427,1433 ****
  	in_part->ch_block_write = 1;
  
      /* TODO: Win32 implementation, probably using WaitForMultipleObjects() */
! #ifndef WIN32
      {
  # if defined(HAVE_SELECT)
  	struct timeval	tval;
--- 1427,1433 ----
  	in_part->ch_block_write = 1;
  
      /* TODO: Win32 implementation, probably using WaitForMultipleObjects() */
! #ifndef MSWIN
      {
  # if defined(HAVE_SELECT)
  	struct timeval	tval;
***************
*** 1759,1765 ****
      {
  	if (*p == NUL)
  	    *p = NL;
! #ifdef WIN32
  	else if (*p == 0x1b)
  	{
  	    // crush the escape sequence OSC 0/1/2: ESC ]0;
--- 1759,1765 ----
      {
  	if (*p == NUL)
  	    *p = NL;
! #ifdef MSWIN
  	else if (*p == 0x1b)
  	{
  	    // crush the escape sequence OSC 0/1/2: ESC ]0;
***************
*** 2064,2070 ****
  		    (int)buflen);
  	    reader.js_used = 0;
  	    chanpart->ch_wait_len = buflen;
! #ifdef WIN32
  	    chanpart->ch_deadline = GetTickCount() + 100L;
  #else
  	    gettimeofday(&chanpart->ch_deadline, NULL);
--- 2064,2070 ----
  		    (int)buflen);
  	    reader.js_used = 0;
  	    chanpart->ch_wait_len = buflen;
! #ifdef MSWIN
  	    chanpart->ch_deadline = GetTickCount() + 100L;
  #else
  	    gettimeofday(&chanpart->ch_deadline, NULL);
***************
*** 2079,2085 ****
  	else
  	{
  	    int timeout;
! #ifdef WIN32
  	    timeout = GetTickCount() > chanpart->ch_deadline;
  #else
  	    {
--- 2079,2085 ----
  	else
  	{
  	    int timeout;
! #ifdef MSWIN
  	    timeout = GetTickCount() > chanpart->ch_deadline;
  #else
  	    {
***************
*** 3198,3204 ****
      if (timeout > 0)
  	ch_log(channel, "Waiting for up to %d msec", timeout);
  
! # ifdef WIN32
      if (fd != channel->CH_SOCK_FD)
      {
  	DWORD	nread;
--- 3198,3204 ----
      if (timeout > 0)
  	ch_log(channel, "Waiting for up to %d msec", timeout);
  
! # ifdef MSWIN
      if (fd != channel->CH_SOCK_FD)
      {
  	DWORD	nread;
***************
*** 3554,3560 ****
  	    timeout = timeout_arg;
  	    if (chanpart->ch_wait_len > 0)
  	    {
! #ifdef WIN32
  		timeout = chanpart->ch_deadline - GetTickCount() + 1;
  #else
  		{
--- 3554,3560 ----
  	    timeout = timeout_arg;
  	    if (chanpart->ch_wait_len > 0)
  	    {
! #ifdef MSWIN
  		timeout = chanpart->ch_deadline - GetTickCount() + 1;
  #else
  		{
***************
*** 3680,3686 ****
      free_job_options(&opt);
  }
  
! # if defined(WIN32) || defined(FEAT_GUI_X11) || defined(FEAT_GUI_GTK) \
  	|| defined(PROTO)
  /*
   * Lookup the channel from the socket.  Set "partp" to the fd index.
--- 3680,3686 ----
      free_job_options(&opt);
  }
  
! # if defined(MSWIN) || defined(FEAT_GUI_X11) || defined(FEAT_GUI_GTK) \
  	|| defined(PROTO)
  /*
   * Lookup the channel from the socket.  Set "partp" to the fd index.
***************
*** 3707,3713 ****
  }
  # endif
  
! # if defined(WIN32) || defined(FEAT_GUI) || defined(PROTO)
  /*
   * Check the channels for anything that is ready to be read.
   * The data is put in the read queue.
--- 3707,3713 ----
  }
  # endif
  
! # if defined(MSWIN) || defined(FEAT_GUI) || defined(PROTO)
  /*
   * Check the channels for anything that is ready to be read.
   * The data is put in the read queue.
***************
*** 3772,3778 ****
  
      if (fd != INVALID_FD)
      {
! #ifdef _WIN32
  	u_long	val = 1;
  
  	ioctlsocket(fd, FIONBIO, &val);
--- 3772,3778 ----
  
      if (fd != INVALID_FD)
      {
! #ifdef MSWIN
  	u_long	val = 1;
  
  	ioctlsocket(fd, FIONBIO, &val);
***************
*** 3853,3859 ****
  	else
  	{
  	    res = fd_write(fd, (char *)buf, len);
! #ifdef WIN32
  	    if (channel->ch_named_pipe && res < 0)
  	    {
  		DisconnectNamedPipe((HANDLE)fd);
--- 3853,3859 ----
  	else
  	{
  	    res = fd_write(fd, (char *)buf, len);
! #ifdef MSWIN
  	    if (channel->ch_named_pipe && res < 0)
  	    {
  		DisconnectNamedPipe((HANDLE)fd);
***************
*** 4213,4219 ****
  }
  # endif /* UNIX && !HAVE_SELECT */
  
! # if (!defined(WIN32) && defined(HAVE_SELECT)) || defined(PROTO)
  
  /*
   * The "fd_set" type is hidden to avoid problems with the function proto.
--- 4213,4219 ----
  }
  # endif /* UNIX && !HAVE_SELECT */
  
! # if (!defined(MSWIN) && defined(HAVE_SELECT)) || defined(PROTO)
  
  /*
   * The "fd_set" type is hidden to avoid problems with the function proto.
***************
*** 4313,4319 ****
  
      return ret;
  }
! # endif /* !WIN32 && HAVE_SELECT */
  
  /*
   * Execute queued up commands.
--- 4313,4319 ----
  
      return ret;
  }
! # endif /* !MSWIN && HAVE_SELECT */
  
  /*
   * Execute queued up commands.
***************
*** 5039,5045 ****
  		    break;
  		opt->jo_cwd = tv_get_string_buf_chk(item, opt->jo_cwd_buf);
  		if (opt->jo_cwd == NULL || !mch_isdir(opt->jo_cwd)
! #ifndef WIN32  // Win32 directories don't have the concept of "executable"
  				|| mch_access((char *)opt->jo_cwd, X_OK) != 0
  #endif
  				)
--- 5039,5045 ----
  		    break;
  		opt->jo_cwd = tv_get_string_buf_chk(item, opt->jo_cwd_buf);
  		if (opt->jo_cwd == NULL || !mch_isdir(opt->jo_cwd)
! #ifndef MSWIN  // Win32 directories don't have the concept of "executable"
  				|| mch_access((char *)opt->jo_cwd, X_OK) != 0
  #endif
  				)
***************
*** 5199,5205 ****
  #ifdef UNIX
      vim_free(job->jv_termsig);
  #endif
! #ifdef WIN3264
      vim_free(job->jv_tty_type);
  #endif
      free_callback(job->jv_exit_cb, job->jv_exit_partial);
--- 5199,5205 ----
  #ifdef UNIX
      vim_free(job->jv_termsig);
  #endif
! #ifdef MSWIN
      vim_free(job->jv_tty_type);
  #endif
      free_callback(job->jv_exit_cb, job->jv_exit_partial);
***************
*** 5971,5977 ****
  #ifdef UNIX
      dict_add_string(dict, "termsig", job->jv_termsig);
  #endif
! #ifdef WIN3264
      dict_add_string(dict, "tty_type", job->jv_tty_type);
  #endif
  
--- 5971,5977 ----
  #ifdef UNIX
      dict_add_string(dict, "termsig", job->jv_termsig);
  #endif
! #ifdef MSWIN
      dict_add_string(dict, "tty_type", job->jv_tty_type);
  #endif
  
*** ../vim-8.1.0940/src/edit.c	2019-02-16 15:09:21.209946237 +0100
--- src/edit.c	2019-02-17 17:29:18.540788930 +0100
***************
*** 1247,1255 ****
  	    did_cursorhold = TRUE;
  	    break;
  
! #ifdef FEAT_GUI_W32
! 	    /* On Win32 ignore <M-F4>, we get it when closing the window was
! 	     * cancelled. */
  	case K_F4:
  	    if (mod_mask != MOD_MASK_ALT)
  		goto normalchar;
--- 1247,1255 ----
  	    did_cursorhold = TRUE;
  	    break;
  
! #ifdef FEAT_GUI_MSWIN
! 	    /* On MS-Windows ignore <M-F4>, we get it when closing the window
! 	     * was cancelled. */
  	case K_F4:
  	    if (mod_mask != MOD_MASK_ALT)
  		goto normalchar;
*** ../vim-8.1.0940/src/eval.c	2019-02-12 22:28:27.845232664 +0100
--- src/eval.c	2019-02-17 17:29:18.540788930 +0100
***************
*** 7460,7466 ****
  # ifdef UNIX
  		vim_snprintf((char *)buf, NUMBUFLEN,
  			    "process %ld %s", (long)job->jv_pid, status);
! # elif defined(WIN32)
  		vim_snprintf((char *)buf, NUMBUFLEN,
  			    "process %ld %s",
  			    (long)job->jv_proc_info.dwProcessId,
--- 7460,7466 ----
  # ifdef UNIX
  		vim_snprintf((char *)buf, NUMBUFLEN,
  			    "process %ld %s", (long)job->jv_pid, status);
! # elif defined(MSWIN)
  		vim_snprintf((char *)buf, NUMBUFLEN,
  			    "process %ld %s",
  			    (long)job->jv_proc_info.dwProcessId,
***************
*** 9956,9962 ****
  
  #if defined(FEAT_MODIFY_FNAME) || defined(FEAT_EVAL) || defined(PROTO)
  
! #ifdef WIN3264
  /*
   * Functions for ":8" filename modifier: get 8.3 version of a filename.
   */
--- 9956,9962 ----
  
  #if defined(FEAT_MODIFY_FNAME) || defined(FEAT_EVAL) || defined(PROTO)
  
! #ifdef MSWIN
  /*
   * Functions for ":8" filename modifier: get 8.3 version of a filename.
   */
***************
*** 10191,10197 ****
  
      return OK;
  }
! #endif /* WIN3264 */
  
  /*
   * Adjust a filename, according to a string of modifiers.
--- 10191,10197 ----
  
      return OK;
  }
! #endif // MSWIN
  
  /*
   * Adjust a filename, according to a string of modifiers.
***************
*** 10215,10221 ****
      char_u	dirname[MAXPATHL];
      int		c;
      int		has_fullname = 0;
! #ifdef WIN3264
      char_u	*fname_start = *fnamep;
      int		has_shortname = 0;
  #endif
--- 10215,10221 ----
      char_u	dirname[MAXPATHL];
      int		c;
      int		has_fullname = 0;
! #ifdef MSWIN
      char_u	*fname_start = *fnamep;
      int		has_shortname = 0;
  #endif
***************
*** 10270,10276 ****
  		return -1;
  	}
  
! #ifdef WIN3264
  # if _WIN32_WINNT >= 0x0500
  	if (vim_strchr(*fnamep, '~') != NULL)
  	{
--- 10270,10276 ----
  		return -1;
  	}
  
! #ifdef MSWIN
  # if _WIN32_WINNT >= 0x0500
  	if (vim_strchr(*fnamep, '~') != NULL)
  	{
***************
*** 10313,10319 ****
  	*usedlen += 2;
  	if (c == '8')
  	{
! #ifdef WIN3264
  	    has_shortname = 1; /* Postpone this. */
  #endif
  	    continue;
--- 10313,10319 ----
  	*usedlen += 2;
  	if (c == '8')
  	{
! #ifdef MSWIN
  	    has_shortname = 1; /* Postpone this. */
  #endif
  	    continue;
***************
*** 10406,10417 ****
      if (src[*usedlen] == ':' && src[*usedlen + 1] == '8')
      {
  	*usedlen += 2;
! #ifdef WIN3264
  	has_shortname = 1;
  #endif
      }
  
! #ifdef WIN3264
      /*
       * Handle ":8" after we have done 'heads' and before we do 'tails'.
       */
--- 10406,10417 ----
      if (src[*usedlen] == ':' && src[*usedlen + 1] == '8')
      {
  	*usedlen += 2;
! #ifdef MSWIN
  	has_shortname = 1;
  #endif
      }
  
! #ifdef MSWIN
      /*
       * Handle ":8" after we have done 'heads' and before we do 'tails'.
       */
***************
*** 10455,10461 ****
  	    *fnamelen = l;
  	}
      }
! #endif /* WIN3264 */
  
      /* ":t" - tail, just the basename */
      if (src[*usedlen] == ':' && src[*usedlen + 1] == 't')
--- 10455,10461 ----
  	    *fnamelen = l;
  	}
      }
! #endif // MSWIN
  
      /* ":t" - tail, just the basename */
      if (src[*usedlen] == ':' && src[*usedlen + 1] == 't')
*** ../vim-8.1.0940/src/evalfunc.c	2019-02-16 15:09:21.217946198 +0100
--- src/evalfunc.c	2019-02-17 17:29:18.540788930 +0100
***************
*** 123,129 ****
  static void f_count(typval_T *argvars, typval_T *rettv);
  static void f_cscope_connection(typval_T *argvars, typval_T *rettv);
  static void f_cursor(typval_T *argsvars, typval_T *rettv);
! #ifdef WIN3264
  static void f_debugbreak(typval_T *argvars, typval_T *rettv);
  #endif
  static void f_deepcopy(typval_T *argvars, typval_T *rettv);
--- 123,129 ----
  static void f_count(typval_T *argvars, typval_T *rettv);
  static void f_cscope_connection(typval_T *argvars, typval_T *rettv);
  static void f_cursor(typval_T *argsvars, typval_T *rettv);
! #ifdef MSWIN
  static void f_debugbreak(typval_T *argvars, typval_T *rettv);
  #endif
  static void f_deepcopy(typval_T *argvars, typval_T *rettv);
***************
*** 599,605 ****
      {"count",		2, 4, f_count},
      {"cscope_connection",0,3, f_cscope_connection},
      {"cursor",		1, 3, f_cursor},
! #ifdef WIN3264
      {"debugbreak",	1, 1, f_debugbreak},
  #endif
      {"deepcopy",	1, 2, f_deepcopy},
--- 599,605 ----
      {"count",		2, 4, f_count},
      {"cscope_connection",0,3, f_cscope_connection},
      {"cursor",		1, 3, f_cursor},
! #ifdef MSWIN
      {"debugbreak",	1, 1, f_debugbreak},
  #endif
      {"deepcopy",	1, 2, f_deepcopy},
***************
*** 2884,2890 ****
      rettv->vval.v_number = 0;
  }
  
! #ifdef WIN3264
  /*
   * "debugbreak()" function
   */
--- 2884,2890 ----
      rettv->vval.v_number = 0;
  }
  
! #ifdef MSWIN
  /*
   * "debugbreak()" function
   */
***************
*** 4137,4143 ****
      if (gui.in_use)
  	gui_mch_set_foreground();
  #else
! # ifdef WIN32
      win32_set_foreground();
  # endif
  #endif
--- 4137,4143 ----
      if (gui.in_use)
  	gui_mch_set_foreground();
  #else
! # ifdef MSWIN
      win32_set_foreground();
  # endif
  #endif
***************
*** 6152,6158 ****
  #ifdef VMS
  	"vms",
  #endif
! #ifdef WIN32
  	"win32",
  #endif
  #if defined(UNIX) && (defined(__CYGWIN32__) || defined(__CYGWIN__))
--- 6152,6158 ----
  #ifdef VMS
  	"vms",
  #endif
! #ifdef MSWIN
  	"win32",
  #endif
  #if defined(UNIX) && (defined(__CYGWIN32__) || defined(__CYGWIN__))
***************
*** 6182,6188 ****
  #endif
  #ifdef FEAT_BEVAL_GUI
  	"balloon_eval",
! # ifndef FEAT_GUI_W32 /* other GUIs always have multiline balloons */
  	"balloon_multiline",
  # endif
  #endif
--- 6182,6188 ----
  #endif
  #ifdef FEAT_BEVAL_GUI
  	"balloon_eval",
! # ifndef FEAT_GUI_MSWIN /* other GUIs always have multiline balloons */
  	"balloon_multiline",
  # endif
  #endif
***************
*** 6196,6202 ****
  # endif
  #endif
  #if defined(FEAT_BROWSE) && (defined(USE_FILE_CHOOSER) \
! 	|| defined(FEAT_GUI_W32) \
  	|| defined(FEAT_GUI_MOTIF))
  	"browsefilter",
  #endif
--- 6196,6202 ----
  # endif
  #endif
  #if defined(FEAT_BROWSE) && (defined(USE_FILE_CHOOSER) \
! 	|| defined(FEAT_GUI_MSWIN) \
  	|| defined(FEAT_GUI_MOTIF))
  	"browsefilter",
  #endif
***************
*** 6322,6328 ****
  #ifdef FEAT_GUI_PHOTON
  	"gui_photon",
  #endif
! #ifdef FEAT_GUI_W32
  	"gui_win32",
  #endif
  #ifdef FEAT_HANGULIN
--- 6322,6328 ----
  #ifdef FEAT_GUI_PHOTON
  	"gui_photon",
  #endif
! #ifdef FEAT_GUI_MSWIN
  	"gui_win32",
  #endif
  #ifdef FEAT_HANGULIN
***************
*** 6526,6532 ****
  #ifdef FEAT_TERMGUICOLORS
  	"termguicolors",
  #endif
! #if defined(FEAT_TERMINAL) && !defined(WIN3264)
  	"terminal",
  #endif
  #ifdef TERMINFO
--- 6526,6532 ----
  #ifdef FEAT_TERMGUICOLORS
  	"termguicolors",
  #endif
! #if defined(FEAT_TERMINAL) && !defined(MSWIN)
  	"terminal",
  #endif
  #ifdef TERMINFO
***************
*** 6658,6664 ****
  	    n = stdout_isatty;
  	else if (STRICMP(name, "multi_byte_encoding") == 0)
  	    n = has_mbyte;
! #if defined(FEAT_BEVAL) && defined(FEAT_GUI_W32)
  	else if (STRICMP(name, "balloon_multiline") == 0)
  	    n = multiline_balloon_available();
  #endif
--- 6658,6664 ----
  	    n = stdout_isatty;
  	else if (STRICMP(name, "multi_byte_encoding") == 0)
  	    n = has_mbyte;
! #if defined(FEAT_BEVAL) && defined(FEAT_GUI_MSWIN)
  	else if (STRICMP(name, "balloon_multiline") == 0)
  	    n = multiline_balloon_available();
  #endif
***************
*** 6731,6741 ****
  	else if (STRICMP(name, "netbeans_enabled") == 0)
  	    n = netbeans_active();
  #endif
! #if defined(FEAT_TERMINAL) && defined(WIN3264)
  	else if (STRICMP(name, "terminal") == 0)
  	    n = terminal_enabled();
  #endif
! #if defined(FEAT_TERMINAL) && defined(WIN3264)
  	else if (STRICMP(name, "conpty") == 0)
  	    n = use_conpty();
  #endif
--- 6731,6741 ----
  	else if (STRICMP(name, "netbeans_enabled") == 0)
  	    n = netbeans_active();
  #endif
! #if defined(FEAT_TERMINAL) && defined(MSWIN)
  	else if (STRICMP(name, "terminal") == 0)
  	    n = terminal_enabled();
  #endif
! #if defined(FEAT_TERMINAL) && defined(MSWIN)
  	else if (STRICMP(name, "conpty") == 0)
  	    n = use_conpty();
  #endif
***************
*** 9309,9315 ****
  	return FAIL;
      n1 = list_find_nr(arg->vval.v_list, 0L, &error);
      n2 = list_find_nr(arg->vval.v_list, 1L, &error);
! # ifdef WIN3264
      tm->HighPart = n1;
      tm->LowPart = n2;
  # else
--- 9309,9315 ----
  	return FAIL;
      n1 = list_find_nr(arg->vval.v_list, 0L, &error);
      n2 = list_find_nr(arg->vval.v_list, 1L, &error);
! # ifdef MSWIN
      tm->HighPart = n1;
      tm->LowPart = n2;
  # else
***************
*** 9354,9360 ****
      {
  	long	n1, n2;
  
! # ifdef WIN3264
  	n1 = res.HighPart;
  	n2 = res.LowPart;
  # else
--- 9354,9360 ----
      {
  	long	n1, n2;
  
! # ifdef MSWIN
  	n1 = res.HighPart;
  	n2 = res.LowPart;
  # else
***************
*** 9443,9449 ****
      char_u	*r = NULL;
      char_u	buf[NUMBUFLEN];
      int		timeout = 0;
! # ifdef WIN32
      HWND	w;
  # else
      Window	w;
--- 9443,9449 ----
      char_u	*r = NULL;
      char_u	buf[NUMBUFLEN];
      int		timeout = 0;
! # ifdef MSWIN
      HWND	w;
  # else
      Window	w;
***************
*** 9464,9470 ****
      if (server_name == NULL)
  	return;		/* type error; errmsg already given */
      keys = tv_get_string_buf(&argvars[1], buf);
! # ifdef WIN32
      if (serverSendToVim(server_name, keys, &r, &w, expr, timeout, TRUE) < 0)
  # else
      if (serverSendToVim(X_DISPLAY, server_name, keys, &r, &w, expr, timeout,
--- 9464,9470 ----
      if (server_name == NULL)
  	return;		/* type error; errmsg already given */
      keys = tv_get_string_buf(&argvars[1], buf);
! # ifdef MSWIN
      if (serverSendToVim(server_name, keys, &r, &w, expr, timeout, TRUE) < 0)
  # else
      if (serverSendToVim(X_DISPLAY, server_name, keys, &r, &w, expr, timeout,
***************
*** 9522,9528 ****
  f_remote_foreground(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
  {
  #ifdef FEAT_CLIENTSERVER
! # ifdef WIN32
      /* On Win32 it's done in this application. */
      {
  	char_u	*server_name = tv_get_string_chk(&argvars[0]);
--- 9522,9528 ----
  f_remote_foreground(typval_T *argvars UNUSED, typval_T *rettv UNUSED)
  {
  #ifdef FEAT_CLIENTSERVER
! # ifdef MSWIN
      /* On Win32 it's done in this application. */
      {
  	char_u	*server_name = tv_get_string_chk(&argvars[0]);
***************
*** 9549,9555 ****
  #ifdef FEAT_CLIENTSERVER
      dictitem_T	v;
      char_u	*s = NULL;
! # ifdef WIN32
      long_u	n = 0;
  # endif
      char_u	*serverid;
--- 9549,9555 ----
  #ifdef FEAT_CLIENTSERVER
      dictitem_T	v;
      char_u	*s = NULL;
! # ifdef MSWIN
      long_u	n = 0;
  # endif
      char_u	*serverid;
***************
*** 9565,9571 ****
  	rettv->vval.v_number = -1;
  	return;		/* type error; errmsg already given */
      }
! # ifdef WIN32
      sscanf((const char *)serverid, SCANF_HEX_LONG_U, &n);
      if (n == 0)
  	rettv->vval.v_number = -1;
--- 9565,9571 ----
  	rettv->vval.v_number = -1;
  	return;		/* type error; errmsg already given */
      }
! # ifdef MSWIN
      sscanf((const char *)serverid, SCANF_HEX_LONG_U, &n);
      if (n == 0)
  	rettv->vval.v_number = -1;
***************
*** 9609,9615 ****
      if (serverid != NULL && !check_restricted() && !check_secure())
      {
  	int timeout = 0;
! # ifdef WIN32
  	/* The server's HWND is encoded in the 'id' parameter */
  	long_u		n = 0;
  # endif
--- 9609,9615 ----
      if (serverid != NULL && !check_restricted() && !check_secure())
      {
  	int timeout = 0;
! # ifdef MSWIN
  	/* The server's HWND is encoded in the 'id' parameter */
  	long_u		n = 0;
  # endif
***************
*** 9617,9623 ****
  	if (argvars[1].v_type != VAR_UNKNOWN)
  	    timeout = tv_get_number(&argvars[1]);
  
! # ifdef WIN32
  	sscanf((char *)serverid, SCANF_HEX_LONG_U, &n);
  	if (n != 0)
  	    r = serverGetReply((HWND)n, FALSE, TRUE, TRUE, timeout);
--- 9617,9623 ----
  	if (argvars[1].v_type != VAR_UNKNOWN)
  	    timeout = tv_get_number(&argvars[1]);
  
! # ifdef MSWIN
  	sscanf((char *)serverid, SCANF_HEX_LONG_U, &n);
  	if (n != 0)
  	    r = serverGetReply((HWND)n, FALSE, TRUE, TRUE, timeout);
***************
*** 10789,10795 ****
      char_u	*r = NULL;
  
  #ifdef FEAT_CLIENTSERVER
! # ifdef WIN32
      r = serverGetVimNames();
  # else
      make_connection();
--- 10789,10795 ----
      char_u	*r = NULL;
  
  #ifdef FEAT_CLIENTSERVER
! # ifdef MSWIN
      r = serverGetVimNames();
  # else
      make_connection();
*** ../vim-8.1.0940/src/ex_cmds.c	2019-02-16 15:09:21.213946217 +0100
--- src/ex_cmds.c	2019-02-17 17:29:18.544788906 +0100
***************
*** 1618,1624 ****
  	 */
  #ifndef FEAT_GUI_MSWIN
  	if (cmd == NULL
! # ifdef WIN3264
  		|| (winstart && !need_wait_return)
  # endif
  	   )
--- 1618,1624 ----
  	 */
  #ifndef FEAT_GUI_MSWIN
  	if (cmd == NULL
! # ifdef MSWIN
  		|| (winstart && !need_wait_return)
  # endif
  	   )
***************
*** 1643,1649 ****
  # endif
  	    no_wait_return = save_nwr;
  	}
! #endif /* FEAT_GUI_W32 */
  
  #ifdef MSWIN
  	if (!winstart) /* if winstart==TRUE, never stopped termcap! */
--- 1643,1649 ----
  # endif
  	    no_wait_return = save_nwr;
  	}
! #endif /* FEAT_GUI_MSWIN */
  
  #ifdef MSWIN
  	if (!winstart) /* if winstart==TRUE, never stopped termcap! */
***************
*** 1935,1941 ****
      int		shortname = FALSE;	/* use 8.3 file name */
      stat_T	st_old;		/* mch_stat() of existing viminfo file */
  #endif
! #ifdef WIN3264
      int		hidden = FALSE;
  #endif
  
--- 1935,1941 ----
      int		shortname = FALSE;	/* use 8.3 file name */
      stat_T	st_old;		/* mch_stat() of existing viminfo file */
  #endif
! #ifdef MSWIN
      int		hidden = FALSE;
  #endif
  
***************
*** 1999,2005 ****
  	    goto end;
  	}
  #endif
! #ifdef WIN3264
  	/* Get the file attributes of the existing viminfo file. */
  	hidden = mch_ishidden(fname);
  #endif
--- 1999,2005 ----
  	    goto end;
  	}
  #endif
! #ifdef MSWIN
  	/* Get the file attributes of the existing viminfo file. */
  	hidden = mch_ishidden(fname);
  #endif
***************
*** 2195,2201 ****
  		++viminfo_errcnt;
  		semsg(_("E886: Can't rename viminfo file to %s!"), fname);
  	    }
! # ifdef WIN3264
  	    /* If the viminfo file was hidden then also hide the new file. */
  	    else if (hidden)
  		mch_hide(fname);
--- 2195,2201 ----
  		++viminfo_errcnt;
  		semsg(_("E886: Can't rename viminfo file to %s!"), fname);
  	    }
! # ifdef MSWIN
  	    /* If the viminfo file was hidden then also hide the new file. */
  	    else if (hidden)
  		mch_hide(fname);
*** ../vim-8.1.0940/src/ex_cmds2.c	2019-02-16 00:00:24.804989830 +0100
--- src/ex_cmds2.c	2019-02-17 17:29:18.544788906 +0100
***************
*** 1048,1054 ****
      void
  profile_start(proftime_T *tm)
  {
! # ifdef WIN3264
      QueryPerformanceCounter(tm);
  # else
      gettimeofday(tm, NULL);
--- 1048,1054 ----
      void
  profile_start(proftime_T *tm)
  {
! # ifdef MSWIN
      QueryPerformanceCounter(tm);
  # else
      gettimeofday(tm, NULL);
***************
*** 1063,1069 ****
  {
      proftime_T now;
  
! # ifdef WIN3264
      QueryPerformanceCounter(&now);
      tm->QuadPart = now.QuadPart - tm->QuadPart;
  # else
--- 1063,1069 ----
  {
      proftime_T now;
  
! # ifdef MSWIN
      QueryPerformanceCounter(&now);
      tm->QuadPart = now.QuadPart - tm->QuadPart;
  # else
***************
*** 1084,1090 ****
      void
  profile_sub(proftime_T *tm, proftime_T *tm2)
  {
! # ifdef WIN3264
      tm->QuadPart -= tm2->QuadPart;
  # else
      tm->tv_usec -= tm2->tv_usec;
--- 1084,1090 ----
      void
  profile_sub(proftime_T *tm, proftime_T *tm2)
  {
! # ifdef MSWIN
      tm->QuadPart -= tm2->QuadPart;
  # else
      tm->tv_usec -= tm2->tv_usec;
***************
*** 1106,1112 ****
  {
      static char buf[50];
  
! # ifdef WIN3264
      LARGE_INTEGER   fr;
  
      QueryPerformanceFrequency(&fr);
--- 1106,1112 ----
  {
      static char buf[50];
  
! # ifdef MSWIN
      LARGE_INTEGER   fr;
  
      QueryPerformanceFrequency(&fr);
***************
*** 1124,1130 ****
      float_T
  profile_float(proftime_T *tm)
  {
! #  ifdef WIN3264
      LARGE_INTEGER   fr;
  
      QueryPerformanceFrequency(&fr);
--- 1124,1130 ----
      float_T
  profile_float(proftime_T *tm)
  {
! #  ifdef MSWIN
      LARGE_INTEGER   fr;
  
      QueryPerformanceFrequency(&fr);
***************
*** 1145,1151 ****
  	profile_zero(tm);
      else
      {
! # ifdef WIN3264
  	LARGE_INTEGER   fr;
  
  	QueryPerformanceCounter(tm);
--- 1145,1151 ----
  	profile_zero(tm);
      else
      {
! # ifdef MSWIN
  	LARGE_INTEGER   fr;
  
  	QueryPerformanceCounter(tm);
***************
*** 1170,1176 ****
  {
      proftime_T	now;
  
! # ifdef WIN3264
      if (tm->QuadPart == 0)  /* timer was not set */
  	return FALSE;
      QueryPerformanceCounter(&now);
--- 1170,1176 ----
  {
      proftime_T	now;
  
! # ifdef MSWIN
      if (tm->QuadPart == 0)  /* timer was not set */
  	return FALSE;
      QueryPerformanceCounter(&now);
***************
*** 1190,1196 ****
      void
  profile_zero(proftime_T *tm)
  {
! # ifdef WIN3264
      tm->QuadPart = 0;
  # else
      tm->tv_usec = 0;
--- 1190,1196 ----
      void
  profile_zero(proftime_T *tm)
  {
! # ifdef MSWIN
      tm->QuadPart = 0;
  # else
      tm->tv_usec = 0;
***************
*** 1207,1213 ****
      long
  proftime_time_left(proftime_T *due, proftime_T *now)
  {
! #  ifdef WIN3264
      LARGE_INTEGER fr;
  
      if (now->QuadPart > due->QuadPart)
--- 1207,1213 ----
      long
  proftime_time_left(proftime_T *due, proftime_T *now)
  {
! #  ifdef MSWIN
      LARGE_INTEGER fr;
  
      if (now->QuadPart > due->QuadPart)
***************
*** 1592,1598 ****
  	profile_zero(tm2);
      else
      {
! # ifdef WIN3264
  	tm2->QuadPart = tm->QuadPart / count;
  # else
  	double usec = (tm->tv_sec * 1000000.0 + tm->tv_usec) / count;
--- 1592,1598 ----
  	profile_zero(tm2);
      else
      {
! # ifdef MSWIN
  	tm2->QuadPart = tm->QuadPart / count;
  # else
  	double usec = (tm->tv_sec * 1000000.0 + tm->tv_usec) / count;
***************
*** 1617,1623 ****
      void
  profile_add(proftime_T *tm, proftime_T *tm2)
  {
! # ifdef WIN3264
      tm->QuadPart += tm2->QuadPart;
  # else
      tm->tv_usec += tm2->tv_usec;
--- 1617,1623 ----
      void
  profile_add(proftime_T *tm, proftime_T *tm2)
  {
! # ifdef MSWIN
      tm->QuadPart += tm2->QuadPart;
  # else
      tm->tv_usec += tm2->tv_usec;
***************
*** 1638,1644 ****
  {
      /* Check that the result won't be negative.  Can happen with recursive
       * calls. */
! #ifdef WIN3264
      if (total->QuadPart <= children->QuadPart)
  	return;
  #else
--- 1638,1644 ----
  {
      /* Check that the result won't be negative.  Can happen with recursive
       * calls. */
! #ifdef MSWIN
      if (total->QuadPart <= children->QuadPart)
  	return;
  #else
***************
*** 1678,1684 ****
      int
  profile_equal(proftime_T *tm1, proftime_T *tm2)
  {
! # ifdef WIN3264
      return (tm1->QuadPart == tm2->QuadPart);
  # else
      return (tm1->tv_usec == tm2->tv_usec && tm1->tv_sec == tm2->tv_sec);
--- 1678,1684 ----
      int
  profile_equal(proftime_T *tm1, proftime_T *tm2)
  {
! # ifdef MSWIN
      return (tm1->QuadPart == tm2->QuadPart);
  # else
      return (tm1->tv_usec == tm2->tv_usec && tm1->tv_sec == tm2->tv_sec);
***************
*** 1691,1697 ****
      int
  profile_cmp(const proftime_T *tm1, const proftime_T *tm2)
  {
! # ifdef WIN3264
      return (int)(tm2->QuadPart - tm1->QuadPart);
  # else
      if (tm1->tv_sec == tm2->tv_sec)
--- 1691,1697 ----
      int
  profile_cmp(const proftime_T *tm1, const proftime_T *tm2)
  {
! # ifdef MSWIN
      return (int)(tm2->QuadPart - tm1->QuadPart);
  # else
      if (tm1->tv_sec == tm2->tv_sec)
***************
*** 4286,4292 ****
  
  static char_u *get_one_sourceline(struct source_cookie *sp);
  
! #if (defined(WIN32) && defined(FEAT_CSCOPE)) || defined(HAVE_FD_CLOEXEC)
  # define USE_FOPEN_NOINH
  /*
   * Special function to open a file without handle inheritance.
--- 4286,4292 ----
  
  static char_u *get_one_sourceline(struct source_cookie *sp);
  
! #if (defined(MSWIN) && defined(FEAT_CSCOPE)) || defined(HAVE_FD_CLOEXEC)
  # define USE_FOPEN_NOINH
  /*
   * Special function to open a file without handle inheritance.
***************
*** 4295,4301 ****
      static FILE *
  fopen_noinh_readbin(char *filename)
  {
! # ifdef WIN32
      int	fd_tmp = mch_open(filename, O_RDONLY | O_BINARY | O_NOINHERIT, 0);
  # else
      int	fd_tmp = mch_open(filename, O_RDONLY, 0);
--- 4295,4301 ----
      static FILE *
  fopen_noinh_readbin(char *filename)
  {
! # ifdef MSWIN
      int	fd_tmp = mch_open(filename, O_RDONLY | O_BINARY | O_NOINHERIT, 0);
  # else
      int	fd_tmp = mch_open(filename, O_RDONLY, 0);
***************
*** 5201,5207 ****
      /* Obtain the locale value from the libraries. */
      loc = (char_u *)setlocale(what, NULL);
  
! # ifdef WIN32
      if (loc != NULL)
      {
  	char_u	*p;
--- 5201,5207 ----
      /* Obtain the locale value from the libraries. */
      loc = (char_u *)setlocale(what, NULL);
  
! # ifdef MSWIN
      if (loc != NULL)
      {
  	char_u	*p;
***************
*** 5230,5236 ****
  #endif
  
  
! #ifdef WIN32
  /*
   * On MS-Windows locale names are strings like "German_Germany.1252", but
   * gettext expects "de".  Try to translate one into another here for a few
--- 5230,5236 ----
  #endif
  
  
! #ifdef MSWIN
  /*
   * On MS-Windows locale names are strings like "German_Germany.1252", but
   * gettext expects "de".  Try to translate one into another here for a few
***************
*** 5307,5313 ****
  	    p = mch_getenv((char_u *)"LANG");
      }
  # endif
! # ifdef WIN32
      p = gettext_lang(p);
  # endif
      return is_valid_mess_lang(p) ? p : NULL;
--- 5307,5313 ----
  	    p = mch_getenv((char_u *)"LANG");
      }
  # endif
! # ifdef MSWIN
      p = gettext_lang(p);
  # endif
      return is_valid_mess_lang(p) ? p : NULL;
***************
*** 5479,5485 ****
  
  		    /* Clear $LANGUAGE because GNU gettext uses it. */
  		    vim_setenv((char_u *)"LANGUAGE", (char_u *)"");
! # ifdef WIN32
  		    /* Apparently MS-Windows printf() may cause a crash when
  		     * we give it 8-bit text while it's expecting text in the
  		     * current locale.  This call avoids that. */
--- 5479,5485 ----
  
  		    /* Clear $LANGUAGE because GNU gettext uses it. */
  		    vim_setenv((char_u *)"LANGUAGE", (char_u *)"");
! # ifdef MSWIN
  		    /* Apparently MS-Windows printf() may cause a crash when
  		     * we give it 8-bit text while it's expecting text in the
  		     * current locale.  This call avoids that. */
***************
*** 5489,5495 ****
  		if (what != LC_CTYPE)
  		{
  		    char_u	*mname;
! #ifdef WIN32
  		    mname = gettext_lang(name);
  #else
  		    mname = name;
--- 5489,5495 ----
  		if (what != LC_CTYPE)
  		{
  		    char_u	*mname;
! #ifdef MSWIN
  		    mname = gettext_lang(name);
  #else
  		    mname = name;
***************
*** 5516,5522 ****
  
  static char_u	**locales = NULL;	/* Array of all available locales */
  
! #  ifndef WIN32
  static int	did_init_locales = FALSE;
  
  /* Return an array of strings for all available locales + NULL for the
--- 5516,5522 ----
  
  static char_u	**locales = NULL;	/* Array of all available locales */
  
! #  ifndef MSWIN
  static int	did_init_locales = FALSE;
  
  /* Return an array of strings for all available locales + NULL for the
***************
*** 5567,5573 ****
      static void
  init_locales(void)
  {
! #  ifndef WIN32
      if (!did_init_locales)
      {
  	did_init_locales = TRUE;
--- 5567,5573 ----
      static void
  init_locales(void)
  {
! #  ifndef MSWIN
      if (!did_init_locales)
      {
  	did_init_locales = TRUE;
*** ../vim-8.1.0940/src/ex_docmd.c	2019-02-17 15:00:48.446637100 +0100
--- src/ex_docmd.c	2019-02-17 17:29:18.544788906 +0100
***************
*** 177,183 ****
  # define ex_gui			ex_nogui
  static void	ex_nogui(exarg_T *eap);
  #endif
! #if defined(FEAT_GUI_W32) && defined(FEAT_MENU) && defined(FEAT_TEAROFF)
  static void	ex_tearoff(exarg_T *eap);
  #else
  # define ex_tearoff		ex_ni
--- 177,183 ----
  # define ex_gui			ex_nogui
  static void	ex_nogui(exarg_T *eap);
  #endif
! #if defined(FEAT_GUI_MSWIN) && defined(FEAT_MENU) && defined(FEAT_TEAROFF)
  static void	ex_tearoff(exarg_T *eap);
  #else
  # define ex_tearoff		ex_ni
***************
*** 8866,8872 ****
  }
  #endif
  
! #if defined(FEAT_GUI_W32) && defined(FEAT_MENU) && defined(FEAT_TEAROFF)
      static void
  ex_tearoff(exarg_T *eap)
  {
--- 8866,8872 ----
  }
  #endif
  
! #if defined(FEAT_GUI_MSWIN) && defined(FEAT_MENU) && defined(FEAT_TEAROFF)
      static void
  ex_tearoff(exarg_T *eap)
  {
***************
*** 9853,9859 ****
      if (need_maketitle)
  	maketitle();
  #endif
! #if defined(WIN3264) && !defined(FEAT_GUI_W32)
      resize_console_buf();
  #endif
      RedrawingDisabled = r;
--- 9853,9859 ----
      if (need_maketitle)
  	maketitle();
  #endif
! #if defined(MSWIN) && !defined(FEAT_GUI_MSWIN)
      resize_console_buf();
  #endif
      RedrawingDisabled = r;
*** ../vim-8.1.0940/src/ex_getln.c	2019-02-16 15:09:21.213946217 +0100
--- src/ex_getln.c	2019-02-17 17:29:18.544788906 +0100
***************
*** 1899,1907 ****
  		/* Ignore mouse event or open_cmdwin() result. */
  		goto cmdline_not_changed;
  
! #ifdef FEAT_GUI_W32
! 	    /* On Win32 ignore <M-F4>, we get it when closing the window was
! 	     * cancelled. */
  	case K_F4:
  	    if (mod_mask == MOD_MASK_ALT)
  	    {
--- 1899,1907 ----
  		/* Ignore mouse event or open_cmdwin() result. */
  		goto cmdline_not_changed;
  
! #ifdef FEAT_GUI_MSWIN
! 	    /* On MS-Windows ignore <M-F4>, we get it when closing the window
! 	     * was cancelled. */
  	case K_F4:
  	    if (mod_mask == MOD_MASK_ALT)
  	    {
*** ../vim-8.1.0940/src/feature.h	2019-01-26 17:28:22.224599141 +0100
--- src/feature.h	2019-02-17 17:29:18.544788906 +0100
***************
*** 61,67 ****
   */
  #if !defined(FEAT_TINY) && !defined(FEAT_SMALL) && !defined(FEAT_NORMAL) \
  	&& !defined(FEAT_BIG) && !defined(FEAT_HUGE)
! # if defined(UNIX) || defined(WIN3264) || defined(MACOS_X)
  #  define FEAT_HUGE
  # else
  #  if defined(MSWIN) || defined(VMS) || defined(AMIGA)
--- 61,67 ----
   */
  #if !defined(FEAT_TINY) && !defined(FEAT_SMALL) && !defined(FEAT_NORMAL) \
  	&& !defined(FEAT_BIG) && !defined(FEAT_HUGE)
! # if defined(UNIX) || defined(MSWIN) || defined(MACOS_X)
  #  define FEAT_HUGE
  # else
  #  if defined(MSWIN) || defined(VMS) || defined(AMIGA)
***************
*** 343,352 ****
   */
  #ifdef FEAT_NORMAL
  # define FEAT_EVAL
! # if defined(HAVE_FLOAT_FUNCS) || defined(WIN3264) || defined(MACOS_X)
  #  define FEAT_FLOAT
  # endif
! # if defined(HAVE_STDINT_H) || defined(WIN3264) || (VIM_SIZEOF_LONG >= 8)
  #  define FEAT_NUM64
  # endif
  #endif
--- 333,342 ----
   */
  #ifdef FEAT_NORMAL
  # define FEAT_EVAL
! # if defined(HAVE_FLOAT_FUNCS) || defined(MSWIN) || defined(MACOS_X)
  #  define FEAT_FLOAT
  # endif
! # if defined(HAVE_STDINT_H) || defined(MSWIN) || (VIM_SIZEOF_LONG >= 8)
  #  define FEAT_NUM64
  # endif
  #endif
***************
*** 361,367 ****
  #if defined(FEAT_HUGE) \
  	&& defined(FEAT_EVAL) \
  	&& ((defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)) \
! 		|| defined(WIN3264))
  # define FEAT_PROFILE
  #endif
  
--- 351,357 ----
  #if defined(FEAT_HUGE) \
  	&& defined(FEAT_EVAL) \
  	&& ((defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)) \
! 		|| defined(MSWIN))
  # define FEAT_PROFILE
  #endif
  
***************
*** 371,384 ****
  #if defined(FEAT_NORMAL) \
  	&& defined(FEAT_EVAL) \
  	&& ((defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)) \
! 		|| defined(WIN3264))
  # define FEAT_RELTIME
  #endif
  
  /*
   * +timers		timer_start()
   */
! #if defined(FEAT_RELTIME) && (defined(UNIX) || defined(WIN32) || defined(VMS) )
  # define FEAT_TIMERS
  #endif
  
--- 361,374 ----
  #if defined(FEAT_NORMAL) \
  	&& defined(FEAT_EVAL) \
  	&& ((defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)) \
! 		|| defined(MSWIN))
  # define FEAT_RELTIME
  #endif
  
  /*
   * +timers		timer_start()
   */
! #if defined(FEAT_RELTIME) && (defined(UNIX) || defined(MSWIN) || defined(VMS) )
  # define FEAT_TIMERS
  #endif
  
***************
*** 603,609 ****
   * +multi_byte_ime	Win32 IME input method.  Only for far-east Windows, so
   *			IME can be used to input chars.  Not tested much!
   */
! #if defined(FEAT_GUI_W32) && !defined(FEAT_MBYTE_IME)
  /* #define FEAT_MBYTE_IME */
  # endif
  
--- 593,599 ----
   * +multi_byte_ime	Win32 IME input method.  Only for far-east Windows, so
   *			IME can be used to input chars.  Not tested much!
   */
! #if defined(FEAT_GUI_MSWIN) && !defined(FEAT_MBYTE_IME)
  /* #define FEAT_MBYTE_IME */
  # endif
  
***************
*** 659,665 ****
  #if defined(HAVE_DLOPEN) && defined(HAVE_DLSYM)
  # define USE_DLOPEN
  #endif
! #if defined(FEAT_EVAL) && (defined(WIN3264) || ((defined(UNIX) || defined(VMS)) \
  	&& (defined(USE_DLOPEN) || defined(HAVE_SHL_LOAD))))
  # define FEAT_LIBCALL
  #endif
--- 649,655 ----
  #if defined(HAVE_DLOPEN) && defined(HAVE_DLSYM)
  # define USE_DLOPEN
  #endif
! #if defined(FEAT_EVAL) && (defined(MSWIN) || ((defined(UNIX) || defined(VMS)) \
  	&& (defined(USE_DLOPEN) || defined(HAVE_SHL_LOAD))))
  # define FEAT_LIBCALL
  #endif
***************
*** 669,675 ****
   */
  #ifdef FEAT_NORMAL
  # define FEAT_MENU
! # ifdef FEAT_GUI_W32
  #  define FEAT_TEAROFF
  # endif
  #endif
--- 659,665 ----
   */
  #ifdef FEAT_NORMAL
  # define FEAT_MENU
! # ifdef FEAT_GUI_MSWIN
  #  define FEAT_TEAROFF
  # endif
  #endif
***************
*** 757,763 ****
  #endif
  #if !defined(FEAT_GUI_DIALOG) && (defined(FEAT_GUI_MOTIF) \
  	|| defined(FEAT_GUI_ATHENA) || defined(FEAT_GUI_GTK) \
! 	|| defined(FEAT_GUI_W32))
  /* need a dialog to show error messages when starting from the desktop */
  # define FEAT_GUI_DIALOG
  #endif
--- 747,753 ----
  #endif
  #if !defined(FEAT_GUI_DIALOG) && (defined(FEAT_GUI_MOTIF) \
  	|| defined(FEAT_GUI_ATHENA) || defined(FEAT_GUI_GTK) \
! 	|| defined(FEAT_GUI_MSWIN))
  /* need a dialog to show error messages when starting from the desktop */
  # define FEAT_GUI_DIALOG
  #endif
***************
*** 828,834 ****
   */
  #if defined(FEAT_NORMAL) \
  	&& ((defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)) \
! 		|| defined(WIN3264))
  # define STARTUPTIME 1
  #endif
  
--- 818,824 ----
   */
  #if defined(FEAT_NORMAL) \
  	&& ((defined(HAVE_GETTIMEOFDAY) && defined(HAVE_SYS_TIME_H)) \
! 		|| defined(MSWIN))
  # define STARTUPTIME 1
  #endif
  
***************
*** 1039,1045 ****
  # ifdef FEAT_BIG
  #  define FEAT_MOUSE_SGR
  # endif
! # if defined(FEAT_NORMAL) && defined(WIN3264)
  #  define DOS_MOUSE
  # endif
  # if defined(FEAT_NORMAL) && defined(__QNX__)
--- 1029,1035 ----
  # ifdef FEAT_BIG
  #  define FEAT_MOUSE_SGR
  # endif
! # if defined(FEAT_NORMAL) && defined(MSWIN)
  #  define DOS_MOUSE
  # endif
  # if defined(FEAT_NORMAL) && defined(__QNX__)
***************
*** 1136,1142 ****
   * +clientserver	Remote control via the remote_send() function
   *			and the --remote argument
   */
! #if (defined(WIN32) || defined(FEAT_XCLIPBOARD)) && defined(FEAT_EVAL)
  # define FEAT_CLIENTSERVER
  #endif
  
--- 1126,1132 ----
   * +clientserver	Remote control via the remote_send() function
   *			and the --remote argument
   */
! #if (defined(MSWIN) || defined(FEAT_XCLIPBOARD)) && defined(FEAT_EVAL)
  # define FEAT_CLIENTSERVER
  #endif
  
***************
*** 1145,1151 ****
   *			when --servername is not passed on the command line.
   */
  #if defined(FEAT_CLIENTSERVER) && !defined(FEAT_AUTOSERVERNAME)
! # ifdef WIN3264
      /* Always enabled on MS-Windows. */
  #  define FEAT_AUTOSERVERNAME
  # else
--- 1135,1141 ----
   *			when --servername is not passed on the command line.
   */
  #if defined(FEAT_CLIENTSERVER) && !defined(FEAT_AUTOSERVERNAME)
! # ifdef MSWIN
      /* Always enabled on MS-Windows. */
  #  define FEAT_AUTOSERVERNAME
  # else
***************
*** 1169,1178 ****
   */
  #ifdef FEAT_NORMAL
  /* MS-DOS console and Win32 console can change cursor shape */
! # if defined(WIN3264) && !defined(FEAT_GUI_W32)
  #  define MCH_CURSOR_SHAPE
  # endif
! # if defined(FEAT_GUI_W32) || defined(FEAT_GUI_MOTIF) \
  	|| defined(FEAT_GUI_ATHENA) || defined(FEAT_GUI_GTK) \
  	|| defined(FEAT_GUI_PHOTON)
  #  define FEAT_MOUSESHAPE
--- 1159,1168 ----
   */
  #ifdef FEAT_NORMAL
  /* MS-DOS console and Win32 console can change cursor shape */
! # if defined(MSWIN) && !defined(FEAT_GUI_MSWIN)
  #  define MCH_CURSOR_SHAPE
  # endif
! # if defined(FEAT_GUI_MSWIN) || defined(FEAT_GUI_MOTIF) \
  	|| defined(FEAT_GUI_ATHENA) || defined(FEAT_GUI_GTK) \
  	|| defined(FEAT_GUI_PHOTON)
  #  define FEAT_MOUSESHAPE
***************
*** 1189,1195 ****
  # define CURSOR_SHAPE
  #endif
  
! #if defined(FEAT_MZSCHEME) && (defined(FEAT_GUI_W32) || defined(FEAT_GUI_GTK)    \
  	|| defined(FEAT_GUI_MOTIF) || defined(FEAT_GUI_ATHENA)	\
  	|| defined(FEAT_GUI_MAC))
  # define MZSCHEME_GUI_THREADS
--- 1179,1185 ----
  # define CURSOR_SHAPE
  #endif
  
! #if defined(FEAT_MZSCHEME) && (defined(FEAT_GUI_MSWIN) || defined(FEAT_GUI_GTK)    \
  	|| defined(FEAT_GUI_MOTIF) || defined(FEAT_GUI_ATHENA)	\
  	|| defined(FEAT_GUI_MAC))
  # define MZSCHEME_GUI_THREADS
***************
*** 1263,1269 ****
  # if ((defined(FEAT_GUI_MOTIF) || defined(FEAT_GUI_ATHENA)) \
  		&& defined(HAVE_X11_XPM_H)) \
  	|| defined(FEAT_GUI_GTK) \
! 	|| (defined(WIN32) && defined(FEAT_GUI))
  #  define FEAT_SIGN_ICONS
  # endif
  #endif
--- 1253,1259 ----
  # if ((defined(FEAT_GUI_MOTIF) || defined(FEAT_GUI_ATHENA)) \
  		&& defined(HAVE_X11_XPM_H)) \
  	|| defined(FEAT_GUI_GTK) \
! 	|| (defined(MSWIN) && defined(FEAT_GUI))
  #  define FEAT_SIGN_ICONS
  # endif
  #endif
***************
*** 1274,1286 ****
   *			Only for GUIs where it was implemented.
   */
  #if (defined(FEAT_GUI_MOTIF) || defined(FEAT_GUI_ATHENA) \
! 	|| defined(FEAT_GUI_GTK) || defined(FEAT_GUI_W32)) \
  	&& (   ((defined(FEAT_TOOLBAR) || defined(FEAT_GUI_TABLINE)) \
! 		&& !defined(FEAT_GUI_GTK) && !defined(FEAT_GUI_W32)) \
  	    || defined(FEAT_NETBEANS_INTG) || defined(FEAT_EVAL))
  # define FEAT_BEVAL_GUI
  # if !defined(FEAT_XFONTSET) && !defined(FEAT_GUI_GTK) \
! 	&& !defined(FEAT_GUI_W32)
  #  define FEAT_XFONTSET
  # endif
  #endif
--- 1264,1276 ----
   *			Only for GUIs where it was implemented.
   */
  #if (defined(FEAT_GUI_MOTIF) || defined(FEAT_GUI_ATHENA) \
! 	|| defined(FEAT_GUI_GTK) || defined(FEAT_GUI_MSWIN)) \
  	&& (   ((defined(FEAT_TOOLBAR) || defined(FEAT_GUI_TABLINE)) \
! 		&& !defined(FEAT_GUI_GTK) && !defined(FEAT_GUI_MSWIN)) \
  	    || defined(FEAT_NETBEANS_INTG) || defined(FEAT_EVAL))
  # define FEAT_BEVAL_GUI
  # if !defined(FEAT_XFONTSET) && !defined(FEAT_GUI_GTK) \
! 	&& !defined(FEAT_GUI_MSWIN)
  #  define FEAT_XFONTSET
  # endif
  #endif
***************
*** 1293,1299 ****
   * +balloon_eval_term	Allow balloon expression evaluation in the terminal.
   */
  #if defined(FEAT_HUGE) && defined(FEAT_TIMERS) && \
! 	(defined(UNIX) || defined(VMS) || (defined(WIN32) && !defined(FEAT_GUI_W32)))
  # define FEAT_BEVAL_TERM
  #endif
  
--- 1283,1289 ----
   * +balloon_eval_term	Allow balloon expression evaluation in the terminal.
   */
  #if defined(FEAT_HUGE) && defined(FEAT_TIMERS) && \
! 	(defined(UNIX) || defined(VMS) || (defined(MSWIN) && !defined(FEAT_GUI_MSWIN)))
  # define FEAT_BEVAL_TERM
  #endif
  
***************
*** 1340,1352 ****
   * +filterpipe
   */
  #if (defined(UNIX) && !defined(USE_SYSTEM)) \
! 	    || (defined(WIN3264) && defined(FEAT_GUI_W32))
  # define FEAT_FILTERPIPE
  #endif
  
  /*
   * +vtp: Win32 virtual console.
   */
! #if !defined(FEAT_GUI) && defined(WIN3264)
  # define FEAT_VTP
  #endif
--- 1330,1342 ----
   * +filterpipe
   */
  #if (defined(UNIX) && !defined(USE_SYSTEM)) \
! 	    || (defined(MSWIN) && defined(FEAT_GUI_MSWIN))
  # define FEAT_FILTERPIPE
  #endif
  
  /*
   * +vtp: Win32 virtual console.
   */
! #if !defined(FEAT_GUI) && defined(MSWIN)
  # define FEAT_VTP
  #endif
*** ../vim-8.1.0940/src/fileio.c	2019-02-15 21:06:05.338289743 +0100
--- src/fileio.c	2019-02-17 17:29:18.548788886 +0100
***************
*** 49,55 ****
  #define FIO_UCS2	0x04	/* convert UCS-2 */
  #define FIO_UCS4	0x08	/* convert UCS-4 */
  #define FIO_UTF16	0x10	/* convert UTF-16 */
! #ifdef WIN3264
  # define FIO_CODEPAGE	0x20	/* convert MS-Windows codepage */
  # define FIO_PUT_CP(x) (((x) & 0xffff) << 16)	/* put codepage in top word */
  # define FIO_GET_CP(x)	(((x)>>16) & 0xffff)	/* get codepage from top word */
--- 49,55 ----
  #define FIO_UCS2	0x04	/* convert UCS-2 */
  #define FIO_UCS4	0x08	/* convert UCS-4 */
  #define FIO_UTF16	0x10	/* convert UTF-16 */
! #ifdef MSWIN
  # define FIO_CODEPAGE	0x20	/* convert MS-Windows codepage */
  # define FIO_PUT_CP(x) (((x) & 0xffff) << 16)	/* put codepage in top word */
  # define FIO_GET_CP(x)	(((x)>>16) & 0xffff)	/* get codepage from top word */
***************
*** 106,112 ****
  static int get_fio_flags(char_u *ptr);
  static char_u *check_for_bom(char_u *p, long size, int *lenp, int flags);
  static int make_bom(char_u *buf, char_u *name);
! #ifdef WIN3264
  static int get_win_fio_flags(char_u *ptr);
  #endif
  #ifdef MACOS_CONVERT
--- 106,112 ----
  static int get_fio_flags(char_u *ptr);
  static char_u *check_for_bom(char_u *p, long size, int *lenp, int flags);
  static int make_bom(char_u *buf, char_u *name);
! #ifdef MSWIN
  static int get_win_fio_flags(char_u *ptr);
  #endif
  #ifdef MACOS_CONVERT
***************
*** 1038,1044 ****
  	else if (enc_utf8 || STRCMP(p_enc, "latin1") == 0)
  	    fio_flags = get_fio_flags(fenc);
  
! #ifdef WIN3264
  	/*
  	 * Conversion from an MS-Windows codepage to UTF-8 or another codepage
  	 * is handled with MultiByteToWideChar().
--- 1038,1044 ----
  	else if (enc_utf8 || STRCMP(p_enc, "latin1") == 0)
  	    fio_flags = get_fio_flags(fenc);
  
! #ifdef MSWIN
  	/*
  	 * Conversion from an MS-Windows codepage to UTF-8 or another codepage
  	 * is handled with MultiByteToWideChar().
***************
*** 1229,1235 ****
  		    size = (size * 2 / 3) & ~3;
  		else if (fio_flags == FIO_UCSBOM)
  		    size = size / ICONV_MULT;	/* worst case */
! #ifdef WIN3264
  		else if (fio_flags & FIO_CODEPAGE)
  		    size = size / ICONV_MULT;	/* also worst case */
  #endif
--- 1229,1235 ----
  		    size = (size * 2 / 3) & ~3;
  		else if (fio_flags == FIO_UCSBOM)
  		    size = size / ICONV_MULT;	/* worst case */
! #ifdef MSWIN
  		else if (fio_flags & FIO_CODEPAGE)
  		    size = size / ICONV_MULT;	/* also worst case */
  #endif
***************
*** 1590,1596 ****
  	    }
  #endif
  
! #ifdef WIN3264
  	    if (fio_flags & FIO_CODEPAGE)
  	    {
  		char_u	*src, *dst;
--- 1590,1596 ----
  	    }
  #endif
  
! #ifdef MSWIN
  	    if (fio_flags & FIO_CODEPAGE)
  	    {
  		char_u	*src, *dst;
***************
*** 2559,2565 ****
  	curbuf->b_op_end.lnum = from + linecnt;
  	curbuf->b_op_end.col = 0;
  
! #ifdef WIN32
  	/*
  	 * Work around a weird problem: When a file has two links (only
  	 * possible on NTFS) and we write through one link, then stat() it
--- 2559,2565 ----
  	curbuf->b_op_end.lnum = from + linecnt;
  	curbuf->b_op_end.col = 0;
  
! #ifdef MSWIN
  	/*
  	 * Work around a weird problem: When a file has two links (only
  	 * possible on NTFS) and we write through one link, then stat() it
***************
*** 3601,3613 ****
       */
      if (!(append && *p_pm == NUL) && !filtering && perm >= 0 && dobackup)
      {
! #if defined(UNIX) || defined(WIN32)
  	stat_T	    st;
  #endif
  
  	if ((bkc & BKC_YES) || append)	/* "yes" */
  	    backup_copy = TRUE;
! #if defined(UNIX) || defined(WIN32)
  	else if ((bkc & BKC_AUTO))	/* "auto" */
  	{
  	    int		i;
--- 3601,3613 ----
       */
      if (!(append && *p_pm == NUL) && !filtering && perm >= 0 && dobackup)
      {
! #if defined(UNIX) || defined(MSWIN)
  	stat_T	    st;
  #endif
  
  	if ((bkc & BKC_YES) || append)	/* "yes" */
  	    backup_copy = TRUE;
! #if defined(UNIX) || defined(MSWIN)
  	else if ((bkc & BKC_AUTO))	/* "auto" */
  	{
  	    int		i;
***************
*** 3632,3638 ****
  		backup_copy = TRUE;
  	    else
  # else
! #  ifdef WIN32
  	    /* On NTFS file systems hard links are possible. */
  	    if (mch_is_linked(fname))
  		backup_copy = TRUE;
--- 3632,3638 ----
  		backup_copy = TRUE;
  	    else
  # else
! #  ifdef MSWIN
  	    /* On NTFS file systems hard links are possible. */
  	    if (mch_is_linked(fname))
  		backup_copy = TRUE;
***************
*** 3715,3721 ****
  		    && (lstat_res != 0 || st.st_ino == st_old.st_ino))
  		backup_copy = FALSE;
  # else
! #  if defined(WIN32)
  	    /* Symlinks. */
  	    if ((bkc & BKC_BREAKSYMLINK) && mch_is_symbolic_link(fname))
  		backup_copy = FALSE;
--- 3715,3721 ----
  		    && (lstat_res != 0 || st.st_ino == st_old.st_ino))
  		backup_copy = FALSE;
  # else
! #  if defined(MSWIN)
  	    /* Symlinks. */
  	    if ((bkc & BKC_BREAKSYMLINK) && mch_is_symbolic_link(fname))
  		backup_copy = FALSE;
***************
*** 3744,3750 ****
  	    stat_T	st_new;
  	    char_u	*dirp;
  	    char_u	*rootname;
! #if defined(UNIX) || defined(WIN3264)
  	    char_u      *p;
  #endif
  #if defined(UNIX)
--- 3744,3750 ----
  	    stat_T	st_new;
  	    char_u	*dirp;
  	    char_u	*rootname;
! #if defined(UNIX) || defined(MSWIN)
  	    char_u      *p;
  #endif
  #if defined(UNIX)
***************
*** 3785,3791 ****
  		 */
  		(void)copy_option_part(&dirp, copybuf, BUFSIZE, ",");
  
! #if defined(UNIX) || defined(WIN3264)
  		p = copybuf + STRLEN(copybuf);
  		if (after_pathsep(copybuf, p) && p[-1] == p[-2])
  		    // Ends with '//', use full path
--- 3785,3791 ----
  		 */
  		(void)copy_option_part(&dirp, copybuf, BUFSIZE, ",");
  
! #if defined(UNIX) || defined(MSWIN)
  		p = copybuf + STRLEN(copybuf);
  		if (after_pathsep(copybuf, p) && p[-1] == p[-2])
  		    // Ends with '//', use full path
***************
*** 4018,4024 ****
  		 */
  		(void)copy_option_part(&dirp, IObuff, IOSIZE, ",");
  
! #if defined(UNIX) || defined(WIN3264)
  		p = IObuff + STRLEN(IObuff);
  		if (after_pathsep(IObuff, p) && p[-1] == p[-2])
  		    // path ends with '//', use full path
--- 4018,4024 ----
  		 */
  		(void)copy_option_part(&dirp, IObuff, IOSIZE, ",");
  
! #if defined(UNIX) || defined(MSWIN)
  		p = IObuff + STRLEN(IObuff);
  		if (after_pathsep(IObuff, p) && p[-1] == p[-2])
  		    // path ends with '//', use full path
***************
*** 4177,4183 ****
  	}
      }
  
! #ifdef WIN3264
      if (converted && wb_flags == 0 && (wb_flags = get_win_fio_flags(fenc)) != 0)
      {
  	/* Convert UTF-8 -> UCS-2 and UCS-2 -> DBCS.  Worst-case * 4: */
--- 4177,4183 ----
  	}
      }
  
! #ifdef MSWIN
      if (converted && wb_flags == 0 && (wb_flags = get_win_fio_flags(fenc)) != 0)
      {
  	/* Convert UTF-8 -> UCS-2 and UCS-2 -> DBCS.  Worst-case * 4: */
***************
*** 4416,4422 ****
  		vim_ignored = ftruncate(fd, (off_t)0);
  #endif
  
! #if defined(WIN3264)
  	    if (backup != NULL && overwriting && !append)
  	    {
  		if (backup_copy)
--- 4416,4422 ----
  		vim_ignored = ftruncate(fd, (off_t)0);
  #endif
  
! #if defined(MSWIN)
  	    if (backup != NULL && overwriting && !append)
  	    {
  		if (backup_copy)
***************
*** 5430,5436 ****
  	    }
  	}
  
! #ifdef WIN3264
  	else if (flags & FIO_CODEPAGE)
  	{
  	    /*
--- 5430,5436 ----
  	    }
  	}
  
! #ifdef MSWIN
  	else if (flags & FIO_CODEPAGE)
  	{
  	    /*
***************
*** 5869,5875 ****
      return 0;
  }
  
! #ifdef WIN3264
  /*
   * Check "ptr" for a MS-Windows codepage name and return the FIO_ flags needed
   * for the conversion MS-Windows can do for us.  Also accept "utf-8".
--- 5869,5875 ----
      return 0;
  }
  
! #ifdef MSWIN
  /*
   * Check "ptr" for a MS-Windows codepage name and return the FIO_ flags needed
   * for the conversion MS-Windows can do for us.  Also accept "utf-8".
***************
*** 6041,6049 ****
  	p = full_path + len;
  #if defined(MSWIN)
  	/*
! 	 * MSWIN: when a file is in the root directory, dir_name will end in a
! 	 * slash, since C: by itself does not define a specific dir. In this
! 	 * case p may already be correct. <negri>
  	 */
  	if (!((len > 2) && (*(p - 2) == ':')))
  #endif
--- 6041,6049 ----
  	p = full_path + len;
  #if defined(MSWIN)
  	/*
! 	 * MS-Windows: when a file is in the root directory, dir_name will end
! 	 * in a slash, since C: by itself does not define a specific dir. In
! 	 * this case p may already be correct. <negri>
  	 */
  	if (!((len > 2) && (*(p - 2) == ':')))
  #endif
***************
*** 6298,6304 ****
  	else if ((int)STRLEN(e) + extlen > 4)
  	    s = e + 4 - extlen;
      }
! #ifdef WIN3264
      /*
       * If there is no file name, and the extension starts with '.', put a
       * '_' before the dot, because just ".ext" may be invalid if it's on a
--- 6298,6304 ----
  	else if ((int)STRLEN(e) + extlen > 4)
  	    s = e + 4 - extlen;
      }
! #ifdef MSWIN
      /*
       * If there is no file name, and the extension starts with '.', put a
       * '_' before the dot, because just ".ext" may be invalid if it's on a
***************
*** 6427,6433 ****
  	    use_tmp_file = TRUE;
      }
  #endif
! #ifdef WIN3264
      {
  	BY_HANDLE_FILE_INFORMATION info1, info2;
  
--- 6427,6433 ----
  	    use_tmp_file = TRUE;
      }
  #endif
! #ifdef MSWIN
      {
  	BY_HANDLE_FILE_INFORMATION info1, info2;
  
***************
*** 7189,7195 ****
      /* A symbolic link to a directory itself is deleted, not the directory it
       * points to. */
      if (
! # if defined(UNIX) || defined(WIN32)
  	 mch_isrealdir(name)
  # else
  	 mch_isdir(name)
--- 7189,7195 ----
      /* A symbolic link to a directory itself is deleted, not the directory it
       * points to. */
      if (
! # if defined(UNIX) || defined(MSWIN)
  	 mch_isrealdir(name)
  # else
  	 mch_isdir(name)
***************
*** 7276,7282 ****
  {
  #ifdef USE_TMPNAM
      char_u	itmp[L_tmpnam];	/* use tmpnam() */
! #elif defined(WIN3264)
      WCHAR	itmp[TEMPNAMELEN];
  #else
      char_u	itmp[TEMPNAMELEN];
--- 7276,7282 ----
  {
  #ifdef USE_TMPNAM
      char_u	itmp[L_tmpnam];	/* use tmpnam() */
! #elif defined(MSWIN)
      WCHAR	itmp[TEMPNAMELEN];
  #else
      char_u	itmp[TEMPNAMELEN];
***************
*** 7398,7404 ****
  
  #else /* TEMPDIRNAMES */
  
! # ifdef WIN3264
      WCHAR	wszTempFile[_MAX_PATH + 1];
      WCHAR	buf4[4];
      char_u	*retval;
--- 7398,7404 ----
  
  #else /* TEMPDIRNAMES */
  
! # ifdef MSWIN
      WCHAR	wszTempFile[_MAX_PATH + 1];
      WCHAR	buf4[4];
      char_u	*retval;
***************
*** 7428,7434 ****
  		*p = '/';
      return retval;
  
! # else /* WIN3264 */
  
  #  ifdef USE_TMPNAM
      char_u	*p;
--- 7428,7434 ----
  		*p = '/';
      return retval;
  
! # else // MSWIN
  
  #  ifdef USE_TMPNAM
      char_u	*p;
***************
*** 7466,7472 ****
  #  endif
  
      return vim_strsave(itmp);
! # endif /* WIN3264 */
  #endif /* TEMPDIRNAMES */
  }
  
--- 7466,7472 ----
  #  endif
  
      return vim_strsave(itmp);
! # endif // MSWIN
  #endif /* TEMPDIRNAMES */
  }
  
*** ../vim-8.1.0940/src/getchar.c	2019-02-16 15:09:21.213946217 +0100
--- src/getchar.c	2019-02-17 17:29:18.548788886 +0100
***************
*** 1623,1629 ****
  	    }
  	    c = TO_SPECIAL(c2, c);
  
! #if defined(FEAT_GUI_W32) && defined(FEAT_MENU) && defined(FEAT_TEAROFF)
  	    /* Handle K_TEAROFF here, the caller of vgetc() doesn't need to
  	     * know that a menu was torn off */
  	    if (c == K_TEAROFF)
--- 1623,1629 ----
  	    }
  	    c = TO_SPECIAL(c2, c);
  
! #if defined(FEAT_GUI_MSWIN) && defined(FEAT_MENU) && defined(FEAT_TEAROFF)
  	    /* Handle K_TEAROFF here, the caller of vgetc() doesn't need to
  	     * know that a menu was torn off */
  	    if (c == K_TEAROFF)
***************
*** 1679,1685 ****
  	    case K_KMULTIPLY:	c = '*'; break;
  	    case K_KENTER:	c = CAR; break;
  	    case K_KPOINT:
! #ifdef WIN32
  				// Can be either '.' or a ',',
  				// depending on the type of keypad.
  				c = MapVirtualKey(VK_DECIMAL, 2); break;
--- 1679,1685 ----
  	    case K_KMULTIPLY:	c = '*'; break;
  	    case K_KENTER:	c = CAR; break;
  	    case K_KPOINT:
! #ifdef MSWIN
  				// Can be either '.' or a ',',
  				// depending on the type of keypad.
  				c = MapVirtualKey(VK_DECIMAL, 2); break;
***************
*** 3107,3113 ****
  	if (p[0] == NUL || (p[0] == K_SPECIAL
  		    /* timeout may generate K_CURSORHOLD */
  		    && (i < 2 || p[1] != KS_EXTRA || p[2] != (int)KE_CURSORHOLD)
! #if defined(WIN3264) && !defined(FEAT_GUI)
  		    /* Win32 console passes modifiers */
  		    && (i < 2 || p[1] != KS_MODIFIER)
  #endif
--- 3107,3113 ----
  	if (p[0] == NUL || (p[0] == K_SPECIAL
  		    /* timeout may generate K_CURSORHOLD */
  		    && (i < 2 || p[1] != KS_EXTRA || p[2] != (int)KE_CURSORHOLD)
! #if defined(MSWIN) && !defined(FEAT_GUI)
  		    /* Win32 console passes modifiers */
  		    && (i < 2 || p[1] != KS_MODIFIER)
  #endif
*** ../vim-8.1.0940/src/glbl_ime.cpp	2019-01-24 17:18:37.599462306 +0100
--- src/glbl_ime.cpp	2019-02-17 17:29:18.548788886 +0100
***************
*** 134,140 ****
      if (pIApp == NULL || pIApp->OnDefWindowProc(hWnd, Msg,
  					    wParam, lParam, &lResult) != S_OK)
      {
! #if defined(WIN3264)
  	if (wide_WindowProc)
  	    lResult = DefWindowProcW(hWnd, Msg, wParam, lParam);
  	else
--- 134,140 ----
      if (pIApp == NULL || pIApp->OnDefWindowProc(hWnd, Msg,
  					    wParam, lParam, &lResult) != S_OK)
      {
! #if defined(MSWIN)
  	if (wide_WindowProc)
  	    lResult = DefWindowProcW(hWnd, Msg, wParam, lParam);
  	else
*** ../vim-8.1.0940/src/globals.h	2019-02-16 15:09:21.217946198 +0100
--- src/globals.h	2019-02-17 17:29:18.548788886 +0100
***************
*** 19,25 ****
   */
  EXTERN long	Rows			/* nr of rows in the screen */
  #ifdef DO_INIT
! # if defined(WIN3264)
  			    = 25L
  # else
  			    = 24L
--- 19,25 ----
   */
  EXTERN long	Rows			/* nr of rows in the screen */
  #ifdef DO_INIT
! # if defined(MSWIN)
  			    = 25L
  # else
  			    = 24L
***************
*** 818,824 ****
  EXTERN int	enc_unicode INIT(= 0);	/* 2: UCS-2 or UTF-16, 4: UCS-4 */
  EXTERN int	enc_utf8 INIT(= FALSE);		/* UTF-8 encoded Unicode */
  EXTERN int	enc_latin1like INIT(= TRUE);	/* 'encoding' is latin1 comp. */
! #if defined(WIN3264) || defined(FEAT_CYGWIN_WIN32_CLIPBOARD)
  /* Codepage nr of 'encoding'.  Negative means it's not been set yet, zero
   * means 'encoding' is not a valid codepage. */
  EXTERN int	enc_codepage INIT(= -1);
--- 818,824 ----
  EXTERN int	enc_unicode INIT(= 0);	/* 2: UCS-2 or UTF-16, 4: UCS-4 */
  EXTERN int	enc_utf8 INIT(= FALSE);		/* UTF-8 encoded Unicode */
  EXTERN int	enc_latin1like INIT(= TRUE);	/* 'encoding' is latin1 comp. */
! #if defined(MSWIN) || defined(FEAT_CYGWIN_WIN32_CLIPBOARD)
  /* Codepage nr of 'encoding'.  Negative means it's not been set yet, zero
   * means 'encoding' is not a valid codepage. */
  EXTERN int	enc_codepage INIT(= -1);
***************
*** 826,832 ****
  #endif
  EXTERN int	has_mbyte INIT(= 0);		/* any multi-byte encoding */
  
! #if defined(WIN3264)
  EXTERN int	wide_WindowProc INIT(= FALSE);	/* use wide WindowProc() */
  #endif
  
--- 826,832 ----
  #endif
  EXTERN int	has_mbyte INIT(= 0);		/* any multi-byte encoding */
  
! #if defined(MSWIN)
  EXTERN int	wide_WindowProc INIT(= FALSE);	/* use wide WindowProc() */
  #endif
  
***************
*** 1296,1302 ****
  EXTERN int	echo_wid_arg INIT(= FALSE);	/* --echo-wid argument */
  #endif
  
! #ifdef FEAT_GUI_W32
  /*
   * The value of the --windowid argument.
   * For embedding gvim inside another application.
--- 1296,1302 ----
  EXTERN int	echo_wid_arg INIT(= FALSE);	/* --echo-wid argument */
  #endif
  
! #ifdef FEAT_GUI_MSWIN
  /*
   * The value of the --windowid argument.
   * For embedding gvim inside another application.
***************
*** 1645,1651 ****
  EXTERN int *eval_lavars_used INIT(= NULL);
  #endif
  
! #ifdef WIN3264
  EXTERN int ctrl_break_was_pressed INIT(= FALSE);
  #endif
  
--- 1645,1651 ----
  EXTERN int *eval_lavars_used INIT(= NULL);
  #endif
  
! #ifdef MSWIN
  EXTERN int ctrl_break_was_pressed INIT(= FALSE);
  #endif
  
*** ../vim-8.1.0940/src/gui.c	2019-01-31 18:26:05.734803539 +0100
--- src/gui.c	2019-02-17 17:29:18.548788886 +0100
***************
*** 749,755 ****
  						     &general_beval_cb, NULL);
  	}
  #  else
! #   ifdef FEAT_GUI_W32
  	balloonEval = gui_mch_create_beval_area(NULL, NULL,
  						     &general_beval_cb, NULL);
  #   endif
--- 749,755 ----
  						     &general_beval_cb, NULL);
  	}
  #  else
! #   ifdef FEAT_GUI_MSWIN
  	balloonEval = gui_mch_create_beval_area(NULL, NULL,
  						     &general_beval_cb, NULL);
  #   endif
***************
*** 2432,2438 ****
  	int	curr_wide = FALSE;  /* use 'guifontwide' */
  	int	prev_wide = FALSE;
  	int	wide_changed;
! # ifdef WIN3264
  	int	sep_comp = FALSE;   /* Don't separate composing chars. */
  # else
  	int	sep_comp = TRUE;    /* Separate composing chars. */
--- 2432,2438 ----
  	int	curr_wide = FALSE;  /* use 'guifontwide' */
  	int	prev_wide = FALSE;
  	int	wide_changed;
! # ifdef MSWIN
  	int	sep_comp = FALSE;   /* Don't separate composing chars. */
  # else
  	int	sep_comp = TRUE;    /* Separate composing chars. */
***************
*** 2568,2574 ****
  	/* Draw the sign on top of the spaces. */
  	gui_mch_drawsign(gui.row, col, gui.highlight_mask);
  # if defined(FEAT_NETBEANS_INTG) && (defined(FEAT_GUI_X11) \
! 	|| defined(FEAT_GUI_GTK) || defined(FEAT_GUI_W32))
      if (multi_sign)
  	netbeans_draw_multisign_indicator(gui.row);
  # endif
--- 2568,2574 ----
  	/* Draw the sign on top of the spaces. */
  	gui_mch_drawsign(gui.row, col, gui.highlight_mask);
  # if defined(FEAT_NETBEANS_INTG) && (defined(FEAT_GUI_X11) \
! 	|| defined(FEAT_GUI_GTK) || defined(FEAT_GUI_MSWIN))
      if (multi_sign)
  	netbeans_draw_multisign_indicator(gui.row);
  # endif
***************
*** 3561,3567 ****
  		fix_size = TRUE;
  	}
  #endif
! #if defined(FEAT_MENU) && !(defined(WIN3264) && !defined(FEAT_TEAROFF))
  	if (using_tearoff != prev_tearoff)
  	{
  	    gui_mch_toggle_tearoffs(using_tearoff);
--- 3561,3567 ----
  		fix_size = TRUE;
  	}
  #endif
! #if defined(FEAT_MENU) && !(defined(MSWIN) && !defined(FEAT_TEAROFF))
  	if (using_tearoff != prev_tearoff)
  	{
  	    gui_mch_toggle_tearoffs(using_tearoff);
***************
*** 4125,4131 ****
      /* Update the horizontal scrollbar */
      gui_update_horiz_scrollbar(force);
  
! #ifndef WIN3264
      /* Return straight away if there is neither a left nor right scrollbar.
       * On MS-Windows this is required anyway for scrollwheel messages. */
      if (!gui.which_scrollbars[SBAR_LEFT] && !gui.which_scrollbars[SBAR_RIGHT])
--- 4125,4131 ----
      /* Update the horizontal scrollbar */
      gui_update_horiz_scrollbar(force);
  
! #ifndef MSWIN
      /* Return straight away if there is neither a left nor right scrollbar.
       * On MS-Windows this is required anyway for scrollwheel messages. */
      if (!gui.which_scrollbars[SBAR_LEFT] && !gui.which_scrollbars[SBAR_RIGHT])
***************
*** 4879,4887 ****
  
  /*
   * Find window where the mouse pointer "x" / "y" coordinate is in.
   */
      static win_T *
! xy2win(int x UNUSED, int y UNUSED)
  {
      int		row;
      int		col;
--- 4879,4888 ----
  
  /*
   * Find window where the mouse pointer "x" / "y" coordinate is in.
+  * As a side effect update the shape of the mouse pointer.
   */
      static win_T *
! xy2win(int x, int y)
  {
      int		row;
      int		col;
***************
*** 4951,4958 ****
  	ex_next(eap);
  }
  
! #if ((defined(FEAT_GUI_X11) || defined(FEAT_GUI_GTK) || defined(FEAT_GUI_W32) \
! 	|| defined(FEAT_GUI_PHOTON)) && defined(FEAT_TOOLBAR)) || defined(PROTO)
  /*
   * This is shared between Athena, Motif and GTK.
   */
--- 4952,4960 ----
  	ex_next(eap);
  }
  
! #if ((defined(FEAT_GUI_X11) || defined(FEAT_GUI_GTK) \
! 	    || defined(FEAT_GUI_MSWIN) || defined(FEAT_GUI_PHOTON)) \
! 	    && defined(FEAT_TOOLBAR)) || defined(PROTO)
  /*
   * This is shared between Athena, Motif and GTK.
   */
*** ../vim-8.1.0940/src/gui.h	2019-01-24 17:18:37.599462306 +0100
--- src/gui.h	2019-02-17 17:29:18.548788886 +0100
***************
*** 90,96 ****
   * X_2_COL  - Convert X pixel coord into character column.
   * Y_2_ROW  - Convert Y pixel coord into character row.
   */
! #ifdef FEAT_GUI_W32
  # define TEXT_X(col)	((col) * gui.char_width)
  # define TEXT_Y(row)	((row) * gui.char_height + gui.char_ascent)
  # define FILL_X(col)	((col) * gui.char_width)
--- 90,96 ----
   * X_2_COL  - Convert X pixel coord into character column.
   * Y_2_ROW  - Convert Y pixel coord into character row.
   */
! #ifdef FEAT_GUI_MSWIN
  # define TEXT_X(col)	((col) * gui.char_width)
  # define TEXT_Y(row)	((row) * gui.char_height + gui.char_ascent)
  # define FILL_X(col)	((col) * gui.char_width)
***************
*** 406,412 ****
  #endif	/* FEAT_GUI_GTK */
  
  #if defined(FEAT_GUI_TABLINE) \
! 	&& (defined(FEAT_GUI_W32) || defined(FEAT_GUI_MOTIF) \
  		|| defined(FEAT_GUI_MAC))
      int		tabline_height;
  #endif
--- 406,412 ----
  #endif	/* FEAT_GUI_GTK */
  
  #if defined(FEAT_GUI_TABLINE) \
! 	&& (defined(FEAT_GUI_MSWIN) || defined(FEAT_GUI_MOTIF) \
  		|| defined(FEAT_GUI_MAC))
      int		tabline_height;
  #endif
*** ../vim-8.1.0940/src/gui_beval.c	2019-01-17 15:43:21.761878368 +0100
--- src/gui_beval.c	2019-02-17 17:29:18.548788886 +0100
***************
*** 13,19 ****
  #if defined(FEAT_BEVAL_GUI) || defined(PROTO)
  
  /* on Win32 only get_beval_info() is required */
! #if !defined(FEAT_GUI_W32) || defined(PROTO)
  
  #ifdef FEAT_GUI_GTK
  # if GTK_CHECK_VERSION(3,0,0)
--- 13,19 ----
  #if defined(FEAT_BEVAL_GUI) || defined(PROTO)
  
  /* on Win32 only get_beval_info() is required */
! #if !defined(FEAT_GUI_MSWIN) || defined(PROTO)
  
  #ifdef FEAT_GUI_GTK
  # if GTK_CHECK_VERSION(3,0,0)
***************
*** 197,206 ****
      return current_beval;
  }
  #endif
! #endif /* !FEAT_GUI_W32 */
  
  #if defined(FEAT_NETBEANS_INTG) || defined(FEAT_EVAL) || defined(PROTO)
! # if !defined(FEAT_GUI_W32) || defined(PROTO)
  
  /*
   * Show a balloon with "mesg".
--- 197,206 ----
      return current_beval;
  }
  #endif
! #endif /* !FEAT_GUI_MSWIN */
  
  #if defined(FEAT_NETBEANS_INTG) || defined(FEAT_EVAL) || defined(PROTO)
! # if !defined(FEAT_GUI_MSWIN) || defined(PROTO)
  
  /*
   * Show a balloon with "mesg".
***************
*** 214,223 ****
      else
  	undrawBalloon(beval);
  }
! # endif /* !FEAT_GUI_W32 */
  #endif /* FEAT_NETBEANS_INTG || PROTO */
  
! #if !defined(FEAT_GUI_W32) || defined(PROTO)
  #if defined(FEAT_BEVAL_TIP) || defined(PROTO)
  /*
   * Hide the given balloon.
--- 214,223 ----
      else
  	undrawBalloon(beval);
  }
! # endif /* !FEAT_GUI_MSWIN */
  #endif /* FEAT_NETBEANS_INTG || PROTO */
  
! #if !defined(FEAT_GUI_MSWIN) || defined(PROTO)
  #if defined(FEAT_BEVAL_TIP) || defined(PROTO)
  /*
   * Hide the given balloon.
***************
*** 1220,1225 ****
  }
  
  #endif /* !FEAT_GUI_GTK */
! #endif /* !FEAT_GUI_W32 */
  
  #endif /* FEAT_BEVAL_GUI */
--- 1220,1225 ----
  }
  
  #endif /* !FEAT_GUI_GTK */
! #endif /* !FEAT_GUI_MSWIN */
  
  #endif /* FEAT_BEVAL_GUI */
*** ../vim-8.1.0940/src/gui_gtk.c	2018-11-16 16:21:01.637310049 +0100
--- src/gui_gtk.c	2019-02-17 17:29:18.548788886 +0100
***************
*** 76,82 ****
  #  include <gdk/gdkkeysyms.h>
  # endif
  # include <gdk/gdk.h>
! # ifdef WIN3264
  #  include <gdk/gdkwin32.h>
  # else
  #  include <gdk/gdkx.h>
--- 76,82 ----
  #  include <gdk/gdkkeysyms.h>
  # endif
  # include <gdk/gdk.h>
! # ifdef MSWIN
  #  include <gdk/gdkwin32.h>
  # else
  #  include <gdk/gdkx.h>
*** ../vim-8.1.0940/src/gui_gtk_f.c	2018-09-18 22:29:59.888041388 +0200
--- src/gui_gtk_f.c	2019-02-17 17:29:18.548788886 +0100
***************
*** 32,38 ****
  #if !GTK_CHECK_VERSION(3,0,0)
  # include <gtk/gtksignal.h>
  #endif
! #ifdef WIN3264
  # include <gdk/gdkwin32.h>
  #else
  # include <gdk/gdkx.h>
--- 32,38 ----
  #if !GTK_CHECK_VERSION(3,0,0)
  # include <gtk/gtksignal.h>
  #endif
! #ifdef MSWIN
  # include <gdk/gdkwin32.h>
  #else
  # include <gdk/gdkx.h>
*** ../vim-8.1.0940/src/gui_gtk_x11.c	2019-02-03 15:28:25.052353153 +0100
--- src/gui_gtk_x11.c	2019-02-17 17:29:18.552788863 +0100
***************
*** 86,92 ****
  #  include <gdk/gdkkeysyms.h>
  # endif
  # include <gdk/gdk.h>
! # ifdef WIN3264
  #  include <gdk/gdkwin32.h>
  # else
  #  include <gdk/gdkx.h>
--- 86,92 ----
  #  include <gdk/gdkkeysyms.h>
  # endif
  # include <gdk/gdk.h>
! # ifdef MSWIN
  #  include <gdk/gdkwin32.h>
  # else
  #  include <gdk/gdkx.h>
*** ../vim-8.1.0940/src/if_cscope.c	2019-01-19 17:43:03.409449198 +0100
--- src/if_cscope.c	2019-02-17 17:29:18.552788863 +0100
***************
*** 548,554 ****
  	    goto add_err;
  
  	while (fname[strlen(fname)-1] == '/'
! #ifdef WIN32
  		|| fname[strlen(fname)-1] == '\\'
  #endif
  		)
--- 548,554 ----
  	    goto add_err;
  
  	while (fname[strlen(fname)-1] == '/'
! #ifdef MSWIN
  		|| fname[strlen(fname)-1] == '\\'
  #endif
  		)
***************
*** 790,796 ****
  #endif
      int		len;
      char	*prog, *cmd, *ppath = NULL;
! #ifdef WIN32
      int		fd;
      SECURITY_ATTRIBUTES sa;
      PROCESS_INFORMATION pi;
--- 790,796 ----
  #endif
      int		len;
      char	*prog, *cmd, *ppath = NULL;
! #ifdef MSWIN
      int		fd;
      SECURITY_ATTRIBUTES sa;
      PROCESS_INFORMATION pi;
***************
*** 844,850 ****
  	(void)close(to_cs[1]);
  	(void)close(from_cs[0]);
  #else
! 	/* WIN32 */
  	/* Create pipes to communicate with cscope */
  	sa.nLength = sizeof(SECURITY_ATTRIBUTES);
  	sa.bInheritHandle = TRUE;
--- 844,850 ----
  	(void)close(to_cs[1]);
  	(void)close(from_cs[0]);
  #else
! 	/* MSWIN */
  	/* Create pipes to communicate with cscope */
  	sa.nLength = sizeof(SECURITY_ATTRIBUTES);
  	sa.bInheritHandle = TRUE;
***************
*** 874,880 ****
  #ifdef UNIX
  	    return CSCOPE_FAILURE;
  #else
! 	    /* WIN32 */
  	    goto err_closing;
  #endif
  	}
--- 874,880 ----
  #ifdef UNIX
  	    return CSCOPE_FAILURE;
  #else
! 	    /* MSWIN */
  	    goto err_closing;
  #endif
  	}
***************
*** 891,897 ****
  #ifdef UNIX
  		return CSCOPE_FAILURE;
  #else
! 		/* WIN32 */
  		goto err_closing;
  #endif
  	    }
--- 891,897 ----
  #ifdef UNIX
  		return CSCOPE_FAILURE;
  #else
! 		/* MSWIN */
  		goto err_closing;
  #endif
  	    }
***************
*** 910,916 ****
  #ifdef UNIX
  	    return CSCOPE_FAILURE;
  #else
! 	    /* WIN32 */
  	    goto err_closing;
  #endif
  	}
--- 910,916 ----
  #ifdef UNIX
  	    return CSCOPE_FAILURE;
  #else
! 	    /* MSWIN */
  	    goto err_closing;
  #endif
  	}
***************
*** 919,925 ****
  #if defined(UNIX)
  	(void)sprintf(cmd, "exec %s -dl -f %s", prog, csinfo[i].fname);
  #else
! 	/* WIN32 */
  	(void)sprintf(cmd, "%s -dl -f %s", prog, csinfo[i].fname);
  #endif
  	if (csinfo[i].ppath != NULL)
--- 919,925 ----
  #if defined(UNIX)
  	(void)sprintf(cmd, "exec %s -dl -f %s", prog, csinfo[i].fname);
  #else
! 	/* MSWIN */
  	(void)sprintf(cmd, "%s -dl -f %s", prog, csinfo[i].fname);
  #endif
  	if (csinfo[i].ppath != NULL)
***************
*** 971,977 ****
      }
  
  #else
!     /* WIN32 */
      /* Create a new process to run cscope and use pipes to talk with it */
      GetStartupInfo(&si);
      si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
--- 971,977 ----
      }
  
  #else
!     /* MSWIN */
      /* Create a new process to run cscope and use pipes to talk with it */
      GetStartupInfo(&si);
      si.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
***************
*** 1330,1336 ****
      csinfo[i].pid    = 0;
      csinfo[i].fr_fp  = NULL;
      csinfo[i].to_fp  = NULL;
! #if defined(WIN32)
      csinfo[i].hProc = NULL;
  #endif
  }
--- 1330,1336 ----
      csinfo[i].pid    = 0;
      csinfo[i].fr_fp  = NULL;
      csinfo[i].to_fp  = NULL;
! #if defined(MSWIN)
      csinfo[i].hProc = NULL;
  #endif
  }
***************
*** 1940,1952 ****
      s = path + strlen(path) - 1;
      for (i = 0; i < p_cspc; ++i)
  	while (s > path && *--s != '/'
! #ifdef WIN32
  		&& *--s != '\\'
  #endif
  		)
  	    ;
      if ((s > path && *s == '/')
! #ifdef WIN32
  	|| (s > path && *s == '\\')
  #endif
  	    )
--- 1940,1952 ----
      s = path + strlen(path) - 1;
      for (i = 0; i < p_cspc; ++i)
  	while (s > path && *--s != '/'
! #ifdef MSWIN
  		&& *--s != '\\'
  #endif
  		)
  	    ;
      if ((s > path && *s == '/')
! #ifdef MSWIN
  	|| (s > path && *s == '\\')
  #endif
  	    )
***************
*** 2433,2439 ****
      if (csinfo[i].ppath != NULL
  	    && (strncmp(name, csinfo[i].ppath, strlen(csinfo[i].ppath)) != 0)
  	    && (name[0] != '/')
! #ifdef WIN32
  	    && name[0] != '\\' && name[1] != ':'
  #endif
         )
--- 2433,2439 ----
      if (csinfo[i].ppath != NULL
  	    && (strncmp(name, csinfo[i].ppath, strlen(csinfo[i].ppath)) != 0)
  	    && (name[0] != '/')
! #ifdef MSWIN
  	    && name[0] != '\\' && name[1] != ':'
  #endif
         )
*** ../vim-8.1.0940/src/if_cscope.h	2016-08-29 22:42:20.000000000 +0200
--- src/if_cscope.h	2019-02-17 17:29:18.552788863 +0100
***************
*** 11,17 ****
  
  #if defined(FEAT_CSCOPE) || defined(PROTO)
  
! #if defined (WIN32)
  # ifndef WIN32_LEAN_AND_MEAN
  #  define WIN32_LEAN_AND_MEAN
  # endif
--- 11,17 ----
  
  #if defined(FEAT_CSCOPE) || defined(PROTO)
  
! #if defined (MSWIN)
  # ifndef WIN32_LEAN_AND_MEAN
  #  define WIN32_LEAN_AND_MEAN
  # endif
***************
*** 45,51 ****
      dev_t	    st_dev;	/* ID of dev containing cscope db */
      ino_t	    st_ino;	/* inode number of cscope db */
  #else
! # if defined(WIN32)
      DWORD	    pid;	/* PID of the connected cscope process. */
      HANDLE	    hProc;	/* cscope process handle */
      DWORD	    nVolume;	/* Volume serial number, instead of st_dev */
--- 45,51 ----
      dev_t	    st_dev;	/* ID of dev containing cscope db */
      ino_t	    st_ino;	/* inode number of cscope db */
  #else
! # if defined(MSWIN)
      DWORD	    pid;	/* PID of the connected cscope process. */
      HANDLE	    hProc;	/* cscope process handle */
      DWORD	    nVolume;	/* Volume serial number, instead of st_dev */
*** ../vim-8.1.0940/src/if_lua.c	2019-01-13 23:38:33.395773275 +0100
--- src/if_lua.c	2019-02-17 17:29:18.552788863 +0100
***************
*** 80,86 ****
  
  #ifdef DYNAMIC_LUA
  
! #ifndef WIN3264
  # include <dlfcn.h>
  # define HANDLE void*
  # define load_dll(n) dlopen((n), RTLD_LAZY|RTLD_GLOBAL)
--- 80,86 ----
  
  #ifdef DYNAMIC_LUA
  
! #ifndef MSWIN
  # include <dlfcn.h>
  # define HANDLE void*
  # define load_dll(n) dlopen((n), RTLD_LAZY|RTLD_GLOBAL)
*** ../vim-8.1.0940/src/if_mzsch.c	2019-01-19 17:43:03.417449145 +0100
--- src/if_mzsch.c	2019-02-17 17:29:18.552788863 +0100
***************
*** 47,53 ****
   * racket-6.3.  See
   * http://docs.racket-lang.org/inside/im_memoryalloc.html?q=scheme_register_tls_space
   */
! #if MZSCHEME_VERSION_MAJOR >= 500 && defined(WIN32) \
  	&& defined(USE_THREAD_LOCAL) \
  	&& (!defined(_WIN64) || MZSCHEME_VERSION_MAJOR >= 603)
  # define HAVE_TLS_SPACE 1
--- 47,53 ----
   * racket-6.3.  See
   * http://docs.racket-lang.org/inside/im_memoryalloc.html?q=scheme_register_tls_space
   */
! #if MZSCHEME_VERSION_MAJOR >= 500 && defined(MSWIN) \
  	&& defined(USE_THREAD_LOCAL) \
  	&& (!defined(_WIN64) || MZSCHEME_VERSION_MAJOR >= 603)
  # define HAVE_TLS_SPACE 1
***************
*** 807,813 ****
  /* MzScheme threads scheduling stuff */
  static int mz_threads_allow = 0;
  
! #if defined(FEAT_GUI_W32)
  static void CALLBACK timer_proc(HWND, UINT, UINT_PTR, DWORD);
  static UINT timer_id = 0;
  #elif defined(FEAT_GUI_GTK)
--- 807,813 ----
  /* MzScheme threads scheduling stuff */
  static int mz_threads_allow = 0;
  
! #if defined(FEAT_GUI_MSWIN)
  static void CALLBACK timer_proc(HWND, UINT, UINT_PTR, DWORD);
  static UINT timer_id = 0;
  #elif defined(FEAT_GUI_GTK)
***************
*** 822,828 ****
  static EventLoopTimerUPP timerUPP;
  #endif
  
! #ifndef FEAT_GUI_W32 /* Win32 console and Unix */
      void
  mzvim_check_threads(void)
  {
--- 822,828 ----
  static EventLoopTimerUPP timerUPP;
  #endif
  
! #ifndef FEAT_GUI_MSWIN /* Win32 console and Unix */
      void
  mzvim_check_threads(void)
  {
***************
*** 847,853 ****
  static void remove_timer(void);
  
  /* timers are presented in GUI only */
! # if defined(FEAT_GUI_W32)
      static void CALLBACK
  timer_proc(HWND hwnd UNUSED, UINT uMsg UNUSED, UINT_PTR idEvent UNUSED, DWORD dwTime UNUSED)
  # elif defined(FEAT_GUI_GTK)
--- 847,853 ----
  static void remove_timer(void);
  
  /* timers are presented in GUI only */
! # if defined(FEAT_GUI_MSWIN)
      static void CALLBACK
  timer_proc(HWND hwnd UNUSED, UINT uMsg UNUSED, UINT_PTR idEvent UNUSED, DWORD dwTime UNUSED)
  # elif defined(FEAT_GUI_GTK)
***************
*** 875,881 ****
      static void
  setup_timer(void)
  {
! # if defined(FEAT_GUI_W32)
      timer_id = SetTimer(NULL, 0, p_mzq, timer_proc);
  # elif defined(FEAT_GUI_GTK)
      timer_id = g_timeout_add((guint)p_mzq, (GSourceFunc)timer_proc, NULL);
--- 875,881 ----
      static void
  setup_timer(void)
  {
! # if defined(FEAT_GUI_MSWIN)
      timer_id = SetTimer(NULL, 0, p_mzq, timer_proc);
  # elif defined(FEAT_GUI_GTK)
      timer_id = g_timeout_add((guint)p_mzq, (GSourceFunc)timer_proc, NULL);
***************
*** 891,897 ****
      static void
  remove_timer(void)
  {
! # if defined(FEAT_GUI_W32)
      KillTimer(NULL, timer_id);
  # elif defined(FEAT_GUI_GTK)
      g_source_remove(timer_id);
--- 891,897 ----
      static void
  remove_timer(void)
  {
! # if defined(FEAT_GUI_MSWIN)
      KillTimer(NULL, timer_id);
  # elif defined(FEAT_GUI_GTK)
      g_source_remove(timer_id);
*** ../vim-8.1.0940/src/if_ole.cpp	2018-07-11 22:57:47.947564638 +0200
--- src/if_ole.cpp	2019-02-17 17:29:18.552788863 +0100
***************
*** 6,12 ****
   * Do ":help credits" in Vim to see a list of people who contributed.
   */
  
! #if defined(FEAT_OLE) && defined(FEAT_GUI_W32)
  /*
   * OLE server implementation.
   *
--- 6,12 ----
   * Do ":help credits" in Vim to see a list of people who contributed.
   */
  
! #if defined(FEAT_OLE) && defined(WIN32) && defined(FEAT_GUI)
  /*
   * OLE server implementation.
   *
*** ../vim-8.1.0940/src/if_perl.xs	2019-02-08 14:33:54.818762019 +0100
--- src/if_perl.xs	2019-02-17 17:29:18.552788863 +0100
***************
*** 100,106 ****
  
  // Work around for ActivePerl 5.20.3+: Avoid generating (g)vim.lib.
  #if defined(ACTIVEPERL_VERSION) && (ACTIVEPERL_VERSION >= 2003) \
! 	&& defined(WIN32) && defined(USE_DYNAMIC_LOADING)
  # undef XS_EXTERNAL
  # define XS_EXTERNAL(name) XSPROTO(name)
  #endif
--- 100,106 ----
  
  // Work around for ActivePerl 5.20.3+: Avoid generating (g)vim.lib.
  #if defined(ACTIVEPERL_VERSION) && (ACTIVEPERL_VERSION >= 2003) \
! 	&& defined(MSWIN) && defined(USE_DYNAMIC_LOADING)
  # undef XS_EXTERNAL
  # define XS_EXTERNAL(name) XSPROTO(name)
  #endif
***************
*** 154,160 ****
  #if defined(DYNAMIC_PERL) || defined(PROTO)
  
  # ifndef DYNAMIC_PERL /* just generating prototypes */
! #  ifdef WIN3264
  typedef int HANDLE;
  #  endif
  typedef int XSINIT_t;
--- 154,160 ----
  #if defined(DYNAMIC_PERL) || defined(PROTO)
  
  # ifndef DYNAMIC_PERL /* just generating prototypes */
! #  ifdef MSWIN
  typedef int HANDLE;
  #  endif
  typedef int XSINIT_t;
***************
*** 164,170 ****
  typedef int perl_key;
  # endif
  
! # ifndef WIN3264
  #  include <dlfcn.h>
  #  define HANDLE void*
  #  define PERL_PROC void*
--- 164,170 ----
  typedef int perl_key;
  # endif
  
! # ifndef MSWIN
  #  include <dlfcn.h>
  #  define HANDLE void*
  #  define PERL_PROC void*
*** ../vim-8.1.0940/src/if_python.c	2019-02-01 22:10:12.996410746 +0100
--- src/if_python.c	2019-02-17 17:29:18.552788863 +0100
***************
*** 35,41 ****
  # undef _POSIX_THREADS
  #endif
  
! #if defined(_WIN32) && defined(HAVE_FCNTL_H)
  # undef HAVE_FCNTL_H
  #endif
  
--- 35,41 ----
  # undef _POSIX_THREADS
  #endif
  
! #if defined(MSWIN) && defined(HAVE_FCNTL_H)
  # undef HAVE_FCNTL_H
  #endif
  
***************
*** 127,133 ****
  #  define HINSTANCE long_u		/* for generating prototypes */
  # endif
  
! # ifndef WIN3264
  #  include <dlfcn.h>
  #  define FARPROC void*
  #  define HINSTANCE void*
--- 127,133 ----
  #  define HINSTANCE long_u		/* for generating prototypes */
  # endif
  
! # ifndef MSWIN
  #  include <dlfcn.h>
  #  define FARPROC void*
  #  define HINSTANCE void*
*** ../vim-8.1.0940/src/if_python3.c	2019-01-13 23:38:33.395773275 +0100
--- src/if_python3.c	2019-02-17 17:29:18.552788863 +0100
***************
*** 34,40 ****
  
  #include <limits.h>
  
! #if defined(_WIN32) && defined(HAVE_FCNTL_H)
  # undef HAVE_FCNTL_H
  #endif
  
--- 34,40 ----
  
  #include <limits.h>
  
! #if defined(MSWIN) && defined(HAVE_FCNTL_H)
  # undef HAVE_FCNTL_H
  #endif
  
***************
*** 112,118 ****
  
  #if defined(DYNAMIC_PYTHON3) || defined(PROTO)
  
! # ifndef WIN3264
  #  include <dlfcn.h>
  #  define FARPROC void*
  #  define HINSTANCE void*
--- 112,118 ----
  
  #if defined(DYNAMIC_PYTHON3) || defined(PROTO)
  
! # ifndef MSWIN
  #  include <dlfcn.h>
  #  define FARPROC void*
  #  define HINSTANCE void*
*** ../vim-8.1.0940/src/if_ruby.c	2019-02-03 15:18:31.480095521 +0100
--- src/if_ruby.c	2019-02-17 17:33:56.639221336 +0100
***************
*** 64,70 ****
  #  define RUBY_EXPORT
  # endif
  
! #if !(defined(WIN32) || defined(_WIN64))
  # include <dlfcn.h>
  # define HINSTANCE void*
  # define RUBY_PROC void*
--- 64,70 ----
  #  define RUBY_EXPORT
  # endif
  
! #if !defined(MSWIN)
  # include <dlfcn.h>
  # define HINSTANCE void*
  # define RUBY_PROC void*
***************
*** 331,337 ****
  # endif
  # define ruby_init			dll_ruby_init
  # define ruby_init_loadpath		dll_ruby_init_loadpath
! # ifdef WIN3264
  #  ifdef RUBY19_OR_LATER
  #   define ruby_sysinit			dll_ruby_sysinit
  #  else
--- 331,337 ----
  # endif
  # define ruby_init			dll_ruby_init
  # define ruby_init_loadpath		dll_ruby_init_loadpath
! # ifdef MSWIN
  #  ifdef RUBY19_OR_LATER
  #   define ruby_sysinit			dll_ruby_sysinit
  #  else
***************
*** 447,453 ****
  # endif
  static void (*dll_ruby_init) (void);
  static void (*dll_ruby_init_loadpath) (void);
! # ifdef WIN3264
  #  ifdef RUBY19_OR_LATER
  static void (*dll_ruby_sysinit) (int*, char***);
  #  else
--- 447,453 ----
  # endif
  static void (*dll_ruby_init) (void);
  static void (*dll_ruby_init_loadpath) (void);
! # ifdef MSWIN
  #  ifdef RUBY19_OR_LATER
  static void (*dll_ruby_sysinit) (int*, char***);
  #  else
***************
*** 666,672 ****
  # endif
      {"ruby_init", (RUBY_PROC*)&dll_ruby_init},
      {"ruby_init_loadpath", (RUBY_PROC*)&dll_ruby_init_loadpath},
! # ifdef WIN3264
  #  ifdef RUBY19_OR_LATER
      {"ruby_sysinit", (RUBY_PROC*)&dll_ruby_sysinit},
  #  else
--- 666,672 ----
  # endif
      {"ruby_init", (RUBY_PROC*)&dll_ruby_init},
      {"ruby_init_loadpath", (RUBY_PROC*)&dll_ruby_init_loadpath},
! # ifdef MSWIN
  #  ifdef RUBY19_OR_LATER
      {"ruby_sysinit", (RUBY_PROC*)&dll_ruby_sysinit},
  #  else
***************
*** 949,955 ****
  	if (ruby_enabled(TRUE))
  	{
  #endif
! #ifdef _WIN32
  	    /* suggested by Ariya Mizutani */
  	    int argc = 1;
  	    char *argv[] = {"gvim.exe"};
--- 949,955 ----
  	if (ruby_enabled(TRUE))
  	{
  #endif
! #ifdef MSWIN
  	    /* suggested by Ariya Mizutani */
  	    int argc = 1;
  	    char *argv[] = {"gvim.exe"};
*** ../vim-8.1.0940/src/if_tcl.c	2019-01-19 17:43:03.417449145 +0100
--- src/if_tcl.c	2019-02-17 17:29:18.552788863 +0100
***************
*** 160,166 ****
  typedef int HANDLE;
  # endif
  
! # ifndef WIN3264
  #  include <dlfcn.h>
  #  define HANDLE void*
  #  define TCL_PROC void*
--- 160,166 ----
  typedef int HANDLE;
  # endif
  
! # ifndef MSWIN
  #  include <dlfcn.h>
  #  define HANDLE void*
  #  define TCL_PROC void*
***************
*** 1741,1751 ****
  #endif
  
  	Tcl_SetChannelOption(interp, ch1, "-buffering", "line");
! #ifdef WIN3264
  	Tcl_SetChannelOption(interp, ch1, "-translation", "lf");
  #endif
  	Tcl_SetChannelOption(interp, ch2, "-buffering", "line");
! #ifdef WIN3264
  	Tcl_SetChannelOption(interp, ch2, "-translation", "lf");
  #endif
  
--- 1741,1751 ----
  #endif
  
  	Tcl_SetChannelOption(interp, ch1, "-buffering", "line");
! #ifdef MSWIN
  	Tcl_SetChannelOption(interp, ch1, "-translation", "lf");
  #endif
  	Tcl_SetChannelOption(interp, ch2, "-buffering", "line");
! #ifdef MSWIN
  	Tcl_SetChannelOption(interp, ch2, "-translation", "lf");
  #endif
  
*** ../vim-8.1.0940/src/macros.h	2019-01-26 17:28:22.224599141 +0100
--- src/macros.h	2019-02-17 17:29:18.552788863 +0100
***************
*** 160,170 ****
  # define mch_stat(n, p)		stat(vms_fixfilename(n), (p))
  # define mch_rmdir(n)		rmdir(vms_fixfilename(n))
  #else
! # ifndef WIN32
  #   define mch_access(n, p)	access((n), (p))
  # endif
  # define mch_fstat(n, p)	fstat((n), (p))
! # ifdef MSWIN	/* has its own mch_stat() function */
  #  define mch_stat(n, p)	vim_stat((n), (p))
  # else
  #  ifdef STAT_IGNORES_SLASH
--- 160,170 ----
  # define mch_stat(n, p)		stat(vms_fixfilename(n), (p))
  # define mch_rmdir(n)		rmdir(vms_fixfilename(n))
  #else
! # ifndef MSWIN
  #   define mch_access(n, p)	access((n), (p))
  # endif
  # define mch_fstat(n, p)	fstat((n), (p))
! # ifdef MSWIN	// has its own mch_stat() function
  #  define mch_stat(n, p)	vim_stat((n), (p))
  # else
  #  ifdef STAT_IGNORES_SLASH
***************
*** 194,200 ****
  #if defined(UNIX) || defined(VMS)  /* open in rw------- mode */
  # define mch_open_rw(n, f)	mch_open((n), (f), (mode_t)0600)
  #else
! # if defined(MSWIN)  /* open read/write */
  #  define mch_open_rw(n, f)	mch_open((n), (f), S_IREAD | S_IWRITE)
  # else
  #  define mch_open_rw(n, f)	mch_open((n), (f), 0)
--- 194,200 ----
  #if defined(UNIX) || defined(VMS)  /* open in rw------- mode */
  # define mch_open_rw(n, f)	mch_open((n), (f), (mode_t)0600)
  #else
! # if defined(MSWIN)  // open read/write
  #  define mch_open_rw(n, f)	mch_open((n), (f), S_IREAD | S_IWRITE)
  # else
  #  define mch_open_rw(n, f)	mch_open((n), (f), 0)
***************
*** 269,275 ****
  #  include <math.h>
  # endif
  # ifdef USING_FLOAT_STUFF
! #  if defined(WIN32)
  #   ifndef isnan
  #    define isnan(x) _isnan(x)
       static __inline int isinf(double x) { return !_finite(x) && !_isnan(x); }
--- 269,275 ----
  #  include <math.h>
  # endif
  # ifdef USING_FLOAT_STUFF
! #  ifdef MSWIN
  #   ifndef isnan
  #    define isnan(x) _isnan(x)
       static __inline int isinf(double x) { return !_finite(x) && !_isnan(x); }
*** ../vim-8.1.0940/src/main.c	2019-02-16 15:09:21.209946237 +0100
--- src/main.c	2019-02-17 17:29:18.552788863 +0100
***************
*** 11,17 ****
  #include "vim.h"
  
  #ifdef __CYGWIN__
! # ifndef WIN32
  #  include <cygwin/version.h>
  #  include <sys/cygwin.h>	/* for cygwin_conv_to_posix_path() and/or
  				 * cygwin_conv_path() */
--- 11,17 ----
  #include "vim.h"
  
  #ifdef __CYGWIN__
! # ifndef MSWIN
  #  include <cygwin/version.h>
  #  include <sys/cygwin.h>	/* for cygwin_conv_to_posix_path() and/or
  				 * cygwin_conv_path() */
***************
*** 19,25 ****
  # include <limits.h>
  #endif
  
! #if defined(WIN3264) && !defined(FEAT_GUI_W32)
  # include "iscygpty.h"
  #endif
  
--- 19,25 ----
  # include <limits.h>
  #endif
  
! #if defined(MSWIN) && !defined(FEAT_GUI_MSWIN)
  # include "iscygpty.h"
  #endif
  
***************
*** 119,125 ****
       */
      mch_early_init();
  
! #if defined(WIN32)
      /*
       * MinGW expands command line arguments, which confuses our code to
       * convert when 'encoding' changes.  Get the unexpanded arguments.
--- 119,125 ----
       */
      mch_early_init();
  
! #ifdef MSWIN
      /*
       * MinGW expands command line arguments, which confuses our code to
       * convert when 'encoding' changes.  Get the unexpanded arguments.
***************
*** 250,256 ****
  	params.fname = alist_name(&GARGLIST[0]);
      }
  
! #if defined(WIN32)
      {
  	extern void set_alist_count(void);
  
--- 250,256 ----
  	params.fname = alist_name(&GARGLIST[0]);
      }
  
! #ifdef MSWIN
      {
  	extern void set_alist_count(void);
  
***************
*** 854,860 ****
      }
  #endif
  
! #if defined(WIN3264) && !defined(FEAT_GUI_W32)
      mch_set_winsize_now();	    /* Allow winsize changes from now on */
  #endif
  
--- 854,860 ----
      }
  #endif
  
! #if defined(MSWIN) && !defined(FEAT_GUI_MSWIN)
      mch_set_winsize_now();	    /* Allow winsize changes from now on */
  #endif
  
***************
*** 880,886 ****
      {
  # ifdef FEAT_GUI
  #  if !defined(FEAT_GUI_X11) && !defined(FEAT_GUI_GTK)  \
! 		&& !defined(FEAT_GUI_W32)
  	if (gui.in_use)
  	{
  	    mch_errmsg(_("netbeans is not supported with this GUI\n"));
--- 880,886 ----
      {
  # ifdef FEAT_GUI
  #  if !defined(FEAT_GUI_X11) && !defined(FEAT_GUI_GTK)  \
! 		&& !defined(FEAT_GUI_MSWIN)
  	if (gui.in_use)
  	{
  	    mch_errmsg(_("netbeans is not supported with this GUI\n"));
***************
*** 1534,1540 ****
      if (garbage_collect_at_exit)
  	garbage_collect(FALSE);
  #endif
! #if defined(WIN32)
      free_cmd_argsW();
  #endif
  
--- 1534,1540 ----
      if (garbage_collect_at_exit)
  	garbage_collect(FALSE);
  #endif
! #ifdef MSWIN
      free_cmd_argsW();
  #endif
  
***************
*** 1559,1565 ****
      setlocale(LC_NUMERIC, "C");
  # endif
  
! # ifdef WIN32
      /* Apparently MS-Windows printf() may cause a crash when we give it 8-bit
       * text while it's expecting text in the current locale.  This call avoids
       * that. */
--- 1559,1565 ----
      setlocale(LC_NUMERIC, "C");
  # endif
  
! # ifdef MSWIN
      /* Apparently MS-Windows printf() may cause a crash when we give it 8-bit
       * text while it's expecting text in the current locale.  This call avoids
       * that. */
***************
*** 1642,1649 ****
  	}
  # endif
  
! # if defined(FEAT_GUI_GTK) || defined(FEAT_GUI_W32)
! #  ifdef FEAT_GUI_W32
  	else if (STRICMP(argv[i], "--windowid") == 0)
  #  else
  	else if (STRICMP(argv[i], "--socketid") == 0)
--- 1642,1649 ----
  	}
  # endif
  
! # if defined(FEAT_GUI_GTK) || defined(FEAT_GUI_MSWIN)
! #  ifdef FEAT_GUI_MSWIN
  	else if (STRICMP(argv[i], "--windowid") == 0)
  #  else
  	else if (STRICMP(argv[i], "--socketid") == 0)
***************
*** 1661,1667 ****
  	    if (count != 1)
  		mainerr(ME_INVALID_ARG, (char_u *)argv[i]);
  	    else
! #  ifdef FEAT_GUI_W32
  		win_socket_id = id;
  #  else
  		gtk_socket_id = id;
--- 1661,1667 ----
  	    if (count != 1)
  		mainerr(ME_INVALID_ARG, (char_u *)argv[i]);
  	    else
! #  ifdef FEAT_GUI_MSWIN
  		win_socket_id = id;
  #  else
  		gtk_socket_id = id;
***************
*** 1942,1948 ****
  		    }
  		}
  #endif
! #if defined(FEAT_GUI_GTK) || defined(FEAT_GUI_W32)
  # ifdef FEAT_GUI_GTK
  		else if (STRNICMP(argv[0] + argv_idx, "socketid", 8) == 0)
  # else
--- 1942,1948 ----
  		    }
  		}
  #endif
! #if defined(FEAT_GUI_GTK) || defined(FEAT_GUI_MSWIN)
  # ifdef FEAT_GUI_GTK
  		else if (STRNICMP(argv[0] + argv_idx, "socketid", 8) == 0)
  # else
***************
*** 2237,2243 ****
  	    case 'u':		/* "-u {vimrc}" vim inits file */
  	    case 'U':		/* "-U {gvimrc}" gvim inits file */
  	    case 'W':		/* "-W {scriptout}" overwrite */
! #ifdef FEAT_GUI_W32
  	    case 'P':		/* "-P {parent title}" MDI parent */
  #endif
  		want_argument = TRUE;
--- 2237,2243 ----
  	    case 'u':		/* "-u {vimrc}" vim inits file */
  	    case 'U':		/* "-U {gvimrc}" gvim inits file */
  	    case 'W':		/* "-W {scriptout}" overwrite */
! #ifdef FEAT_GUI_MSWIN
  	    case 'P':		/* "-P {parent title}" MDI parent */
  #endif
  		want_argument = TRUE;
***************
*** 2399,2405 ****
  		    }
  		    break;
  
! #ifdef FEAT_GUI_W32
  		case 'P':		/* "-P {parent title}" MDI parent */
  		    gui_mch_set_parent(argv[0]);
  		    break;
--- 2399,2405 ----
  		    }
  		    break;
  
! #ifdef FEAT_GUI_MSWIN
  		case 'P':		/* "-P {parent title}" MDI parent */
  		    gui_mch_set_parent(argv[0]);
  		    break;
***************
*** 2445,2451 ****
  		}
  	    }
  #endif
! #if defined(__CYGWIN32__) && !defined(WIN32)
  	    /*
  	     * If vim is invoked by non-Cygwin tools, convert away any
  	     * DOS paths, so things like .swp files are created correctly.
--- 2445,2451 ----
  		}
  	    }
  #endif
! #if defined(__CYGWIN32__) && !defined(MSWIN)
  	    /*
  	     * If vim is invoked by non-Cygwin tools, convert away any
  	     * DOS paths, so things like .swp files are created correctly.
***************
*** 2481,2487 ****
  #endif
  		    );
  
! #if defined(WIN32)
  	    {
  		/* Remember this argument has been added to the argument list.
  		 * Needed when 'encoding' is changed. */
--- 2481,2487 ----
  #endif
  		    );
  
! #ifdef MSWIN
  	    {
  		/* Remember this argument has been added to the argument list.
  		 * Needed when 'encoding' is changed. */
***************
*** 2561,2567 ****
  	    exit(1);
  	}
  #endif
! #if defined(WIN3264) && !defined(FEAT_GUI_W32)
  	if (is_cygpty_used())
  	{
  # if defined(HAVE_BIND_TEXTDOMAIN_CODESET) \
--- 2561,2567 ----
  	    exit(1);
  	}
  #endif
! #if defined(MSWIN) && !defined(FEAT_GUI_MSWIN)
  	if (is_cygpty_used())
  	{
  # if defined(HAVE_BIND_TEXTDOMAIN_CODESET) \
***************
*** 3423,3429 ****
      main_msg(_("--socketid <xid>\tOpen Vim inside another GTK widget"));
      main_msg(_("--echo-wid\t\tMake gvim echo the Window ID on stdout"));
  #endif
! #ifdef FEAT_GUI_W32
      main_msg(_("-P <parent title>\tOpen Vim inside parent application"));
      main_msg(_("--windowid <HWND>\tOpen Vim inside another win32 widget"));
  #endif
--- 3423,3429 ----
      main_msg(_("--socketid <xid>\tOpen Vim inside another GTK widget"));
      main_msg(_("--echo-wid\t\tMake gvim echo the Window ID on stdout"));
  #endif
! #ifdef FEAT_GUI_MSWIN
      main_msg(_("-P <parent title>\tOpen Vim inside parent application"));
      main_msg(_("--windowid <HWND>\tOpen Vim inside another win32 widget"));
  #endif
***************
*** 3460,3466 ****
  #if defined(STARTUPTIME) || defined(PROTO)
  static struct timeval	prev_timeval;
  
! # ifdef WIN3264
  /*
   * Windows doesn't have gettimeofday(), although it does have struct timeval.
   */
--- 3460,3466 ----
  #if defined(STARTUPTIME) || defined(PROTO)
  static struct timeval	prev_timeval;
  
! # ifdef MSWIN
  /*
   * Windows doesn't have gettimeofday(), although it does have struct timeval.
   */
***************
*** 3567,3573 ****
  {
      char_u *val = argv0;
  
! # if defined(WIN32)
      /* A relative path containing a "/" will become invalid when using ":cd",
       * turn it into a full path.
       * On MS-Windows "vim" should be expanded to "vim.exe", thus always do
--- 3567,3573 ----
  {
      char_u *val = argv0;
  
! # ifdef MSWIN
      /* A relative path containing a "/" will become invalid when using ":cd",
       * turn it into a full path.
       * On MS-Windows "vim" should be expanded to "vim.exe", thus always do
***************
*** 3600,3606 ****
  
      set_vim_var_string(VV_PROGPATH, val, -1);
  
! # ifdef WIN32
      vim_free(path);
  # endif
  }
--- 3600,3606 ----
  
      set_vim_var_string(VV_PROGPATH, val, -1);
  
! # ifdef MSWIN
      vim_free(path);
  # endif
  }
***************
*** 3623,3629 ****
  {
      if (parmp->serverName_arg == NULL || *parmp->serverName_arg != NUL)
      {
! # ifdef WIN32
  	/* Initialise the client/server messaging infrastructure. */
  	serverInitMessaging();
  # endif
--- 3623,3629 ----
  {
      if (parmp->serverName_arg == NULL || *parmp->serverName_arg != NUL)
      {
! # ifdef MSWIN
  	/* Initialise the client/server messaging infrastructure. */
  	serverInitMessaging();
  # endif
***************
*** 3645,3651 ****
  	 * clipboard first, it's further down. */
  	parmp->servername = serverMakeName(parmp->serverName_arg,
  							      parmp->argv[0]);
! # ifdef WIN32
  	if (parmp->servername != NULL)
  	{
  	    serverSetName(parmp->servername);
--- 3645,3651 ----
  	 * clipboard first, it's further down. */
  	parmp->servername = serverMakeName(parmp->serverName_arg,
  							      parmp->argv[0]);
! # ifdef MSWIN
  	if (parmp->servername != NULL)
  	{
  	    serverSetName(parmp->servername);
***************
*** 3842,3848 ****
  		break;
  	    }
  
! # ifdef FEAT_GUI_W32
  	    /* Guess that when the server name starts with "g" it's a GUI
  	     * server, which we can bring to the foreground here.
  	     * Foreground() in the server doesn't work very well. */
--- 3842,3848 ----
  		break;
  	    }
  
! # ifdef FEAT_GUI_MSWIN
  	    /* Guess that when the server name starts with "g" it's a GUI
  	     * server, which we can bring to the foreground here.
  	     * Foreground() in the server doesn't work very well. */
***************
*** 3860,3866 ****
  		int	j;
  		char_u  *done = alloc(numFiles);
  		char_u  *p;
! # ifdef FEAT_GUI_W32
  		NOTIFYICONDATA ni;
  		int	count = 0;
  		extern HWND message_window;
--- 3860,3866 ----
  		int	j;
  		char_u  *done = alloc(numFiles);
  		char_u  *p;
! # ifdef FEAT_GUI_MSWIN
  		NOTIFYICONDATA ni;
  		int	count = 0;
  		extern HWND message_window;
***************
*** 3870,3876 ****
  		    /* Skip "+cmd" argument, don't wait for it to be edited. */
  		    --numFiles;
  
! # ifdef FEAT_GUI_W32
  		ni.cbSize = sizeof(ni);
  		ni.hWnd = message_window;
  		ni.uID = 0;
--- 3870,3876 ----
  		    /* Skip "+cmd" argument, don't wait for it to be edited. */
  		    --numFiles;
  
! # ifdef FEAT_GUI_MSWIN
  		ni.cbSize = sizeof(ni);
  		ni.hWnd = message_window;
  		ni.uID = 0;
***************
*** 3884,3890 ****
  		vim_memset(done, 0, numFiles);
  		while (memchr(done, 0, numFiles) != NULL)
  		{
! # ifdef WIN32
  		    p = serverGetReply(srv, NULL, TRUE, TRUE, 0);
  		    if (p == NULL)
  			break;
--- 3884,3890 ----
  		vim_memset(done, 0, numFiles);
  		while (memchr(done, 0, numFiles) != NULL)
  		{
! # ifdef MSWIN
  		    p = serverGetReply(srv, NULL, TRUE, TRUE, 0);
  		    if (p == NULL)
  			break;
***************
*** 3895,3901 ****
  		    j = atoi((char *)p);
  		    if (j >= 0 && j < numFiles)
  		    {
! # ifdef FEAT_GUI_W32
  			++count;
  			sprintf(ni.szTip, _("%d of %d edited"),
  							     count, numFiles);
--- 3895,3901 ----
  		    j = atoi((char *)p);
  		    if (j >= 0 && j < numFiles)
  		    {
! # ifdef FEAT_GUI_MSWIN
  			++count;
  			sprintf(ni.szTip, _("%d of %d edited"),
  							     count, numFiles);
***************
*** 3904,3910 ****
  			done[j] = 1;
  		    }
  		}
! # ifdef FEAT_GUI_W32
  		Shell_NotifyIcon(NIM_DELETE, &ni);
  # endif
  	    }
--- 3904,3910 ----
  			done[j] = 1;
  		    }
  		}
! # ifdef FEAT_GUI_MSWIN
  		Shell_NotifyIcon(NIM_DELETE, &ni);
  # endif
  	    }
***************
*** 3913,3919 ****
  	{
  	    if (i == *argc - 1)
  		mainerr_arg_missing((char_u *)argv[i]);
! # ifdef WIN32
  	    /* Win32 always works? */
  	    if (serverSendToVim(sname, (char_u *)argv[i + 1],
  						  &res, NULL, 1, 0, FALSE) < 0)
--- 3913,3919 ----
  	{
  	    if (i == *argc - 1)
  		mainerr_arg_missing((char_u *)argv[i]);
! # ifdef MSWIN
  	    /* Win32 always works? */
  	    if (serverSendToVim(sname, (char_u *)argv[i + 1],
  						  &res, NULL, 1, 0, FALSE) < 0)
***************
*** 3935,3941 ****
  	}
  	else if (STRICMP(argv[i], "--serverlist") == 0)
  	{
! # ifdef WIN32
  	    /* Win32 always works? */
  	    res = serverGetVimNames();
  # else
--- 3935,3941 ----
  	}
  	else if (STRICMP(argv[i], "--serverlist") == 0)
  	{
! # ifdef MSWIN
  	    /* Win32 always works? */
  	    res = serverGetVimNames();
  # else
*** ../vim-8.1.0940/src/mbyte.c	2019-01-26 17:28:22.228599112 +0100
--- src/mbyte.c	2019-02-17 17:29:18.552788863 +0100
***************
*** 97,103 ****
  # define WINBYTE BYTE
  #endif
  
! #if (defined(WIN3264) || defined(WIN32UNIX)) && !defined(__MINGW32__)
  # include <winnls.h>
  #endif
  
--- 97,103 ----
  # define WINBYTE BYTE
  #endif
  
! #if (defined(MSWIN) || defined(WIN32UNIX)) && !defined(__MINGW32__)
  # include <winnls.h>
  #endif
  
***************
*** 117,123 ****
  # else
  #  include <gdk/gdkkeysyms.h>
  # endif
! # ifdef WIN3264
  #  include <gdk/gdkwin32.h>
  # else
  #  include <gdk/gdkx.h>
--- 117,123 ----
  # else
  #  include <gdk/gdkkeysyms.h>
  # endif
! # ifdef MSWIN
  #  include <gdk/gdkwin32.h>
  # else
  #  include <gdk/gdkx.h>
***************
*** 364,370 ****
      {"cyrillic",	IDX_ISO_5},
      {"arabic",		IDX_ISO_6},
      {"greek",		IDX_ISO_7},
! #ifdef WIN3264
      {"hebrew",		IDX_CP1255},
  #else
      {"hebrew",		IDX_ISO_8},
--- 364,370 ----
      {"cyrillic",	IDX_ISO_5},
      {"arabic",		IDX_ISO_6},
      {"greek",		IDX_ISO_7},
! #ifdef MSWIN
      {"hebrew",		IDX_CP1255},
  #else
      {"hebrew",		IDX_ISO_8},
***************
*** 412,418 ****
      {"euccn",		IDX_EUC_CN},
      {"gb2312",		IDX_EUC_CN},
      {"euctw",		IDX_EUC_TW},
! #if defined(WIN3264) || defined(WIN32UNIX) || defined(MACOS_X)
      {"japan",		IDX_CP932},
      {"korea",		IDX_CP949},
      {"prc",		IDX_CP936},
--- 412,418 ----
      {"euccn",		IDX_EUC_CN},
      {"gb2312",		IDX_EUC_CN},
      {"euctw",		IDX_EUC_TW},
! #if defined(MSWIN) || defined(WIN32UNIX) || defined(MACOS_X)
      {"japan",		IDX_CP932},
      {"korea",		IDX_CP949},
      {"prc",		IDX_CP936},
***************
*** 465,471 ****
      i = enc_canon_search(name);
      if (i >= 0)
  	return enc_canon_table[i].prop;
! #ifdef WIN3264
      if (name[0] == 'c' && name[1] == 'p' && VIM_ISDIGIT(name[2]))
      {
  	CPINFO	cpinfo;
--- 465,471 ----
      i = enc_canon_search(name);
      if (i >= 0)
  	return enc_canon_table[i].prop;
! #ifdef MSWIN
      if (name[0] == 'c' && name[1] == 'p' && VIM_ISDIGIT(name[2]))
      {
  	CPINFO	cpinfo;
***************
*** 509,515 ****
      int		idx;
      int		n;
      int		enc_dbcs_new = 0;
! #if defined(USE_ICONV) && !defined(WIN3264) && !defined(WIN32UNIX) \
  	&& !defined(MACOS_CONVERT)
  # define LEN_FROM_CONV
      vimconv_T	vimconv;
--- 509,515 ----
      int		idx;
      int		n;
      int		enc_dbcs_new = 0;
! #if defined(USE_ICONV) && !defined(MSWIN) && !defined(WIN32UNIX) \
  	&& !defined(MACOS_CONVERT)
  # define LEN_FROM_CONV
      vimconv_T	vimconv;
***************
*** 527,533 ****
  	return NULL;
      }
  
! #ifdef WIN3264
      if (p_enc[0] == 'c' && p_enc[1] == 'p' && VIM_ISDIGIT(p_enc[2]))
      {
  	CPINFO	cpinfo;
--- 527,533 ----
  	return NULL;
      }
  
! #ifdef MSWIN
      if (p_enc[0] == 'c' && p_enc[1] == 'p' && VIM_ISDIGIT(p_enc[2]))
      {
  	CPINFO	cpinfo;
***************
*** 566,572 ****
      }
      else if (STRNCMP(p_enc, "2byte-", 6) == 0)
      {
! #ifdef WIN3264
  	/* Windows: accept only valid codepage numbers, check below. */
  	if (p_enc[6] != 'c' || p_enc[7] != 'p'
  			      || (enc_dbcs_new = atoi((char *)p_enc + 8)) == 0)
--- 566,572 ----
      }
      else if (STRNCMP(p_enc, "2byte-", 6) == 0)
      {
! #ifdef MSWIN
  	/* Windows: accept only valid codepage numbers, check below. */
  	if (p_enc[6] != 'c' || p_enc[7] != 'p'
  			      || (enc_dbcs_new = atoi((char *)p_enc + 8)) == 0)
***************
*** 607,613 ****
  
      if (enc_dbcs_new != 0)
      {
! #ifdef WIN3264
  	/* Check if the DBCS code page is OK. */
  	if (!IsValidCodePage(enc_dbcs_new))
  	    goto codepage_invalid;
--- 607,613 ----
  
      if (enc_dbcs_new != 0)
      {
! #ifdef MSWIN
  	/* Check if the DBCS code page is OK. */
  	if (!IsValidCodePage(enc_dbcs_new))
  	    goto codepage_invalid;
***************
*** 618,624 ****
      enc_dbcs = enc_dbcs_new;
      has_mbyte = (enc_dbcs != 0 || enc_utf8);
  
! #if defined(WIN3264) || defined(FEAT_CYGWIN_WIN32_CLIPBOARD)
      enc_codepage = encname2codepage(p_enc);
      enc_latin9 = (STRCMP(p_enc, "iso-8859-15") == 0);
  #endif
--- 618,624 ----
      enc_dbcs = enc_dbcs_new;
      has_mbyte = (enc_dbcs != 0 || enc_utf8);
  
! #if defined(MSWIN) || defined(FEAT_CYGWIN_WIN32_CLIPBOARD)
      enc_codepage = encname2codepage(p_enc);
      enc_latin9 = (STRCMP(p_enc, "iso-8859-15") == 0);
  #endif
***************
*** 699,705 ****
  	    n = 1;
  	else
  	{
! #if defined(WIN3264) || defined(WIN32UNIX)
  	    /* enc_dbcs is set by setting 'fileencoding'.  It becomes a Windows
  	     * CodePage identifier, which we can pass directly in to Windows
  	     * API */
--- 699,705 ----
  	    n = 1;
  	else
  	{
! #if defined(MSWIN) || defined(WIN32UNIX)
  	    /* enc_dbcs is set by setting 'fileencoding'.  It becomes a Windows
  	     * CodePage identifier, which we can pass directly in to Windows
  	     * API */
***************
*** 783,789 ****
  					  enc_utf8 ? "utf-8" : (char *)p_enc);
  #endif
  
! #ifdef WIN32
      /* When changing 'encoding' while starting up, then convert the command
       * line arguments from the active codepage to 'encoding'. */
      if (starting != 0)
--- 783,789 ----
  					  enc_utf8 ? "utf-8" : (char *)p_enc);
  #endif
  
! #ifdef MSWIN
      /* When changing 'encoding' while starting up, then convert the command
       * line arguments from the active codepage to 'encoding'. */
      if (starting != 0)
***************
*** 909,915 ****
  		unsigned char tb = trail;
  
  		/* convert process code to JIS */
! # if defined(WIN3264) || defined(WIN32UNIX) || defined(MACOS_X)
  		/* process code is SJIS */
  		if (lb <= 0x9f)
  		    lb = (lb - 0x81) * 2 + 0x21;
--- 909,915 ----
  		unsigned char tb = trail;
  
  		/* convert process code to JIS */
! # if defined(MSWIN) || defined(WIN32UNIX) || defined(MACOS_X)
  		/* process code is SJIS */
  		if (lb <= 0x9f)
  		    lb = (lb - 0x81) * 2 + 0x21;
***************
*** 1006,1012 ****
  		if (c1 >= 0xB0 && c1 <= 0xC8)
  		    /* Hangul */
  		    return 20;
! #if defined(WIN3264) || defined(WIN32UNIX)
  		else if (c1 <= 0xA0 || c2 <= 0xA0)
  		    /* Extended Hangul Region : MS UHC(Unified Hangul Code) */
  		    /* c1: 0x81-0xA0 with c2: 0x41-0x5A, 0x61-0x7A, 0x81-0xFE
--- 1006,1012 ----
  		if (c1 >= 0xB0 && c1 <= 0xC8)
  		    /* Hangul */
  		    return 20;
! #if defined(MSWIN) || defined(WIN32UNIX)
  		else if (c1 <= 0xA0 || c2 <= 0xA0)
  		    /* Extended Hangul Region : MS UHC(Unified Hangul Code) */
  		    /* c1: 0x81-0xA0 with c2: 0x41-0x5A, 0x61-0x7A, 0x81-0xFE
***************
*** 4393,4399 ****
  # include <langinfo.h>
  #endif
  
! #ifndef FEAT_GUI_W32
  /*
   * Get the canonicalized encoding from the specified locale string "locale"
   * or from the environment variables LC_ALL, LC_CTYPE and LANG.
--- 4393,4399 ----
  # include <langinfo.h>
  #endif
  
! #ifndef FEAT_GUI_MSWIN
  /*
   * Get the canonicalized encoding from the specified locale string "locale"
   * or from the environment variables LC_ALL, LC_CTYPE and LANG.
***************
*** 4460,4466 ****
      char_u *
  enc_locale(void)
  {
! #ifdef WIN3264
      char	buf[50];
      long	acp = GetACP();
  
--- 4460,4466 ----
      char_u *
  enc_locale(void)
  {
! #ifdef MSWIN
      char	buf[50];
      long	acp = GetACP();
  
***************
*** 4487,4493 ****
  #endif
  }
  
! # if defined(WIN3264) || defined(PROTO) || defined(FEAT_CYGWIN_WIN32_CLIPBOARD)
  /*
   * Convert an encoding name to an MS-Windows codepage.
   * Returns zero if no codepage can be figured out.
--- 4487,4493 ----
  #endif
  }
  
! # if defined(MSWIN) || defined(PROTO) || defined(FEAT_CYGWIN_WIN32_CLIPBOARD)
  /*
   * Convert an encoding name to an MS-Windows codepage.
   * Returns zero if no codepage can be figured out.
***************
*** 6570,6576 ****
  	/* Internal utf-8 -> latin9 conversion. */
  	vcp->vc_type = CONV_TO_LATIN9;
      }
! #ifdef WIN3264
      /* Win32-specific codepage <-> codepage conversion without iconv. */
      else if ((from_is_utf8 || encname2codepage(from) > 0)
  	    && (to_is_utf8 || encname2codepage(to) > 0))
--- 6570,6576 ----
  	/* Internal utf-8 -> latin9 conversion. */
  	vcp->vc_type = CONV_TO_LATIN9;
      }
! #ifdef MSWIN
      /* Win32-specific codepage <-> codepage conversion without iconv. */
      else if ((from_is_utf8 || encname2codepage(from) > 0)
  	    && (to_is_utf8 || encname2codepage(to) > 0))
***************
*** 6620,6626 ****
      return OK;
  }
  
! #if defined(FEAT_GUI) || defined(AMIGA) || defined(WIN3264) \
  	|| defined(PROTO)
  /*
   * Do conversion on typed input characters in-place.
--- 6620,6626 ----
      return OK;
  }
  
! #if defined(FEAT_GUI) || defined(AMIGA) || defined(MSWIN) \
  	|| defined(PROTO)
  /*
   * Do conversion on typed input characters in-place.
***************
*** 6870,6876 ****
  	    retval = iconv_string(vcp, ptr, len, unconvlenp, lenp);
  	    break;
  # endif
! # ifdef WIN3264
  	case CONV_CODEPAGE:		/* codepage -> codepage */
  	{
  	    int		retlen;
--- 6870,6876 ----
  	    retval = iconv_string(vcp, ptr, len, unconvlenp, lenp);
  	    break;
  # endif
! # ifdef MSWIN
  	case CONV_CODEPAGE:		/* codepage -> codepage */
  	{
  	    int		retlen;
*** ../vim-8.1.0940/src/memfile.c	2019-02-14 12:56:31.686115921 +0100
--- src/memfile.c	2019-02-17 17:29:18.552788863 +0100
***************
*** 621,627 ****
  		status = FAIL;
  	}
  #endif
! #ifdef WIN32
  	if (_commit(mfp->mf_fd))
  	    status = FAIL;
  #endif
--- 621,627 ----
  		status = FAIL;
  	}
  #endif
! #ifdef MSWIN
  	if (_commit(mfp->mf_fd))
  	    status = FAIL;
  #endif
***************
*** 1265,1271 ****
  	 * try to open the file
  	 */
  	flags |= O_EXTRA | O_NOFOLLOW;
! #ifdef WIN32
  	/* Prevent handle inheritance that cause problems with Cscope
  	 * (swap file may not be deleted if cscope connection was open after
  	 * the file) */
--- 1265,1271 ----
  	 * try to open the file
  	 */
  	flags |= O_EXTRA | O_NOFOLLOW;
! #ifdef MSWIN
  	/* Prevent handle inheritance that cause problems with Cscope
  	 * (swap file may not be deleted if cscope connection was open after
  	 * the file) */
*** ../vim-8.1.0940/src/memline.c	2019-01-26 17:28:22.228599112 +0100
--- src/memline.c	2019-02-17 17:29:18.552788863 +0100
***************
*** 1807,1813 ****
  #else
  		names[0] = vim_strsave((char_u *)"*.sw?");
  #endif
! #if defined(UNIX) || defined(WIN3264)
  		/* For Unix names starting with a dot are special.  MS-Windows
  		 * supports this too, on some file systems. */
  		names[1] = vim_strsave((char_u *)".*.sw?");
--- 1807,1813 ----
  #else
  		names[0] = vim_strsave((char_u *)"*.sw?");
  #endif
! #if defined(UNIX) || defined(MSWIN)
  		/* For Unix names starting with a dot are special.  MS-Windows
  		 * supports this too, on some file systems. */
  		names[1] = vim_strsave((char_u *)".*.sw?");
***************
*** 1834,1840 ****
  #else
  		names[0] = concat_fnames(dir_name, (char_u *)"*.sw?", TRUE);
  #endif
! #if defined(UNIX) || defined(WIN3264)
  		/* For Unix names starting with a dot are special.  MS-Windows
  		 * supports this too, on some file systems. */
  		names[1] = concat_fnames(dir_name, (char_u *)".*.sw?", TRUE);
--- 1834,1840 ----
  #else
  		names[0] = concat_fnames(dir_name, (char_u *)"*.sw?", TRUE);
  #endif
! #if defined(UNIX) || defined(MSWIN)
  		/* For Unix names starting with a dot are special.  MS-Windows
  		 * supports this too, on some file systems. */
  		names[1] = concat_fnames(dir_name, (char_u *)".*.sw?", TRUE);
***************
*** 1851,1857 ****
  	    }
  	    else
  	    {
! #if defined(UNIX) || defined(WIN3264)
  		int	len = (int)STRLEN(dir_name);
  
  		p = dir_name + len;
--- 1851,1857 ----
  	    }
  	    else
  	    {
! #if defined(UNIX) || defined(MSWIN)
  		int	len = (int)STRLEN(dir_name);
  
  		p = dir_name + len;
***************
*** 1999,2005 ****
      return file_count;
  }
  
! #if defined(UNIX) || defined(WIN3264) || defined(PROTO)
  /*
   * Need _very_ long file names.
   * Append the full path to name with path separators made into percent
--- 1999,2005 ----
      return file_count;
  }
  
! #if defined(UNIX) || defined(MSWIN) || defined(PROTO)
  /*
   * Need _very_ long file names.
   * Append the full path to name with path separators made into percent
***************
*** 2207,2213 ****
       */
      char_u	*p;
      int		i;
! # ifndef WIN3264
      int	    shortname = curbuf->b_shortname;
  
      curbuf->b_shortname = FALSE;
--- 2207,2213 ----
       */
      char_u	*p;
      int		i;
! # ifndef MSWIN
      int	    shortname = curbuf->b_shortname;
  
      curbuf->b_shortname = FALSE;
***************
*** 2252,2258 ****
      else
  	++num_names;
  
! # ifndef WIN3264
      /*
       * Also try with 'shortname' set, in case the file is on a DOS filesystem.
       */
--- 2252,2258 ----
      else
  	++num_names;
  
! # ifndef MSWIN
      /*
       * Also try with 'shortname' set, in case the file is on a DOS filesystem.
       */
***************
*** 2279,2285 ****
  # endif
  
  end:
! # ifndef WIN3264
      curbuf->b_shortname = shortname;
  # endif
  
--- 2279,2285 ----
  # endif
  
  end:
! # ifndef MSWIN
      curbuf->b_shortname = shortname;
  # endif
  
***************
*** 4253,4259 ****
      char_u	fname_buf[MAXPATHL];
  #endif
  
! #if defined(UNIX) || defined(WIN3264)  /* Need _very_ long file names */
      int		len = (int)STRLEN(dir_name);
  
      s = dir_name + len;
--- 4253,4259 ----
      char_u	fname_buf[MAXPATHL];
  #endif
  
! #if defined(UNIX) || defined(MSWIN)  // Need _very_ long file names
      int		len = (int)STRLEN(dir_name);
  
      s = dir_name + len;
***************
*** 4343,4349 ****
      else
  	retval = concat_fnames(dname, tail, TRUE);
  
! #ifdef WIN3264
      if (retval != NULL)
  	for (t = gettail(retval); *t != NUL; MB_PTR_ADV(t))
  	    if (*t == ':')
--- 4343,4349 ----
      else
  	retval = concat_fnames(dname, tail, TRUE);
  
! #ifdef MSWIN
      if (retval != NULL)
  	for (t = gettail(retval); *t != NUL; MB_PTR_ADV(t))
  	    if (*t == ':')
***************
*** 4474,4480 ****
  # define CREATE_DUMMY_FILE
      FILE	*dummyfd = NULL;
  
! # ifdef WIN3264
      if (buf_fname != NULL && !mch_isFullName(buf_fname)
  				       && vim_strchr(gettail(buf_fname), ':'))
      {
--- 4474,4480 ----
  # define CREATE_DUMMY_FILE
      FILE	*dummyfd = NULL;
  
! # ifdef MSWIN
      if (buf_fname != NULL && !mch_isFullName(buf_fname)
  				       && vim_strchr(gettail(buf_fname), ':'))
      {
***************
*** 4927,4933 ****
  	mch_remove(buf_fname);
      }
  #endif
! #ifdef WIN3264
      if (buf_fname != buf->b_fname)
  	vim_free(buf_fname);
  #endif
--- 4927,4933 ----
  	mch_remove(buf_fname);
      }
  #endif
! #ifdef MSWIN
      if (buf_fname != buf->b_fname)
  	vim_free(buf_fname);
  #endif
*** ../vim-8.1.0940/src/menu.c	2019-01-26 17:28:22.228599112 +0100
--- src/menu.c	2019-02-17 17:29:18.552788863 +0100
***************
*** 18,24 ****
  
  #define MENUDEPTH   10		/* maximum depth of menus */
  
! #ifdef FEAT_GUI_W32
  static int add_menu_path(char_u *, vimmenu_T *, int *, char_u *, int);
  #else
  static int add_menu_path(char_u *, vimmenu_T *, int *, char_u *);
--- 18,24 ----
  
  #define MENUDEPTH   10		/* maximum depth of menus */
  
! #ifdef FEAT_GUI_MSWIN
  static int add_menu_path(char_u *, vimmenu_T *, int *, char_u *, int);
  #else
  static int add_menu_path(char_u *, vimmenu_T *, int *, char_u *);
***************
*** 35,41 ****
  static char_u *popup_mode_name(char_u *name, int idx);
  static char_u *menu_text(char_u *text, int *mnemonic, char_u **actext);
  
! #if defined(FEAT_GUI_W32) && defined(FEAT_TEAROFF)
  static void gui_create_tearoffs_recurse(vimmenu_T *menu, const char_u *pname, int *pri_tab, int pri_idx);
  static void gui_add_tearoff(char_u *tearpath, int *pri_tab, int pri_idx);
  static void gui_destroy_tearoffs_recurse(vimmenu_T *menu);
--- 35,41 ----
  static char_u *popup_mode_name(char_u *name, int idx);
  static char_u *menu_text(char_u *text, int *mnemonic, char_u **actext);
  
! #if defined(FEAT_GUI_MSWIN) && defined(FEAT_TEAROFF)
  static void gui_create_tearoffs_recurse(vimmenu_T *menu, const char_u *pname, int *pri_tab, int pri_idx);
  static void gui_add_tearoff(char_u *tearpath, int *pri_tab, int pri_idx);
  static void gui_destroy_tearoffs_recurse(vimmenu_T *menu);
***************
*** 43,49 ****
  #endif
  
  static int menu_is_hidden(char_u *name);
! #if defined(FEAT_CMDL_COMPL) || (defined(FEAT_GUI_W32) && defined(FEAT_TEAROFF))
  static int menu_is_tearoff(char_u *name);
  #endif
  
--- 43,49 ----
  #endif
  
  static int menu_is_hidden(char_u *name);
! #if defined(FEAT_CMDL_COMPL) || (defined(FEAT_GUI_MSWIN) && defined(FEAT_TEAROFF))
  static int menu_is_tearoff(char_u *name);
  #endif
  
***************
*** 122,128 ****
      int		i;
  #if defined(FEAT_GUI) && !defined(FEAT_GUI_GTK)
      int		old_menu_height;
! # if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_W32)
      int		old_toolbar_height;
  # endif
  #endif
--- 122,128 ----
      int		i;
  #if defined(FEAT_GUI) && !defined(FEAT_GUI_GTK)
      int		old_menu_height;
! # if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_MSWIN)
      int		old_toolbar_height;
  # endif
  #endif
***************
*** 295,301 ****
      }
  #if defined(FEAT_GUI) && !(defined(FEAT_GUI_GTK) || defined(FEAT_GUI_PHOTON))
      old_menu_height = gui.menu_height;
! # if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_W32)
      old_toolbar_height = gui.toolbar_height;
  # endif
  #endif
--- 295,301 ----
      }
  #if defined(FEAT_GUI) && !(defined(FEAT_GUI_GTK) || defined(FEAT_GUI_PHOTON))
      old_menu_height = gui.menu_height;
! # if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_MSWIN)
      old_toolbar_height = gui.toolbar_height;
  # endif
  #endif
***************
*** 381,387 ****
  	menuarg.noremap[0] = noremap;
  	menuarg.silent[0] = silent;
  	add_menu_path(menu_path, &menuarg, pri_tab, map_to
! #ifdef FEAT_GUI_W32
  		, TRUE
  #endif
  		);
--- 381,387 ----
  	menuarg.noremap[0] = noremap;
  	menuarg.silent[0] = silent;
  	add_menu_path(menu_path, &menuarg, pri_tab, map_to
! #ifdef FEAT_GUI_MSWIN
  		, TRUE
  #endif
  		);
***************
*** 405,411 ****
  			menuarg.icon_builtin = FALSE;
  #endif
  			add_menu_path(p, &menuarg, pri_tab, map_to
! #ifdef FEAT_GUI_W32
  				, TRUE
  #endif
  					 );
--- 405,411 ----
  			menuarg.icon_builtin = FALSE;
  #endif
  			add_menu_path(p, &menuarg, pri_tab, map_to
! #ifdef FEAT_GUI_MSWIN
  				, TRUE
  #endif
  					 );
***************
*** 421,427 ****
      /* If the menubar height changed, resize the window */
      if (gui.in_use
  	    && (gui.menu_height != old_menu_height
! # if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_W32)
  		|| gui.toolbar_height != old_toolbar_height
  # endif
  	    ))
--- 421,427 ----
      /* If the menubar height changed, resize the window */
      if (gui.in_use
  	    && (gui.menu_height != old_menu_height
! # if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_MSWIN)
  		|| gui.toolbar_height != old_toolbar_height
  # endif
  	    ))
***************
*** 455,461 ****
  				   icon_builtin, silent[0], noremap[0] */
      int		*pri_tab,
      char_u	*call_data
! #ifdef FEAT_GUI_W32
      , int	addtearoff	/* may add tearoff item */
  #endif
      )
--- 455,461 ----
  				   icon_builtin, silent[0], noremap[0] */
      int		*pri_tab,
      char_u	*call_data
! #ifdef FEAT_GUI_MSWIN
      , int	addtearoff	/* may add tearoff item */
  #endif
      )
***************
*** 537,543 ****
  		    goto erret;
  		}
  		if (*next_name != NUL && menu->children == NULL
! #ifdef FEAT_GUI_W32
  			&& addtearoff
  #endif
  			)
--- 537,543 ----
  		    goto erret;
  		}
  		if (*next_name != NUL && menu->children == NULL
! #ifdef FEAT_GUI_MSWIN
  			&& addtearoff
  #endif
  			)
***************
*** 630,636 ****
  	    if (*next_name == NUL && menuarg->iconfile != NULL)
  		menu->iconfile = vim_strsave(menuarg->iconfile);
  #endif
! #if defined(FEAT_GUI_W32) && defined(FEAT_TEAROFF)
  	    /* the tearoff item must be present in the modes of each item. */
  	    if (parent != NULL && menu_is_tearoff(parent->children->dname))
  		parent->children->modes |= modes;
--- 630,636 ----
  	    if (*next_name == NUL && menuarg->iconfile != NULL)
  		menu->iconfile = vim_strsave(menuarg->iconfile);
  #endif
! #if defined(FEAT_GUI_MSWIN) && defined(FEAT_TEAROFF)
  	    /* the tearoff item must be present in the modes of each item. */
  	    if (parent != NULL && menu_is_tearoff(parent->children->dname))
  		parent->children->modes |= modes;
***************
*** 645,651 ****
  	     * modes, then make sure it's available for this one now
  	     * Also enable a menu when it's created or changed.
  	     */
! #ifdef FEAT_GUI_W32
  	    /* If adding a tearbar (addtearoff == FALSE) don't update modes */
  	    if (addtearoff)
  #endif
--- 645,651 ----
  	     * modes, then make sure it's available for this one now
  	     * Also enable a menu when it's created or changed.
  	     */
! #ifdef FEAT_GUI_MSWIN
  	    /* If adding a tearbar (addtearoff == FALSE) don't update modes */
  	    if (addtearoff)
  #endif
***************
*** 680,686 ****
  		}
  	    }
  
! # if defined(FEAT_GUI_W32) & defined(FEAT_TEAROFF)
  	    /* When adding a new submenu, may add a tearoff item */
  	    if (	addtearoff
  		    && *next_name
--- 680,686 ----
  		}
  	    }
  
! # if defined(FEAT_GUI_MSWIN) & defined(FEAT_TEAROFF)
  	    /* When adding a new submenu, may add a tearoff item */
  	    if (	addtearoff
  		    && *next_name
***************
*** 758,764 ****
  		c = 0;
  		d = 0;
  		if (amenu && call_data != NULL && *call_data != NUL
! #ifdef FEAT_GUI_W32
  		       && addtearoff
  #endif
  				       )
--- 758,764 ----
  		c = 0;
  		d = 0;
  		if (amenu && call_data != NULL && *call_data != NUL
! #ifdef FEAT_GUI_MSWIN
  		       && addtearoff
  #endif
  				       )
***************
*** 808,814 ****
  		menu->silent[i] = menuarg->silent[0];
  	    }
  	}
! #if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_W32) \
  	&& (defined(FEAT_BEVAL_GUI) || defined(FEAT_GUI_GTK))
  	/* Need to update the menu tip. */
  	if (modes & MENU_TIP_MODE)
--- 808,814 ----
  		menu->silent[i] = menuarg->silent[0];
  	    }
  	}
! #if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_MSWIN) \
  	&& (defined(FEAT_BEVAL_GUI) || defined(FEAT_GUI_GTK))
  	/* Need to update the menu tip. */
  	if (modes & MENU_TIP_MODE)
***************
*** 938,944 ****
  	    }
  	    if ((menu->modes & modes) != 0x0)
  	    {
! #if defined(FEAT_GUI_W32) & defined(FEAT_TEAROFF)
  		/*
  		 * If we are removing all entries for this menu,MENU_ALL_MODES,
  		 * Then kill any tearoff before we start
--- 938,944 ----
  	    }
  	    if ((menu->modes & modes) != 0x0)
  	    {
! #if defined(FEAT_GUI_MSWIN) & defined(FEAT_TEAROFF)
  		/*
  		 * If we are removing all entries for this menu,MENU_ALL_MODES,
  		 * Then kill any tearoff before we start
***************
*** 992,998 ****
  
  	/* Recalculate modes for menu based on the new updated children */
  	menu->modes &= ~modes;
! #if defined(FEAT_GUI_W32) & defined(FEAT_TEAROFF)
  	if ((s_tearoffs) && (menu->children != NULL)) /* there's a tear bar.. */
  	    child = menu->children->next; /* don't count tearoff bar */
  	else
--- 992,998 ----
  
  	/* Recalculate modes for menu based on the new updated children */
  	menu->modes &= ~modes;
! #if defined(FEAT_GUI_MSWIN) & defined(FEAT_TEAROFF)
  	if ((s_tearoffs) && (menu->children != NULL)) /* there's a tear bar.. */
  	    child = menu->children->next; /* don't count tearoff bar */
  	else
***************
*** 1003,1009 ****
  	if (modes & MENU_TIP_MODE)
  	{
  	    free_menu_string(menu, MENU_INDEX_TIP);
! #if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_W32) \
  	    && (defined(FEAT_BEVAL_GUI) || defined(FEAT_GUI_GTK))
  	    /* Need to update the menu tip. */
  	    if (gui.in_use)
--- 1003,1009 ----
  	if (modes & MENU_TIP_MODE)
  	{
  	    free_menu_string(menu, MENU_INDEX_TIP);
! #if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_MSWIN) \
  	    && (defined(FEAT_BEVAL_GUI) || defined(FEAT_GUI_GTK))
  	    /* Need to update the menu tip. */
  	    if (gui.in_use)
***************
*** 1013,1019 ****
  	if ((menu->modes & MENU_ALL_MODES) == 0)
  	{
  	    /* The menu item is no longer valid in ANY mode, so delete it */
! #if defined(FEAT_GUI_W32) & defined(FEAT_TEAROFF)
  	    if (s_tearoffs && menu->children != NULL) /* there's a tear bar.. */
  		free_menu(&menu->children);
  #endif
--- 1013,1019 ----
  	if ((menu->modes & MENU_ALL_MODES) == 0)
  	{
  	    /* The menu item is no longer valid in ANY mode, so delete it */
! #if defined(FEAT_GUI_MSWIN) & defined(FEAT_TEAROFF)
  	    if (s_tearoffs && menu->children != NULL) /* there's a tear bar.. */
  		free_menu(&menu->children);
  #endif
***************
*** 1867,1873 ****
  }
  
  #if defined(FEAT_CMDL_COMPL) \
! 	|| (defined(FEAT_GUI_W32) && defined(FEAT_TEAROFF))
  /*
   * Return TRUE if the menu is the tearoff menu.
   */
--- 1867,1873 ----
  }
  
  #if defined(FEAT_CMDL_COMPL) \
! 	|| (defined(FEAT_GUI_MSWIN) && defined(FEAT_TEAROFF))
  /*
   * Return TRUE if the menu is the tearoff menu.
   */
***************
*** 2031,2037 ****
      while (menu)
      {
  	if ((menu->modes & menu->enabled & mode)
! # if defined(FEAT_GUI_W32) && defined(FEAT_TEAROFF)
  		|| menu_is_tearoff(menu->dname)
  # endif
  	   )
--- 2031,2037 ----
      while (menu)
      {
  	if ((menu->modes & menu->enabled & mode)
! # if defined(FEAT_GUI_MSWIN) && defined(FEAT_TEAROFF)
  		|| menu_is_tearoff(menu->dname)
  # endif
  	   )
***************
*** 2105,2111 ****
  # endif
  #endif /* FEAT_GUI */
  
! #if (defined(FEAT_GUI_W32) && defined(FEAT_TEAROFF)) || defined(PROTO)
  
  /*
   * Deal with tearoff items that are added like a menu item.
--- 2105,2111 ----
  # endif
  #endif /* FEAT_GUI */
  
! #if (defined(FEAT_GUI_MSWIN) && defined(FEAT_TEAROFF)) || defined(PROTO)
  
  /*
   * Deal with tearoff items that are added like a menu item.
***************
*** 2257,2263 ****
      }
  }
  
! #endif /* FEAT_GUI_W32 && FEAT_TEAROFF */
  
  /*
   * Execute "menu".  Use by ":emenu" and the window toolbar.
--- 2257,2263 ----
      }
  }
  
! #endif /* FEAT_GUI_MSWIN && FEAT_TEAROFF */
  
  /*
   * Execute "menu".  Use by ":emenu" and the window toolbar.
*** ../vim-8.1.0940/src/message.c	2019-02-15 21:06:05.338289743 +0100
--- src/message.c	2019-02-17 17:29:18.552788863 +0100
***************
*** 2556,2562 ****
  msg_use_printf(void)
  {
      return (!msg_check_screen()
! #if defined(WIN3264) && !defined(FEAT_GUI_MSWIN)
  	    || !termcap_active
  #endif
  	    || (swapping_screen() && !termcap_active)
--- 2556,2562 ----
  msg_use_printf(void)
  {
      return (!msg_check_screen()
! #if defined(MSWIN) && !defined(FEAT_GUI_MSWIN)
  	    || !termcap_active
  #endif
  	    || (swapping_screen() && !termcap_active)
***************
*** 2573,2579 ****
      char_u	*buf = NULL;
      char_u	*p = s;
  
! #ifdef WIN3264
      if (!(silent_mode && p_verbose == 0))
  	mch_settmode(TMODE_COOK);	/* handle CR and NL correctly */
  #endif
--- 2573,2579 ----
      char_u	*buf = NULL;
      char_u	*p = s;
  
! #ifdef MSWIN
      if (!(silent_mode && p_verbose == 0))
  	mch_settmode(TMODE_COOK);	/* handle CR and NL correctly */
  #endif
***************
*** 2633,2639 ****
  
      msg_didout = TRUE;	    // assume that line is not empty
  
! #ifdef WIN3264
      if (!(silent_mode && p_verbose == 0))
  	mch_settmode(TMODE_RAW);
  #endif
--- 2633,2639 ----
  
      msg_didout = TRUE;	    // assume that line is not empty
  
! #ifdef MSWIN
      if (!(silent_mode && p_verbose == 0))
  	mch_settmode(TMODE_RAW);
  #endif
***************
*** 2934,2940 ****
      void
  mch_errmsg(char *str)
  {
! #if defined(WIN3264) && !defined(FEAT_GUI_MSWIN)
      int	    len = (int)STRLEN(str);
      DWORD   nwrite = 0;
      DWORD   mode = 0;
--- 2934,2940 ----
      void
  mch_errmsg(char *str)
  {
! #if defined(MSWIN) && !defined(FEAT_GUI_MSWIN)
      int	    len = (int)STRLEN(str);
      DWORD   nwrite = 0;
      DWORD   mode = 0;
***************
*** 3022,3028 ****
      void
  mch_msg(char *str)
  {
! #if defined(WIN3264) && !defined(FEAT_GUI_MSWIN)
      int	    len = (int)STRLEN(str);
      DWORD   nwrite = 0;
      DWORD   mode;
--- 3022,3028 ----
      void
  mch_msg(char *str)
  {
! #if defined(MSWIN) && !defined(FEAT_GUI_MSWIN)
      int	    len = (int)STRLEN(str);
      DWORD   nwrite = 0;
      DWORD   mode;
***************
*** 4008,4014 ****
  	    filter = BROWSE_FILTER_DEFAULT;
  	if (flags & BROWSE_DIR)
  	{
! #  if defined(FEAT_GUI_GTK) || defined(WIN3264)
  	    /* For systems that have a directory dialog. */
  	    fname = gui_mch_browsedir(title, initdir);
  #  else
--- 4008,4014 ----
  	    filter = BROWSE_FILTER_DEFAULT;
  	if (flags & BROWSE_DIR)
  	{
! #  if defined(FEAT_GUI_GTK) || defined(MSWIN)
  	    /* For systems that have a directory dialog. */
  	    fname = gui_mch_browsedir(title, initdir);
  #  else
***************
*** 4754,4760 ****
  			else if (length_modifier == 'L')
  			{
  # ifdef FEAT_NUM64
! #  ifdef WIN3264
  			    f[f_l++] = 'I';
  			    f[f_l++] = '6';
  			    f[f_l++] = '4';
--- 4754,4760 ----
  			else if (length_modifier == 'L')
  			{
  # ifdef FEAT_NUM64
! #  ifdef MSWIN
  			    f[f_l++] = 'I';
  			    f[f_l++] = '6';
  			    f[f_l++] = '4';
*** ../vim-8.1.0940/src/misc1.c	2019-02-13 22:45:21.512636158 +0100
--- src/misc1.c	2019-02-17 17:29:18.556788840 +0100
***************
*** 14,20 ****
  #include "vim.h"
  #include "version.h"
  
! #if defined(FEAT_CMDL_COMPL) && defined(WIN3264)
  # include <lm.h>
  #endif
  
--- 14,20 ----
  #include "vim.h"
  #include "version.h"
  
! #if defined(FEAT_CMDL_COMPL) && defined(MSWIN)
  # include <lm.h>
  #endif
  
***************
*** 3852,3858 ****
      var = mch_getenv((char_u *)"HOME");
  #endif
  
! #ifdef WIN3264
      /*
       * Typically, $HOME is not defined on Windows, unless the user has
       * specifically defined it for Vim's sake.  However, on Windows NT
--- 3852,3858 ----
      var = mch_getenv((char_u *)"HOME");
  #endif
  
! #ifdef MSWIN
      /*
       * Typically, $HOME is not defined on Windows, unless the user has
       * specifically defined it for Vim's sake.  However, on Windows NT
***************
*** 4318,4324 ****
  
      if (p != NULL)
      {
! #if defined(WIN3264)
  	if (enc_utf8)
  	{
  	    int	    len;
--- 4318,4324 ----
  
      if (p != NULL)
      {
! #if defined(MSWIN)
  	if (enc_utf8)
  	{
  	    int	    len;
***************
*** 4362,4368 ****
  	    else
  		p = mch_getenv((char_u *)"VIM");
  
! #if defined(WIN3264)
  	    if (enc_utf8)
  	    {
  		int	len;
--- 4362,4368 ----
  	    else
  		p = mch_getenv((char_u *)"VIM");
  
! #if defined(MSWIN)
  	    if (enc_utf8)
  	    {
  		int	len;
***************
*** 4688,4694 ****
  	    add_user((char_u *)pw->pw_name, TRUE);
  	endpwent();
      }
! # elif defined(WIN3264)
      {
  	DWORD		nusers = 0, ntotal = 0, i;
  	PUSER_INFO_0	uinfo;
--- 4688,4694 ----
  	    add_user((char_u *)pw->pw_name, TRUE);
  	endpwent();
      }
! # elif defined(MSWIN)
      {
  	DWORD		nusers = 0, ntotal = 0, i;
  	PUSER_INFO_0	uinfo;
***************
*** 4820,4826 ****
  #else
      homedir_env_orig = homedir_env = mch_getenv((char_u *)"HOME");
  #endif
! #ifdef WIN3264
      if (homedir_env == NULL)
  	homedir_env_orig = homedir_env = mch_getenv((char_u *)"USERPROFILE");
  #endif
--- 4820,4826 ----
  #else
      homedir_env_orig = homedir_env = mch_getenv((char_u *)"HOME");
  #endif
! #ifdef MSWIN
      if (homedir_env == NULL)
  	homedir_env_orig = homedir_env = mch_getenv((char_u *)"USERPROFILE");
  #endif
***************
*** 5619,5625 ****
  static int expand_backtick(garray_T *gap, char_u *pat, int flags);
  # endif
  
! # if defined(WIN3264)
  /*
   * File name expansion code for MS-DOS, Win16 and Win32.  It's here because
   * it's shared between these systems.
--- 5619,5625 ----
  static int expand_backtick(garray_T *gap, char_u *pat, int flags);
  # endif
  
! # if defined(MSWIN)
  /*
   * File name expansion code for MS-DOS, Win16 and Win32.  It's here because
   * it's shared between these systems.
***************
*** 5898,5904 ****
  {
      return dos_expandpath(gap, path, 0, flags, FALSE);
  }
! # endif /* WIN3264 */
  
  #if (defined(UNIX) && !defined(VMS)) || defined(USE_UNIXFILENAME) \
  	|| defined(PROTO)
--- 5898,5904 ----
  {
      return dos_expandpath(gap, path, 0, flags, FALSE);
  }
! # endif // MSWIN
  
  #if (defined(UNIX) && !defined(VMS)) || defined(USE_UNIXFILENAME) \
  	|| defined(PROTO)
***************
*** 6646,6652 ****
  {
      char_u *p;
  
! #ifdef WIN3264
      p = gettail(p_sh);
      p = vim_strnsave(p, (int)(skiptowhite(p) - p));
  #else
--- 6646,6652 ----
  {
      char_u *p;
  
! #ifdef MSWIN
      p = gettail(p_sh);
      p = vim_strnsave(p, (int)(skiptowhite(p) - p));
  #else
*** ../vim-8.1.0940/src/misc2.c	2019-02-13 22:45:21.512636158 +0100
--- src/misc2.c	2019-02-17 17:29:18.556788840 +0100
***************
*** 1427,1433 ****
      length = (unsigned)STRLEN(string) + 3;  /* two quotes and a trailing NUL */
      for (p = string; *p != NUL; MB_PTR_ADV(p))
      {
! # ifdef WIN32
  	if (!p_ssl)
  	{
  	    if (*p == '"')
--- 1427,1433 ----
      length = (unsigned)STRLEN(string) + 3;  /* two quotes and a trailing NUL */
      for (p = string; *p != NUL; MB_PTR_ADV(p))
      {
! # ifdef MSWIN
  	if (!p_ssl)
  	{
  	    if (*p == '"')
***************
*** 1458,1464 ****
  	d = escaped_string;
  
  	/* add opening quote */
! # ifdef WIN32
  	if (!p_ssl)
  	    *d++ = '"';
  	else
--- 1458,1464 ----
  	d = escaped_string;
  
  	/* add opening quote */
! # ifdef MSWIN
  	if (!p_ssl)
  	    *d++ = '"';
  	else
***************
*** 1467,1473 ****
  
  	for (p = string; *p != NUL; )
  	{
! # ifdef WIN32
  	    if (!p_ssl)
  	    {
  		if (*p == '"')
--- 1467,1473 ----
  
  	for (p = string; *p != NUL; )
  	{
! # ifdef MSWIN
  	    if (!p_ssl)
  	    {
  		if (*p == '"')
***************
*** 1510,1516 ****
  	}
  
  	/* add terminating quote and finish with a NUL */
! # ifdef WIN32
  	if (!p_ssl)
  	    *d++ = '"';
  	else
--- 1510,1516 ----
  	}
  
  	/* add terminating quote and finish with a NUL */
! # ifdef MSWIN
  	if (!p_ssl)
  	    *d++ = '"';
  	else
***************
*** 2169,2175 ****
      }
  }
  
! #if (defined(UNIX) && !defined(USE_SYSTEM)) || defined(WIN3264) \
  	|| defined(PROTO)
  /*
   * Append the text in "gap" below the cursor line and clear "gap".
--- 2169,2175 ----
      }
  }
  
! #if (defined(UNIX) && !defined(USE_SYSTEM)) || defined(MSWIN) \
  	|| defined(PROTO)
  /*
   * Append the text in "gap" below the cursor line and clear "gap".
***************
*** 4185,4191 ****
      perm = mch_getperm(fname);
  #endif
      if (
! # ifdef WIN3264
  	    mch_writable(fname) &&
  # else
  # if defined(UNIX) || defined(VMS)
--- 4185,4191 ----
      perm = mch_getperm(fname);
  #endif
      if (
! # ifdef MSWIN
  	    mch_writable(fname) &&
  # else
  # if defined(UNIX) || defined(VMS)
***************
*** 4437,4443 ****
      for (i = 0; i < MAX_REPEAT_PARSE; ++i)
      {
  	// For Win32 mch_breakcheck() does not check for input, do it here.
! # if defined(WIN32) && defined(FEAT_JOB_CHANNEL)
  	channel_handle_events(FALSE);
  # endif
  
--- 4437,4443 ----
      for (i = 0; i < MAX_REPEAT_PARSE; ++i)
      {
  	// For Win32 mch_breakcheck() does not check for input, do it here.
! # if defined(MSWIN) && defined(FEAT_JOB_CHANNEL)
  	channel_handle_events(FALSE);
  # endif
  
*** ../vim-8.1.0940/src/nbdebug.c	2019-01-17 15:43:21.761878368 +0100
--- src/nbdebug.c	2019-02-17 17:29:18.556788840 +0100
***************
*** 124,130 ****
  
  	expand_env((char_u *) file, (char_u *) buf, BUFSIZ);
  	return
! #ifndef FEAT_GUI_W32
  		(access(buf, F_OK) == 0);
  #else
  		(access(buf, 0) == 0);
--- 124,130 ----
  
  	expand_env((char_u *) file, (char_u *) buf, BUFSIZ);
  	return
! #ifndef FEAT_GUI_MSWIN
  		(access(buf, F_OK) == 0);
  #else
  		(access(buf, 0) == 0);
*** ../vim-8.1.0940/src/netbeans.c	2019-01-26 17:28:22.228599112 +0100
--- src/netbeans.c	2019-02-17 17:29:18.556788840 +0100
***************
*** 27,33 ****
  
  #if defined(FEAT_NETBEANS_INTG) || defined(PROTO)
  
! #ifndef WIN32
  # include <netdb.h>
  # ifdef HAVE_LIBGEN_H
  #  include <libgen.h>
--- 27,33 ----
  
  #if defined(FEAT_NETBEANS_INTG) || defined(PROTO)
  
! #ifndef MSWIN
  # include <netdb.h>
  # ifdef HAVE_LIBGEN_H
  #  include <libgen.h>
***************
*** 2347,2353 ****
  {
  #ifdef FEAT_GUI
  # if !defined(FEAT_GUI_X11) && !defined(FEAT_GUI_GTK)  \
! 		&& !defined(FEAT_GUI_W32)
      if (gui.in_use)
      {
  	emsg(_("E838: netbeans is not supported with this GUI"));
--- 2347,2353 ----
  {
  #ifdef FEAT_GUI
  # if !defined(FEAT_GUI_X11) && !defined(FEAT_GUI_GTK)  \
! 		&& !defined(FEAT_GUI_MSWIN)
      if (gui.in_use)
      {
  	emsg(_("E838: netbeans is not supported with this GUI"));
***************
*** 2567,2573 ****
  }
  #endif
  
! #if defined(FEAT_GUI_X11) || defined(FEAT_GUI_W32) || defined(PROTO)
  /*
   * Tell netbeans that the window was moved or resized.
   */
--- 2567,2573 ----
  }
  #endif
  
! #if defined(FEAT_GUI_X11) || defined(FEAT_GUI_MSWIN) || defined(PROTO)
  /*
   * Tell netbeans that the window was moved or resized.
   */
*** ../vim-8.1.0940/src/normal.c	2019-02-17 15:00:48.450637077 +0100
--- src/normal.c	2019-02-17 17:29:18.556788840 +0100
***************
*** 5401,5407 ****
  # endif
  #endif
  	redraw_later(CLEAR);
! #if defined(WIN3264) && !defined(FEAT_GUI_W32)
  	resize_console_buf();
  #endif
      }
--- 5401,5407 ----
  # endif
  #endif
  	redraw_later(CLEAR);
! #if defined(MSWIN) && !defined(FEAT_GUI_MSWIN)
  	resize_console_buf();
  #endif
      }
*** ../vim-8.1.0940/src/option.c	2019-02-16 19:05:07.348324655 +0100
--- src/option.c	2019-02-17 17:29:18.556788840 +0100
***************
*** 505,511 ****
  			    (char_u *)NULL, PV_NONE,
  #endif
  			    {
! #if (defined(WIN3264)) && !defined(FEAT_GUI_W32)
  			    (char_u *)128L,
  #else
  			    (char_u *)224L,
--- 505,511 ----
  			    (char_u *)NULL, PV_NONE,
  #endif
  			    {
! #if defined(MSWIN) && !defined(FEAT_GUI_MSWIN)
  			    (char_u *)128L,
  #else
  			    (char_u *)224L,
***************
*** 575,581 ****
      {"background",  "bg",   P_STRING|P_VI_DEF|P_RCLR,
  			    (char_u *)&p_bg, PV_NONE,
  			    {
! #if (defined(WIN3264)) && !defined(FEAT_GUI)
  			    (char_u *)"dark",
  #else
  			    (char_u *)"light",
--- 575,581 ----
      {"background",  "bg",   P_STRING|P_VI_DEF|P_RCLR,
  			    (char_u *)&p_bg, PV_NONE,
  			    {
! #if (defined(MSWIN)) && !defined(FEAT_GUI)
  			    (char_u *)"dark",
  #else
  			    (char_u *)"light",
***************
*** 1309,1315 ****
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_gp, PV_GP,
  			    {
! # ifdef WIN3264
  			    /* may be changed to "grep -n" in os_win32.c */
  			    (char_u *)"findstr /n",
  # else
--- 1309,1315 ----
  #ifdef FEAT_QUICKFIX
  			    (char_u *)&p_gp, PV_GP,
  			    {
! # ifdef MSWIN
  			    /* may be changed to "grep -n" in os_win32.c */
  			    (char_u *)"findstr /n",
  # else
***************
*** 1739,1745 ****
      {"lines",	    NULL,   P_NUM|P_NODEFAULT|P_NO_MKRC|P_VI_DEF|P_RCLR,
  			    (char_u *)&Rows, PV_NONE,
  			    {
! #if defined(WIN3264)
  			    (char_u *)25L,
  #else
  			    (char_u *)24L,
--- 1739,1745 ----
      {"lines",	    NULL,   P_NUM|P_NODEFAULT|P_NO_MKRC|P_VI_DEF|P_RCLR,
  			    (char_u *)&Rows, PV_NONE,
  			    {
! #if defined(MSWIN)
  			    (char_u *)25L,
  #else
  			    (char_u *)24L,
***************
*** 1751,1757 ****
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! #ifdef FEAT_GUI_W32
  			    {(char_u *)1L, (char_u *)0L}
  #else
  			    {(char_u *)0L, (char_u *)0L}
--- 1751,1757 ----
  #else
  			    (char_u *)NULL, PV_NONE,
  #endif
! #ifdef FEAT_GUI_MSWIN
  			    {(char_u *)1L, (char_u *)0L}
  #else
  			    {(char_u *)0L, (char_u *)0L}
***************
*** 1897,1903 ****
      {"mouse",	    NULL,   P_STRING|P_VI_DEF|P_FLAGLIST,
  			    (char_u *)&p_mouse, PV_NONE,
  			    {
! #if defined(WIN3264)
  				(char_u *)"a",
  #else
  				(char_u *)"",
--- 1897,1903 ----
      {"mouse",	    NULL,   P_STRING|P_VI_DEF|P_FLAGLIST,
  			    (char_u *)&p_mouse, PV_NONE,
  			    {
! #if defined(MSWIN)
  				(char_u *)"a",
  #else
  				(char_u *)"",
***************
*** 2260,2266 ****
  			    (char_u *)&p_report, PV_NONE,
  			    {(char_u *)2L, (char_u *)0L} SCTX_INIT},
      {"restorescreen", "rs", P_BOOL|P_VI_DEF,
! #ifdef WIN3264
  			    (char_u *)&p_rs, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
--- 2260,2266 ----
  			    (char_u *)&p_report, PV_NONE,
  			    {(char_u *)2L, (char_u *)0L} SCTX_INIT},
      {"restorescreen", "rs", P_BOOL|P_VI_DEF,
! #ifdef MSWIN
  			    (char_u *)&p_rs, PV_NONE,
  #else
  			    (char_u *)NULL, PV_NONE,
***************
*** 2363,2369 ****
  #ifdef VMS
  			    (char_u *)"-",
  #else
! # if defined(WIN3264)
  			    (char_u *)"",	/* set in set_init_1() */
  # else
  			    (char_u *)"sh",
--- 2363,2369 ----
  #ifdef VMS
  			    (char_u *)"-",
  #else
! # if defined(MSWIN)
  			    (char_u *)"",	/* set in set_init_1() */
  # else
  			    (char_u *)"sh",
***************
*** 2429,2435 ****
      {"shellxescape", "sxe", P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_sxe, PV_NONE,
  			    {
! #if defined(WIN3264)
  			    (char_u *)"\"&|<>()@^",
  #else
  			    (char_u *)"",
--- 2429,2435 ----
      {"shellxescape", "sxe", P_STRING|P_VI_DEF|P_SECURE,
  			    (char_u *)&p_sxe, PV_NONE,
  			    {
! #if defined(MSWIN)
  			    (char_u *)"\"&|<>()@^",
  #else
  			    (char_u *)"",
***************
*** 2720,2726 ****
  #endif
  			    SCTX_INIT},
      {"termwintype", "twt",  P_STRING|P_ALLOCED|P_VI_DEF,
! #if defined(WIN3264) && defined(FEAT_TERMINAL)
  			    (char_u *)&p_twt, PV_NONE,
  			    {(char_u *)"", (char_u *)NULL}
  #else
--- 2720,2726 ----
  #endif
  			    SCTX_INIT},
      {"termwintype", "twt",  P_STRING|P_ALLOCED|P_VI_DEF,
! #if defined(MSWIN) && defined(FEAT_TERMINAL)
  			    (char_u *)&p_twt, PV_NONE,
  			    {(char_u *)"", (char_u *)NULL}
  #else
***************
*** 2795,2801 ****
  #endif
  			    {(char_u *)"", (char_u *)0L} SCTX_INIT},
      {"toolbar",     "tb",   P_STRING|P_ONECOMMA|P_VI_DEF|P_NODUP,
! #if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_W32)
  			    (char_u *)&p_toolbar, PV_NONE,
  			    {(char_u *)"icons,tooltips", (char_u *)0L}
  #else
--- 2795,2801 ----
  #endif
  			    {(char_u *)"", (char_u *)0L} SCTX_INIT},
      {"toolbar",     "tb",   P_STRING|P_ONECOMMA|P_VI_DEF|P_NODUP,
! #if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_MSWIN)
  			    (char_u *)&p_toolbar, PV_NONE,
  			    {(char_u *)"icons,tooltips", (char_u *)0L}
  #else
***************
*** 2857,2863 ****
      {"undolevels",  "ul",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_ul, PV_UL,
  			    {
! #if defined(UNIX) || defined(WIN3264) || defined(VMS)
  			    (char_u *)1000L,
  #else
  			    (char_u *)100L,
--- 2857,2863 ----
      {"undolevels",  "ul",   P_NUM|P_VI_DEF,
  			    (char_u *)&p_ul, PV_UL,
  			    {
! #if defined(UNIX) || defined(MSWIN) || defined(VMS)
  			    (char_u *)1000L,
  #else
  			    (char_u *)100L,
***************
*** 3033,3039 ****
  			    (char_u *)&p_wmw, PV_NONE,
  			    {(char_u *)1L, (char_u *)0L} SCTX_INIT},
      {"winptydll", NULL,	    P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
! #if defined(WIN3264) && defined(FEAT_TERMINAL)
  			    (char_u *)&p_winptydll, PV_NONE, {
  # ifdef _WIN64
  			    (char_u *)"winpty64.dll",
--- 3033,3039 ----
  			    (char_u *)&p_wmw, PV_NONE,
  			    {(char_u *)1L, (char_u *)0L} SCTX_INIT},
      {"winptydll", NULL,	    P_STRING|P_EXPAND|P_VI_DEF|P_SECURE,
! #if defined(MSWIN) && defined(FEAT_TERMINAL)
  			    (char_u *)&p_winptydll, PV_NONE, {
  # ifdef _WIN64
  			    (char_u *)"winpty64.dll",
***************
*** 3209,3215 ****
  #ifdef FEAT_SIGNS
  static char *(p_scl_values[]) = {"yes", "no", "auto", NULL};
  #endif
! #if defined(WIN3264) && defined(FEAT_TERMINAL)
  static char *(p_twt_values[]) = {"winpty", "conpty", "", NULL};
  #endif
  
--- 3209,3215 ----
  #ifdef FEAT_SIGNS
  static char *(p_scl_values[]) = {"yes", "no", "auto", NULL};
  #endif
! #if defined(MSWIN) && defined(FEAT_TERMINAL)
  static char *(p_twt_values[]) = {"winpty", "conpty", "", NULL};
  #endif
  
***************
*** 3306,3312 ****
      if (((p = mch_getenv((char_u *)"SHELL")) != NULL && *p != NUL)
  #if defined(MSWIN)
  	    || ((p = mch_getenv((char_u *)"COMSPEC")) != NULL && *p != NUL)
! # ifdef WIN3264
  	    || ((p = (char_u *)default_shell()) != NULL && *p != NUL)
  # endif
  #endif
--- 3306,3312 ----
      if (((p = mch_getenv((char_u *)"SHELL")) != NULL && *p != NUL)
  #if defined(MSWIN)
  	    || ((p = mch_getenv((char_u *)"COMSPEC")) != NULL && *p != NUL)
! # ifdef MSWIN
  	    || ((p = (char_u *)default_shell()) != NULL && *p != NUL)
  # endif
  #endif
***************
*** 3575,3581 ****
  
      didset_options2();
  
! # if defined(WIN3264) && defined(FEAT_GETTEXT)
      /*
       * If $LANG isn't set, try to get a good value for it.  This makes the
       * right language be used automatically.  Don't do this for English.
--- 3575,3581 ----
  
      didset_options2();
  
! # if defined(MSWIN) && defined(FEAT_GETTEXT)
      /*
       * If $LANG isn't set, try to get a good value for it.  This makes the
       * right language be used automatically.  Don't do this for English.
***************
*** 3658,3664 ****
  	    }
  #endif
  
! #if defined(WIN3264) && !defined(FEAT_GUI)
  	    /* Win32 console: When GetACP() returns a different value from
  	     * GetConsoleCP() set 'termencoding'. */
  	    if (GetACP() != GetConsoleCP())
--- 3658,3664 ----
  	    }
  #endif
  
! #if defined(MSWIN) && !defined(FEAT_GUI)
  	    /* Win32 console: When GetACP() returns a different value from
  	     * GetConsoleCP() set 'termencoding'. */
  	    if (GetACP() != GetConsoleCP())
***************
*** 3687,3693 ****
  		    p_tenc = empty_option;
  	    }
  #endif
! #if defined(WIN3264)
  	    /* $HOME may have characters in active code page. */
  	    init_homedir();
  #endif
--- 3687,3693 ----
  		    p_tenc = empty_option;
  	    }
  #endif
! #if defined(MSWIN)
  	    /* $HOME may have characters in active code page. */
  	    init_homedir();
  #endif
***************
*** 3922,3928 ****
      set_number_default("window", Rows - 1);
  
      /* For DOS console the default is always black. */
! #if !((defined(WIN3264)) && !defined(FEAT_GUI))
      /*
       * If 'background' wasn't set by the user, try guessing the value,
       * depending on the terminal name.  Only need to check for terminals
--- 3922,3928 ----
      set_number_default("window", Rows - 1);
  
      /* For DOS console the default is always black. */
! #if !((defined(MSWIN)) && !defined(FEAT_GUI))
      /*
       * If 'background' wasn't set by the user, try guessing the value,
       * depending on the terminal name.  Only need to check for terminals
***************
*** 3965,3971 ****
      static char_u *
  term_bg_default(void)
  {
! #if defined(WIN3264)
      /* DOS console is nearly always black */
      return (char_u *)"dark";
  #else
--- 3965,3971 ----
      static char_u *
  term_bg_default(void)
  {
! #if defined(MSWIN)
      /* DOS console is nearly always black */
      return (char_u *)"dark";
  #else
***************
*** 3990,3996 ****
      void
  set_init_3(void)
  {
! #if defined(UNIX) || defined(WIN3264)
  /*
   * Set 'shellpipe' and 'shellredir', depending on the 'shell' option.
   * This is done after other initializations, where 'shell' might have been
--- 3990,3996 ----
      void
  set_init_3(void)
  {
! #if defined(UNIX) || defined(MSWIN)
  /*
   * Set 'shellpipe' and 'shellredir', depending on the 'shell' option.
   * This is done after other initializations, where 'shell' might have been
***************
*** 4025,4031 ****
  	 */
  	if (	   fnamecmp(p, "csh") == 0
  		|| fnamecmp(p, "tcsh") == 0
! # if defined(WIN3264)	/* also check with .exe extension */
  		|| fnamecmp(p, "csh.exe") == 0
  		|| fnamecmp(p, "tcsh.exe") == 0
  # endif
--- 4025,4031 ----
  	 */
  	if (	   fnamecmp(p, "csh") == 0
  		|| fnamecmp(p, "tcsh") == 0
! # if defined(MSWIN)	// also check with .exe extension
  		|| fnamecmp(p, "csh.exe") == 0
  		|| fnamecmp(p, "tcsh.exe") == 0
  # endif
***************
*** 4034,4040 ****
  # if defined(FEAT_QUICKFIX)
  	    if (do_sp)
  	    {
! #  ifdef WIN3264
  		p_sp = (char_u *)">&";
  #  else
  		p_sp = (char_u *)"|& tee";
--- 4034,4040 ----
  # if defined(FEAT_QUICKFIX)
  	    if (do_sp)
  	    {
! #  ifdef MSWIN
  		p_sp = (char_u *)">&";
  #  else
  		p_sp = (char_u *)"|& tee";
***************
*** 4058,4064 ****
  		    || fnamecmp(p, "zsh-beta") == 0
  		    || fnamecmp(p, "bash") == 0
  		    || fnamecmp(p, "fish") == 0
! # ifdef WIN3264
  		    || fnamecmp(p, "cmd") == 0
  		    || fnamecmp(p, "sh.exe") == 0
  		    || fnamecmp(p, "ksh.exe") == 0
--- 4058,4064 ----
  		    || fnamecmp(p, "zsh-beta") == 0
  		    || fnamecmp(p, "bash") == 0
  		    || fnamecmp(p, "fish") == 0
! # ifdef MSWIN
  		    || fnamecmp(p, "cmd") == 0
  		    || fnamecmp(p, "sh.exe") == 0
  		    || fnamecmp(p, "ksh.exe") == 0
***************
*** 4074,4080 ****
  # if defined(FEAT_QUICKFIX)
  		if (do_sp)
  		{
! #  ifdef WIN3264
  		    p_sp = (char_u *)">%s 2>&1";
  #  else
  		    p_sp = (char_u *)"2>&1| tee";
--- 4074,4080 ----
  # if defined(FEAT_QUICKFIX)
  		if (do_sp)
  		{
! #  ifdef MSWIN
  		    p_sp = (char_u *)">%s 2>&1";
  #  else
  		    p_sp = (char_u *)"2>&1| tee";
***************
*** 4092,4098 ****
      }
  #endif
  
! #if defined(WIN3264)
      /*
       * Set 'shellcmdflag', 'shellxquote', and 'shellquote' depending on the
       * 'shell' option.
--- 4092,4098 ----
      }
  #endif
  
! #if defined(MSWIN)
      /*
       * Set 'shellcmdflag', 'shellxquote', and 'shellquote' depending on the
       * 'shell' option.
***************
*** 5553,5559 ****
      (void)compile_cap_prog(curwin->w_s);
      (void)did_set_spell_option(TRUE);
  #endif
! #if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_W32)
      (void)opt_strings_flags(p_toolbar, p_toolbar_values, &toolbar_flags, TRUE);
  #endif
  #if defined(FEAT_TOOLBAR) && defined(FEAT_GUI_GTK)
--- 5553,5559 ----
      (void)compile_cap_prog(curwin->w_s);
      (void)did_set_spell_option(TRUE);
  #endif
! #if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_MSWIN)
      (void)opt_strings_flags(p_toolbar, p_toolbar_values, &toolbar_flags, TRUE);
  #endif
  #if defined(FEAT_TOOLBAR) && defined(FEAT_GUI_GTK)
***************
*** 6403,6409 ****
  		}
  	    }
  
! #if defined(WIN3264)
  	    /* $HOME may have characters in active code page. */
  	    if (varp == &p_enc)
  		init_homedir();
--- 6403,6409 ----
  		}
  	    }
  
! #if defined(MSWIN)
  	    /* $HOME may have characters in active code page. */
  	    if (varp == &p_enc)
  		init_homedir();
***************
*** 6810,6816 ****
  	{
  	    out_str(T_ME);
  	    redraw_later(CLEAR);
! #if defined(WIN3264) && !defined(FEAT_GUI_W32)
  	    /* Since t_me has been set, this probably means that the user
  	     * wants to use this as default colors.  Need to reset default
  	     * background/foreground colors. */
--- 6810,6816 ----
  	{
  	    out_str(T_ME);
  	    redraw_later(CLEAR);
! #if defined(MSWIN) && !defined(FEAT_GUI_MSWIN)
  	    /* Since t_me has been set, this probably means that the user
  	     * wants to use this as default colors.  Need to reset default
  	     * background/foreground colors. */
***************
*** 7228,7234 ****
  #endif
  
  
! #if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_W32)
      /* 'toolbar' */
      else if (varp == &p_toolbar)
      {
--- 7228,7234 ----
  #endif
  
  
! #if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_MSWIN)
      /* 'toolbar' */
      else if (varp == &p_toolbar)
      {
***************
*** 7498,7504 ****
  		errmsg = e_invarg;
  	}
      }
! # if defined(WIN3264)
      // 'termwintype'
      else if (varp == &p_twt)
      {
--- 7498,7504 ----
  		errmsg = e_invarg;
  	}
      }
! # if defined(MSWIN)
      // 'termwintype'
      else if (varp == &p_twt)
      {
*** ../vim-8.1.0940/src/option.h	2019-02-15 21:06:05.342289715 +0100
--- src/option.h	2019-02-17 17:29:18.556788840 +0100
***************
*** 18,24 ****
  #ifdef AMIGA
  # define DFLT_EFM	"%f>%l:%c:%t:%n:%m,%f:%l: %t%*\\D%n: %m,%f %l %t%*\\D%n: %m,%*[^\"]\"%f\"%*\\D%l: %m,%f:%l:%m,%f|%l| %m"
  #else
! # if defined(WIN3264)
  #  define DFLT_EFM	"%f(%l) \\=: %t%*\\D%n: %m,%*[^\"]\"%f\"%*\\D%l: %m,%f(%l) \\=: %m,%*[^ ] %f %l: %m,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,%f|%l| %m"
  # else
  #  if defined(__QNX__)
--- 18,24 ----
  #ifdef AMIGA
  # define DFLT_EFM	"%f>%l:%c:%t:%n:%m,%f:%l: %t%*\\D%n: %m,%f %l %t%*\\D%n: %m,%*[^\"]\"%f\"%*\\D%l: %m,%f:%l:%m,%f|%l| %m"
  #else
! # if defined(MSWIN)
  #  define DFLT_EFM	"%f(%l) \\=: %t%*\\D%n: %m,%*[^\"]\"%f\"%*\\D%l: %m,%f(%l) \\=: %m,%*[^ ] %f %l: %m,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,%f|%l| %m"
  # else
  #  if defined(__QNX__)
***************
*** 546,555 ****
  #ifdef FEAT_RIGHTLEFT
  EXTERN int	p_hkmap;	/* 'hkmap' */
  EXTERN int	p_hkmapp;	/* 'hkmapp' */
- # ifdef FEAT_FKMAP
- EXTERN int	p_fkmap;	/* 'fkmap' */
- EXTERN int	p_altkeymap;	/* 'altkeymap' */
- # endif
  # ifdef FEAT_ARABIC
  EXTERN int	p_arshape;	/* 'arabicshape' */
  # endif
--- 546,551 ----
***************
*** 694,700 ****
  #if defined(FEAT_QUICKFIX)
  EXTERN long	p_pvh;		/* 'previewheight' */
  #endif
! #ifdef WIN3264
  EXTERN int	p_rs;		/* 'restorescreen' */
  #endif
  #ifdef FEAT_RIGHTLEFT
--- 690,696 ----
  #if defined(FEAT_QUICKFIX)
  EXTERN long	p_pvh;		/* 'previewheight' */
  #endif
! #ifdef MSWIN
  EXTERN int	p_rs;		/* 'restorescreen' */
  #endif
  #ifdef FEAT_RIGHTLEFT
***************
*** 827,833 ****
  #ifdef FEAT_TERMGUICOLORS
  EXTERN int	p_tgc;		/* 'termguicolors' */
  #endif
! #if defined(WIN3264) && defined(FEAT_TERMINAL)
  EXTERN char_u	*p_twt;		// 'termwintype'
  #endif
  EXTERN int	p_terse;	/* 'terse' */
--- 823,829 ----
  #ifdef FEAT_TERMGUICOLORS
  EXTERN int	p_tgc;		/* 'termguicolors' */
  #endif
! #if defined(MSWIN) && defined(FEAT_TERMINAL)
  EXTERN char_u	*p_twt;		// 'termwintype'
  #endif
  EXTERN int	p_terse;	/* 'terse' */
***************
*** 848,854 ****
  EXTERN long	p_ttm;		/* 'ttimeoutlen' */
  EXTERN int	p_tbi;		/* 'ttybuiltin' */
  EXTERN int	p_tf;		/* 'ttyfast' */
! #if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_W32)
  EXTERN char_u	*p_toolbar;	/* 'toolbar' */
  EXTERN unsigned toolbar_flags;
  # ifdef IN_OPTION_C
--- 844,850 ----
  EXTERN long	p_ttm;		/* 'ttimeoutlen' */
  EXTERN int	p_tbi;		/* 'ttybuiltin' */
  EXTERN int	p_tf;		/* 'ttyfast' */
! #if defined(FEAT_TOOLBAR) && !defined(FEAT_GUI_MSWIN)
  EXTERN char_u	*p_toolbar;	/* 'toolbar' */
  EXTERN unsigned toolbar_flags;
  # ifdef IN_OPTION_C
***************
*** 945,951 ****
  EXTERN long	p_wmh;		/* 'winminheight' */
  EXTERN long	p_wmw;		/* 'winminwidth' */
  EXTERN long	p_wiw;		/* 'winwidth' */
! #if defined(WIN3264) && defined(FEAT_TERMINAL)
  EXTERN char_u	*p_winptydll;	/* 'winptydll' */
  #endif
  EXTERN int	p_ws;		/* 'wrapscan' */
--- 941,947 ----
  EXTERN long	p_wmh;		/* 'winminheight' */
  EXTERN long	p_wmw;		/* 'winminwidth' */
  EXTERN long	p_wiw;		/* 'winwidth' */
! #if defined(MSWIN) && defined(FEAT_TERMINAL)
  EXTERN char_u	*p_winptydll;	/* 'winptydll' */
  #endif
  EXTERN int	p_ws;		/* 'wrapscan' */
*** ../vim-8.1.0940/src/os_mswin.c	2019-02-14 14:08:01.178543302 +0100
--- src/os_mswin.c	2019-02-17 17:29:18.556788840 +0100
***************
*** 32,38 ****
  #endif
  
  #ifndef PROTO
! # if defined(FEAT_TITLE) && !defined(FEAT_GUI_W32)
  #  include <shellapi.h>
  # endif
  
--- 32,38 ----
  #endif
  
  #ifndef PROTO
! # if defined(FEAT_TITLE) && !defined(FEAT_GUI_MSWIN)
  #  include <shellapi.h>
  # endif
  
***************
*** 3091,3097 ****
      }
      if (STRCMP(name, "*") == 0)
      {
! #if defined(FEAT_GUI_W32)
  	CHOOSEFONT	cf;
  	/* if name is "*", bring up std font dialog: */
  	vim_memset(&cf, 0, sizeof(cf));
--- 3091,3097 ----
      }
      if (STRCMP(name, "*") == 0)
      {
! #if defined(FEAT_GUI_MSWIN)
  	CHOOSEFONT	cf;
  	/* if name is "*", bring up std font dialog: */
  	vim_memset(&cf, 0, sizeof(cf));
*** ../vim-8.1.0940/src/os_unix.c	2019-02-10 22:43:30.158824050 +0100
--- src/os_unix.c	2019-02-17 17:29:18.556788840 +0100
***************
*** 49,55 ****
  #endif
  
  #ifdef __CYGWIN__
! # ifndef WIN32
  #  include <cygwin/version.h>
  #  include <sys/cygwin.h>	/* for cygwin_conv_to_posix_path() and/or
  				 * for cygwin_conv_path() */
--- 49,55 ----
  #endif
  
  #ifdef __CYGWIN__
! # ifndef MSWIN
  #  include <cygwin/version.h>
  #  include <sys/cygwin.h>	/* for cygwin_conv_to_posix_path() and/or
  				 * for cygwin_conv_path() */
*** ../vim-8.1.0940/src/os_w32exe.c	2019-01-24 16:38:58.272712472 +0100
--- src/os_w32exe.c	2019-02-17 17:29:18.556788840 +0100
***************
*** 22,28 ****
  
  /* cproto doesn't create a prototype for main() */
  int _cdecl
! #if defined(FEAT_GUI_W32)
  VimMain
  #else
      main
--- 22,28 ----
  
  /* cproto doesn't create a prototype for main() */
  int _cdecl
! #if defined(FEAT_GUI_MSWIN)
  VimMain
  #else
      main
***************
*** 104,110 ****
      pSaveInst = SaveInst;
  # endif
      pmain =
! # if defined(FEAT_GUI_W32)
      //&& defined(__MINGW32__)
  	VimMain
  # else
--- 104,110 ----
      pSaveInst = SaveInst;
  # endif
      pmain =
! # if defined(FEAT_GUI_MSWIN)
      //&& defined(__MINGW32__)
  	VimMain
  # else
*** ../vim-8.1.0940/src/os_win32.c	2019-02-17 15:00:48.450637077 +0100
--- src/os_win32.c	2019-02-17 17:29:18.556788840 +0100
***************
*** 10,16 ****
   * os_win32.c
   *
   * Used for both the console version and the Win32 GUI.  A lot of code is for
!  * the console version only, so there is a lot of "#ifndef FEAT_GUI_W32".
   *
   * Win32 (Windows NT and Windows 95) system-dependent routines.
   * Portions lifted from the Win32 SDK samples, the MSDOS-dependent code,
--- 10,16 ----
   * os_win32.c
   *
   * Used for both the console version and the Win32 GUI.  A lot of code is for
!  * the console version only, so there is a lot of "#ifndef FEAT_GUI_MSWIN".
   *
   * Win32 (Windows NT and Windows 95) system-dependent routines.
   * Portions lifted from the Win32 SDK samples, the MSDOS-dependent code,
***************
*** 45,51 ****
  #endif
  
  #ifndef PROTO
! # if defined(FEAT_TITLE) && !defined(FEAT_GUI_W32)
  #  include <shellapi.h>
  # endif
  #endif
--- 45,51 ----
  #endif
  
  #ifndef PROTO
! # if defined(FEAT_TITLE) && !defined(FEAT_GUI_MSWIN)
  #  include <shellapi.h>
  # endif
  #endif
***************
*** 151,157 ****
  # define wcsicmp(a, b) wcscmpi((a), (b))
  #endif
  
! #ifndef FEAT_GUI_W32
  /* Win32 Console handles for input and output */
  static HANDLE g_hConIn  = INVALID_HANDLE_VALUE;
  static HANDLE g_hConOut = INVALID_HANDLE_VALUE;
--- 151,157 ----
  # define wcsicmp(a, b) wcscmpi((a), (b))
  #endif
  
! #ifndef FEAT_GUI_MSWIN
  /* Win32 Console handles for input and output */
  static HANDLE g_hConIn  = INVALID_HANDLE_VALUE;
  static HANDLE g_hConOut = INVALID_HANDLE_VALUE;
***************
*** 193,199 ****
  static int conpty_stable = 0;
  static void vtp_flag_init();
  
! #ifndef FEAT_GUI_W32
  static int vtp_working = 0;
  static void vtp_init();
  static void vtp_exit();
--- 193,199 ----
  static int conpty_stable = 0;
  static void vtp_flag_init();
  
! #ifndef FEAT_GUI_MSWIN
  static int vtp_working = 0;
  static void vtp_init();
  static void vtp_exit();
***************
*** 227,233 ****
  # define ENABLE_VIRTUAL_TERMINAL_PROCESSING 0x0004
  #endif
  
! #ifndef FEAT_GUI_W32
  static int suppress_winsize = 1;	/* don't fiddle with console */
  #endif
  
--- 227,233 ----
  # define ENABLE_VIRTUAL_TERMINAL_PROCESSING 0x0004
  #endif
  
! #ifndef FEAT_GUI_MSWIN
  static int suppress_winsize = 1;	/* don't fiddle with console */
  #endif
  
***************
*** 235,241 ****
  
  static BOOL win8_or_later = FALSE;
  
! #ifndef FEAT_GUI_W32
  /* Dynamic loading for portability */
  typedef struct _DYN_CONSOLE_SCREEN_BUFFER_INFOEX
  {
--- 235,241 ----
  
  static BOOL win8_or_later = FALSE;
  
! #ifndef FEAT_GUI_MSWIN
  /* Dynamic loading for portability */
  typedef struct _DYN_CONSOLE_SCREEN_BUFFER_INFOEX
  {
***************
*** 284,290 ****
      return ver;
  }
  
! #ifndef FEAT_GUI_W32
  /*
   * Version of ReadConsoleInput() that works with IME.
   * Works around problems on Windows 8.
--- 284,290 ----
      return ver;
  }
  
! #ifndef FEAT_GUI_MSWIN
  /*
   * Version of ReadConsoleInput() that works with IME.
   * Works around problems on Windows 8.
***************
*** 830,836 ****
      }
  }
  
! #ifndef FEAT_GUI_W32
  
  #define SHIFT  (SHIFT_PRESSED)
  #define CTRL   (RIGHT_CTRL_PRESSED | LEFT_CTRL_PRESSED)
--- 830,836 ----
      }
  }
  
! #ifndef FEAT_GUI_MSWIN
  
  #define SHIFT  (SHIFT_PRESSED)
  #define CTRL   (RIGHT_CTRL_PRESSED | LEFT_CTRL_PRESSED)
***************
*** 1122,1128 ****
  # pragma optimize("", on)
  #endif
  
! #endif /* FEAT_GUI_W32 */
  
  
  #ifdef FEAT_MOUSE
--- 1122,1128 ----
  # pragma optimize("", on)
  #endif
  
! #endif /* FEAT_GUI_MSWIN */
  
  
  #ifdef FEAT_MOUSE
***************
*** 1130,1136 ****
  /*
   * For the GUI the mouse handling is in gui_w32.c.
   */
! # ifdef FEAT_GUI_W32
      void
  mch_setmouse(int on UNUSED)
  {
--- 1130,1136 ----
  /*
   * For the GUI the mouse handling is in gui_w32.c.
   */
! # ifdef FEAT_GUI_MSWIN
      void
  mch_setmouse(int on UNUSED)
  {
***************
*** 1441,1447 ****
      return TRUE;
  }
  
! # endif /* FEAT_GUI_W32 */
  #endif /* FEAT_MOUSE */
  
  
--- 1441,1447 ----
      return TRUE;
  }
  
! # endif /* FEAT_GUI_MSWIN */
  #endif /* FEAT_MOUSE */
  
  
***************
*** 1481,1487 ****
  }
  #endif
  
! #ifndef FEAT_GUI_W32	    /* this isn't used for the GUI */
  /*
   * Handle FOCUS_EVENT.
   */
--- 1481,1487 ----
  }
  #endif
  
! #ifndef FEAT_GUI_MSWIN	    /* this isn't used for the GUI */
  /*
   * Handle FOCUS_EVENT.
   */
***************
*** 1775,1781 ****
  #endif
      }
  }
! #endif /* !FEAT_GUI_W32 */
  
  
  /*
--- 1775,1781 ----
  #endif
      }
  }
! #endif /* !FEAT_GUI_MSWIN */
  
  
  /*
***************
*** 1793,1799 ****
      long	time UNUSED,
      int		tb_change_cnt UNUSED)
  {
! #ifndef FEAT_GUI_W32	    /* this isn't used for the GUI */
  
      int		len;
      int		c;
--- 1793,1799 ----
      long	time UNUSED,
      int		tb_change_cnt UNUSED)
  {
! #ifndef FEAT_GUI_MSWIN	    /* this isn't used for the GUI */
  
      int		len;
      int		c;
***************
*** 2006,2014 ****
      }
      return len;
  
! #else /* FEAT_GUI_W32 */
      return 0;
! #endif /* FEAT_GUI_W32 */
  }
  
  #ifndef PROTO
--- 2006,2014 ----
      }
      return len;
  
! #else /* FEAT_GUI_MSWIN */
      return 0;
! #endif /* FEAT_GUI_MSWIN */
  }
  
  #ifndef PROTO
***************
*** 2123,2129 ****
  # define SET_INVALID_PARAM_HANDLER
  #endif
  
! #ifdef FEAT_GUI_W32
  
  /*
   * GUI version of mch_init().
--- 2123,2129 ----
  # define SET_INVALID_PARAM_HANDLER
  #endif
  
! #ifdef FEAT_GUI_MSWIN
  
  /*
   * GUI version of mch_init().
***************
*** 2196,2202 ****
  }
  
  
! #else /* FEAT_GUI_W32 */
  
  #define SRWIDTH(sr) ((sr).Right - (sr).Left + 1)
  #define SRHEIGHT(sr) ((sr).Bottom - (sr).Top + 1)
--- 2196,2202 ----
  }
  
  
! #else /* FEAT_GUI_MSWIN */
  
  #define SRWIDTH(sr) ((sr).Right - (sr).Left + 1)
  #define SRHEIGHT(sr) ((sr).Bottom - (sr).Top + 1)
***************
*** 2751,2757 ****
  
      exit(r);
  }
! #endif /* !FEAT_GUI_W32 */
  
  /*
   * Do we have an interactive window?
--- 2751,2757 ----
  
      exit(r);
  }
! #endif /* !FEAT_GUI_MSWIN */
  
  /*
   * Do we have an interactive window?
***************
*** 2763,2769 ****
  {
      get_exe_name();
  
! #ifdef FEAT_GUI_W32
      return OK;	    /* GUI always has a tty */
  #else
      if (isatty(1))
--- 2763,2769 ----
  {
      get_exe_name();
  
! #ifdef FEAT_GUI_MSWIN
      return OK;	    /* GUI always has a tty */
  #else
      if (isatty(1))
***************
*** 3852,3858 ****
  #endif
  }
  
! #ifndef FEAT_GUI_W32
  
  /*
   * handler for ctrl-break, ctrl-c interrupts, and fatal events.
--- 3852,3858 ----
  #endif
  }
  
! #ifndef FEAT_GUI_MSWIN
  
  /*
   * handler for ctrl-break, ctrl-c interrupts, and fatal events.
***************
*** 4168,4174 ****
      }
      suppress_winsize = 0;
  }
! #endif /* FEAT_GUI_W32 */
  
      static BOOL
  vim_create_process(
--- 4168,4174 ----
      }
      suppress_winsize = 0;
  }
! #endif /* FEAT_GUI_MSWIN */
  
      static BOOL
  vim_create_process(
***************
*** 4249,4255 ****
  }
  
  
! #if defined(FEAT_GUI_W32) || defined(PROTO)
  
  /*
   * Specialised version of system() for Win32 GUI mode.
--- 4249,4255 ----
  }
  
  
! #if defined(FEAT_GUI_MSWIN) || defined(PROTO)
  
  /*
   * Specialised version of system() for Win32 GUI mode.
***************
*** 5124,5130 ****
  	    else
  	    {
  		x = -1;
! #ifdef FEAT_GUI_W32
  		emsg(_("E371: Command not found"));
  #endif
  	    }
--- 5124,5130 ----
  	    else
  	    {
  		x = -1;
! #ifdef FEAT_GUI_MSWIN
  		emsg(_("E371: Command not found"));
  #endif
  	    }
***************
*** 5144,5150 ****
  	else
  	{
  	    cmdlen = (
! #ifdef FEAT_GUI_W32
  		(!p_stmp ? 0 : STRLEN(vimrun_path)) +
  #endif
  		STRLEN(p_sh) + STRLEN(p_shcf) + STRLEN(cmd) + 10);
--- 5144,5150 ----
  	else
  	{
  	    cmdlen = (
! #ifdef FEAT_GUI_MSWIN
  		(!p_stmp ? 0 : STRLEN(vimrun_path)) +
  #endif
  		STRLEN(p_sh) + STRLEN(p_shcf) + STRLEN(cmd) + 10);
***************
*** 5152,5158 ****
  	    newcmd = lalloc(cmdlen, TRUE);
  	    if (newcmd != NULL)
  	    {
! #if defined(FEAT_GUI_W32)
  		if (need_vimrun_warning)
  		{
  		    char *msg = _("VIMRUN.EXE not found in your $PATH.\n"
--- 5152,5158 ----
  	    newcmd = lalloc(cmdlen, TRUE);
  	    if (newcmd != NULL)
  	    {
! #if defined(FEAT_GUI_MSWIN)
  		if (need_vimrun_warning)
  		{
  		    char *msg = _("VIMRUN.EXE not found in your $PATH.\n"
***************
*** 5196,5202 ****
  
      /* Print the return value, unless "vimrun" was used. */
      if (x != 0 && !(options & SHELL_SILENT) && !emsg_silent
! #if defined(FEAT_GUI_W32)
  		&& ((options & SHELL_DOOUT) || s_dont_use_vimrun || !p_stmp)
  #endif
  	    )
--- 5196,5202 ----
  
      /* Print the return value, unless "vimrun" was used. */
      if (x != 0 && !(options & SHELL_SILENT) && !emsg_silent
! #if defined(FEAT_GUI_MSWIN)
  		&& ((options & SHELL_DOOUT) || s_dont_use_vimrun || !p_stmp)
  #endif
  	    )
***************
*** 5736,5742 ****
  #endif
  
  
! #ifndef FEAT_GUI_W32
  
  /*
   * Start termcap mode
--- 5736,5742 ----
  #endif
  
  
! #ifndef FEAT_GUI_MSWIN
  
  /*
   * Start termcap mode
***************
*** 5852,5861 ****
  
      g_fTermcapMode = FALSE;
  }
! #endif /* FEAT_GUI_W32 */
  
  
! #ifdef FEAT_GUI_W32
      void
  mch_write(
      char_u  *s UNUSED,
--- 5852,5861 ----
  
      g_fTermcapMode = FALSE;
  }
! #endif /* FEAT_GUI_MSWIN */
  
  
! #ifdef FEAT_GUI_MSWIN
      void
  mch_write(
      char_u  *s UNUSED,
***************
*** 6692,6698 ****
  #endif
  }
  
! #endif /* FEAT_GUI_W32 */
  
  
  /*
--- 6692,6698 ----
  #endif
  }
  
! #endif /* FEAT_GUI_MSWIN */
  
  
  /*
***************
*** 6703,6709 ****
      long    msec,
      int	    ignoreinput UNUSED)
  {
! #ifdef FEAT_GUI_W32
      Sleep((int)msec);	    /* never wait for input */
  #else /* Console */
      if (ignoreinput)
--- 6703,6709 ----
      long    msec,
      int	    ignoreinput UNUSED)
  {
! #ifdef FEAT_GUI_MSWIN
      Sleep((int)msec);	    /* never wait for input */
  #else /* Console */
      if (ignoreinput)
***************
*** 6771,6777 ****
      void
  mch_breakcheck(int force)
  {
! #ifndef FEAT_GUI_W32	    /* never used */
      if (g_fCtrlCPressed || g_fCBrkPressed)
      {
  	ctrl_break_was_pressed = g_fCBrkPressed;
--- 6771,6777 ----
      void
  mch_breakcheck(int force)
  {
! #ifndef FEAT_GUI_MSWIN	    /* never used */
      if (g_fCtrlCPressed || g_fCBrkPressed)
      {
  	ctrl_break_was_pressed = g_fCBrkPressed;
***************
*** 7696,7702 ****
  vtp_flag_init(void)
  {
      DWORD   ver = get_build_number();
! #ifndef FEAT_GUI_W32
      DWORD   mode;
      HANDLE  out;
  
--- 7696,7702 ----
  vtp_flag_init(void)
  {
      DWORD   ver = get_build_number();
! #ifndef FEAT_GUI_MSWIN
      DWORD   mode;
      HANDLE  out;
  
***************
*** 7716,7722 ****
  
  }
  
! #if !defined(FEAT_GUI_W32) || defined(PROTO)
  
      static void
  vtp_init(void)
--- 7716,7722 ----
  
  }
  
! #if !defined(FEAT_GUI_MSWIN) || defined(PROTO)
  
      static void
  vtp_init(void)
***************
*** 7941,7947 ****
      return conpty_stable;
  }
  
! #if !defined(FEAT_GUI_W32) || defined(PROTO)
      void
  resize_console_buf(void)
  {
--- 7941,7947 ----
      return conpty_stable;
  }
  
! #if !defined(FEAT_GUI_MSWIN) || defined(PROTO)
      void
  resize_console_buf(void)
  {
*** ../vim-8.1.0940/src/os_win32.h	2019-01-24 17:18:37.599462306 +0100
--- src/os_win32.h	2019-02-17 17:29:18.556788840 +0100
***************
*** 70,76 ****
  #if defined(__DATE__) && defined(__TIME__)
  # define HAVE_DATE_TIME
  #endif
! #ifndef FEAT_GUI_W32		/* GUI works different */
  # define BREAKCHECK_SKIP    1	/* call mch_breakcheck() each time, it's fast */
  #endif
  
--- 70,76 ----
  #if defined(__DATE__) && defined(__TIME__)
  # define HAVE_DATE_TIME
  #endif
! #ifndef FEAT_GUI_MSWIN		/* GUI works different */
  # define BREAKCHECK_SKIP    1	/* call mch_breakcheck() each time, it's fast */
  #endif
  
***************
*** 78,84 ****
  
  #define HAVE_PUTENV		/* at least Bcc 5.2 and MSC have it */
  
! #ifdef FEAT_GUI_W32
  # define NO_CONSOLE		/* don't included console-only code */
  #endif
  
--- 78,84 ----
  
  #define HAVE_PUTENV		/* at least Bcc 5.2 and MSC have it */
  
! #ifdef FEAT_GUI_MSWIN
  # define NO_CONSOLE		/* don't included console-only code */
  #endif
  
*** ../vim-8.1.0940/src/proto.h	2019-02-16 15:09:21.217946198 +0100
--- src/proto.h	2019-02-17 17:29:18.556788840 +0100
***************
*** 38,44 ****
  # if defined(UNIX) || defined(VMS)
  #  include "os_unix.pro"
  # endif
! # ifdef WIN3264
  #  include "os_win32.pro"
  #  include "os_mswin.pro"
  #  include "winclip.pro"
--- 38,44 ----
  # if defined(UNIX) || defined(VMS)
  #  include "os_unix.pro"
  # endif
! # ifdef MSWIN
  #  include "os_win32.pro"
  #  include "os_mswin.pro"
  #  include "winclip.pro"
***************
*** 266,272 ****
  extern char_u *vimpty_getenv(const char_u *string);	/* in misc2.c */
  #   endif
  #  endif
! #  ifdef FEAT_GUI_W32
  #   include "gui_w32.pro"
  #  endif
  #  ifdef FEAT_GUI_GTK
--- 266,272 ----
  extern char_u *vimpty_getenv(const char_u *string);	/* in misc2.c */
  #   endif
  #  endif
! #  ifdef FEAT_GUI_MSWIN
  #   include "gui_w32.pro"
  #  endif
  #  ifdef FEAT_GUI_GTK
*** ../vim-8.1.0940/src/screen.c	2019-02-16 15:09:21.217946198 +0100
--- src/screen.c	2019-02-17 17:29:18.560788817 +0100
***************
*** 7974,7980 ****
  
      screen_attr = attr;
      if (full_screen
! #ifdef WIN3264
  		    && termcap_active
  #endif
  				       )
--- 7974,7980 ----
  
      screen_attr = attr;
      if (full_screen
! #ifdef MSWIN
  		    && termcap_active
  #endif
  				       )
***************
*** 8081,8087 ****
      int	    do_ME = FALSE;	    /* output T_ME code */
  
      if (screen_attr != 0
! #ifdef WIN3264
  			&& termcap_active
  #endif
  					   )
--- 8081,8087 ----
      int	    do_ME = FALSE;	    /* output T_ME code */
  
      if (screen_attr != 0
! #ifdef MSWIN
  			&& termcap_active
  #endif
  					   )
*** ../vim-8.1.0940/src/search.c	2019-02-16 15:09:21.213946217 +0100
--- src/search.c	2019-02-17 17:29:18.560788817 +0100
***************
*** 1246,1252 ****
      }
      if (options & SEARCH_REV)
      {
! #ifdef WIN32
  	/* There is a bug in the Visual C++ 2.2 compiler which means that
  	 * dirc always ends up being '/' */
  	dirc = (dirc == '/')  ?  '?'  :  '/';
--- 1246,1252 ----
      }
      if (options & SEARCH_REV)
      {
! #ifdef MSWIN
  	/* There is a bug in the Visual C++ 2.2 compiler which means that
  	 * dirc always ends up being '/' */
  	dirc = (dirc == '/')  ?  '?'  :  '/';
*** ../vim-8.1.0940/src/structs.h	2019-02-16 15:09:21.217946198 +0100
--- src/structs.h	2019-02-17 17:29:18.560788817 +0100
***************
*** 1073,1079 ****
  {
      int		vc_type;	/* zero or one of the CONV_ values */
      int		vc_factor;	/* max. expansion factor */
! # ifdef WIN3264
      int		vc_cpfrom;	/* codepage to convert from (CONV_CODEPAGE) */
      int		vc_cpto;	/* codepage to convert to (CONV_CODEPAGE) */
  # endif
--- 1073,1079 ----
  {
      int		vc_type;	/* zero or one of the CONV_ values */
      int		vc_factor;	/* max. expansion factor */
! # ifdef MSWIN
      int		vc_cpfrom;	/* codepage to convert from (CONV_CODEPAGE) */
      int		vc_cpto;	/* codepage to convert to (CONV_CODEPAGE) */
  # endif
***************
*** 1101,1107 ****
  #define CONV_TO_LATIN1		3
  #define CONV_TO_LATIN9		4
  #define CONV_ICONV		5
! #ifdef WIN3264
  # define CONV_CODEPAGE		10	/* codepage -> codepage */
  #endif
  #ifdef MACOS_X
--- 1101,1107 ----
  #define CONV_TO_LATIN1		3
  #define CONV_TO_LATIN9		4
  #define CONV_ICONV		5
! #ifdef MSWIN
  # define CONV_CODEPAGE		10	/* codepage -> codepage */
  #endif
  #ifdef MACOS_X
***************
*** 1187,1193 ****
  
  #ifdef FEAT_NUM64
  /* Use 64-bit Number. */
! # ifdef WIN3264
  #  ifdef PROTO
  typedef long		    varnumber_T;
  typedef unsigned long	    uvarnumber_T;
--- 1187,1193 ----
  
  #ifdef FEAT_NUM64
  /* Use 64-bit Number. */
! # ifdef MSWIN
  #  ifdef PROTO
  typedef long		    varnumber_T;
  typedef unsigned long	    uvarnumber_T;
***************
*** 1543,1549 ****
  #ifdef UNIX
      pid_t	jv_pid;
  #endif
! #ifdef WIN32
      PROCESS_INFORMATION	jv_proc_info;
      HANDLE		jv_job_object;
  #endif
--- 1543,1549 ----
  #ifdef UNIX
      pid_t	jv_pid;
  #endif
! #ifdef MSWIN
      PROCESS_INFORMATION	jv_proc_info;
      HANDLE		jv_job_object;
  #endif
***************
*** 1554,1560 ****
  #ifdef UNIX
      char_u	*jv_termsig;	/* allocated */
  #endif
! #ifdef WIN3264
      char_u	*jv_tty_type;	// allocated
  #endif
      int		jv_exitval;
--- 1554,1560 ----
  #ifdef UNIX
      char_u	*jv_termsig;	/* allocated */
  #endif
! #ifdef MSWIN
      char_u	*jv_tty_type;	// allocated
  #endif
      int		jv_exitval;
***************
*** 1670,1676 ****
       * message when the deadline was set.  If it gets longer (something was
       * received) the deadline is reset. */
      size_t	ch_wait_len;
! #ifdef WIN32
      DWORD	ch_deadline;
  #else
      struct timeval ch_deadline;
--- 1670,1676 ----
       * message when the deadline was set.  If it gets longer (something was
       * received) the deadline is reset. */
      size_t	ch_wait_len;
! #ifdef MSWIN
      DWORD	ch_deadline;
  #else
      struct timeval ch_deadline;
***************
*** 1720,1726 ****
  				/* callback for Netbeans when channel is
  				 * closed */
  
! #ifdef WIN32
      int		ch_named_pipe;	/* using named pipe instead of pty */
  #endif
      char_u	*ch_callback;	/* call when any msg is not handled */
--- 1720,1726 ----
  				/* callback for Netbeans when channel is
  				 * closed */
  
! #ifdef MSWIN
      int		ch_named_pipe;	/* using named pipe instead of pty */
  #endif
      char_u	*ch_callback;	/* call when any msg is not handled */
***************
*** 3225,3231 ****
  #ifdef FEAT_BEVAL_TIP
      BalloonEval *tip;		    /* tooltip for this menu item */
  #endif
! #ifdef FEAT_GUI_W32
      UINT	id;		    /* Id of menu item */
      HMENU	submenu_id;	    /* If this is submenu, add children here */
      HWND	tearoff_handle;	    /* hWnd of tearoff if created */
--- 3225,3231 ----
  #ifdef FEAT_BEVAL_TIP
      BalloonEval *tip;		    /* tooltip for this menu item */
  #endif
! #ifdef FEAT_GUI_MSWIN
      UINT	id;		    /* Id of menu item */
      HMENU	submenu_id;	    /* If this is submenu, add children here */
      HWND	tearoff_handle;	    /* hWnd of tearoff if created */
*** ../vim-8.1.0940/src/syntax.c	2019-01-24 17:18:37.595462334 +0100
--- src/syntax.c	2019-02-17 17:29:18.560788817 +0100
***************
*** 8274,8280 ****
      void
  restore_cterm_colors(void)
  {
! #if defined(WIN3264) && !defined(FEAT_GUI_W32)
      /* Since t_me has been set, this probably means that the user
       * wants to use this as default colors.  Need to reset default
       * background/foreground colors. */
--- 8274,8280 ----
      void
  restore_cterm_colors(void)
  {
! #if defined(MSWIN) && !defined(FEAT_GUI_MSWIN)
      /* Since t_me has been set, this probably means that the user
       * wants to use this as default colors.  Need to reset default
       * background/foreground colors. */
***************
*** 9559,9565 ****
  	at_en.ae_u.cterm.fg_color = sgp->sg_cterm_fg;
  	at_en.ae_u.cterm.bg_color = sgp->sg_cterm_bg;
  # ifdef FEAT_TERMGUICOLORS
! #  ifdef WIN3264
  	{
  	    int id;
  	    guicolor_T fg, bg;
--- 9559,9565 ----
  	at_en.ae_u.cterm.fg_color = sgp->sg_cterm_fg;
  	at_en.ae_u.cterm.bg_color = sgp->sg_cterm_bg;
  # ifdef FEAT_TERMGUICOLORS
! #  ifdef MSWIN
  	{
  	    int id;
  	    guicolor_T fg, bg;
***************
*** 9822,9829 ****
  }
  #endif
  
! #if (defined(WIN3264) \
! 	&& !defined(FEAT_GUI_W32) \
  	&& defined(FEAT_TERMGUICOLORS)) || defined(PROTO)
      void
  syn_id2cterm_bg(int hl_id, int *fgp, int *bgp)
--- 9822,9829 ----
  }
  #endif
  
! #if (defined(MSWIN) \
! 	&& !defined(FEAT_GUI_MSWIN) \
  	&& defined(FEAT_TERMGUICOLORS)) || defined(PROTO)
      void
  syn_id2cterm_bg(int hl_id, int *fgp, int *bgp)
*** ../vim-8.1.0940/src/term.c	2019-02-16 16:47:58.130925240 +0100
--- src/term.c	2019-02-17 17:29:18.560788817 +0100
***************
*** 533,539 ****
      {K_PAGEUP,		"\316I"},
  # endif
  
! # if defined(WIN3264) || defined(ALL_BUILTIN_TCAPS)
  /*
   * These codes are valid for the Win32 Console .  The entries that start with
   * ESC | are translated into console calls in os_win32.c.  The function keys
--- 533,539 ----
      {K_PAGEUP,		"\316I"},
  # endif
  
! # if defined(MSWIN) || defined(ALL_BUILTIN_TCAPS)
  /*
   * These codes are valid for the Win32 Console .  The entries that start with
   * ESC | are translated into console calls in os_win32.c.  The function keys
***************
*** 2036,2042 ****
  	/* termcap failed to report size */
  	/* set defaults, in case ui_get_shellsize() also fails */
  	width = 80;
! #if defined(WIN3264)
  	height = 25;	    /* console is often 25 lines */
  #else
  	height = 24;	    /* most terminals are 24 lines */
--- 2036,2042 ----
  	/* termcap failed to report size */
  	/* set defaults, in case ui_get_shellsize() also fails */
  	width = 80;
! #if defined(MSWIN)
  	height = 25;	    /* console is often 25 lines */
  #else
  	height = 24;	    /* most terminals are 24 lines */
***************
*** 4082,4088 ****
  	return;
      }
  
! #if defined(WIN3264) && !defined(FEAT_GUI)
      s = vim_strnsave(string, (int)STRLEN(string) + 1);
  #else
      s = vim_strsave(string);
--- 4082,4088 ----
  	return;
      }
  
! #if defined(MSWIN) && !defined(FEAT_GUI)
      s = vim_strnsave(string, (int)STRLEN(string) + 1);
  #else
      s = vim_strsave(string);
***************
*** 4097,4103 ****
  	s[0] = term_7to8bit(string);
      }
  
! #if defined(WIN3264) && !defined(FEAT_GUI)
      if (s[0] == K_NUL)
      {
  	STRMOVE(s + 1, s);
--- 4097,4103 ----
  	s[0] = term_7to8bit(string);
      }
  
! #if defined(MSWIN) && !defined(FEAT_GUI)
      if (s[0] == K_NUL)
      {
  	STRMOVE(s + 1, s);
***************
*** 6721,6727 ****
  }
  #endif
  
! #if (defined(WIN3264) && !defined(FEAT_GUI)) || defined(PROTO)
  static char ksme_str[20];
  static char ksmr_str[20];
  static char ksmd_str[20];
--- 6721,6727 ----
  }
  #endif
  
! #if (defined(MSWIN) && !defined(FEAT_GUI)) || defined(PROTO)
  static char ksme_str[20];
  static char ksmr_str[20];
  static char ksmd_str[20];
***************
*** 6917,6923 ****
      /* On MS-Windows an RGB macro is available and it produces 0x00bbggrr color
       * values as used by the MS-Windows GDI api.  It should be used only for
       * MS-Windows GDI builds. */
! # if defined(RGB) && defined(WIN32) && !defined(FEAT_GUI)
  #  undef RGB
  # endif
  # ifndef RGB
--- 6917,6923 ----
      /* On MS-Windows an RGB macro is available and it produces 0x00bbggrr color
       * values as used by the MS-Windows GDI api.  It should be used only for
       * MS-Windows GDI builds. */
! # if defined(RGB) && defined(MSWIN) && !defined(FEAT_GUI)
  #  undef RGB
  # endif
  # ifndef RGB
***************
*** 7085,7091 ****
  }
  #endif
  
! #if (defined(WIN3264) && !defined(FEAT_GUI_W32)) || defined(FEAT_TERMINAL) \
  	|| defined(PROTO)
  static int cube_value[] = {
      0x00, 0x5F, 0x87, 0xAF, 0xD7, 0xFF
--- 7085,7091 ----
  }
  #endif
  
! #if (defined(MSWIN) && !defined(FEAT_GUI_MSWIN)) || defined(FEAT_TERMINAL) \
  	|| defined(PROTO)
  static int cube_value[] = {
      0x00, 0x5F, 0x87, 0xAF, 0xD7, 0xFF
***************
*** 7162,7164 ****
--- 7162,7165 ----
      }
  }
  #endif
+ 
*** ../vim-8.1.0940/src/terminal.c	2019-02-16 13:35:09.841639346 +0100
--- src/terminal.c	2019-02-17 17:29:18.560788817 +0100
***************
*** 66,72 ****
      char_u	*sb_text;	// for tl_scrollback_postponed
  } sb_line_T;
  
! #ifdef WIN3264
  # ifndef HPCON
  #  define HPCON VOID*
  # endif
--- 66,72 ----
      char_u	*sb_text;	// for tl_scrollback_postponed
  } sb_line_T;
  
! #ifdef MSWIN
  # ifndef HPCON
  #  define HPCON VOID*
  # endif
***************
*** 112,118 ****
  
      char_u	*tl_arg0_cmd;	// To format the status bar
  
! #ifdef WIN3264
      void	*tl_winpty_config;
      void	*tl_winpty;
  
--- 112,118 ----
  
      char_u	*tl_arg0_cmd;	// To format the status bar
  
! #ifdef MSWIN
      void	*tl_winpty_config;
      void	*tl_winpty;
  
***************
*** 172,178 ****
  /* Terminal active in terminal_loop(). */
  static term_T *in_terminal_loop = NULL;
  
! #ifdef WIN3264
  static BOOL has_winpty = FALSE;
  static BOOL has_conpty = FALSE;
  #endif
--- 172,178 ----
  /* Terminal active in terminal_loop(). */
  static term_T *in_terminal_loop = NULL;
  
! #ifdef MSWIN
  static BOOL has_winpty = FALSE;
  static BOOL has_conpty = FALSE;
  #endif
***************
*** 324,330 ****
      static void
  setup_job_options(jobopt_T *opt, int rows, int cols)
  {
! #ifndef WIN3264
      /* Win32: Redirecting the job output won't work, thus always connect stdout
       * here. */
      if (!(opt->jo_set & JO_OUT_IO))
--- 324,330 ----
      static void
  setup_job_options(jobopt_T *opt, int rows, int cols)
  {
! #ifndef MSWIN
      /* Win32: Redirecting the job output won't work, thus always connect stdout
       * here. */
      if (!(opt->jo_set & JO_OUT_IO))
***************
*** 337,343 ****
  	opt->jo_set |= JO_OUT_IO + JO_OUT_BUF + JO_OUT_MODIFIABLE;
      }
  
! #ifndef WIN3264
      /* Win32: Redirecting the job output won't work, thus always connect stderr
       * here. */
      if (!(opt->jo_set & JO_ERR_IO))
--- 337,343 ----
  	opt->jo_set |= JO_OUT_IO + JO_OUT_BUF + JO_OUT_MODIFIABLE;
      }
  
! #ifndef MSWIN
      /* Win32: Redirecting the job output won't work, thus always connect stderr
       * here. */
      if (!(opt->jo_set & JO_ERR_IO))
***************
*** 570,576 ****
      curbuf->b_p_ma = FALSE;
  
      set_term_and_win_size(term);
! #ifdef WIN3264
      mch_memmove(orig_opt.jo_io, opt->jo_io, sizeof(orig_opt.jo_io));
  #endif
      setup_job_options(opt, term->tl_rows, term->tl_cols);
--- 570,576 ----
      curbuf->b_p_ma = FALSE;
  
      set_term_and_win_size(term);
! #ifdef MSWIN
      mch_memmove(orig_opt.jo_io, opt->jo_io, sizeof(orig_opt.jo_io));
  #endif
      setup_job_options(opt, term->tl_rows, term->tl_cols);
***************
*** 748,754 ****
  	    vim_free(buf);
  	    *p = ' ';
  	}
! #ifdef WIN3264
  	else if ((int)(p - cmd) == 4 && STRNICMP(cmd, "type", 4) == 0
  								 && ep != NULL)
  	{
--- 748,754 ----
  	    vim_free(buf);
  	    *p = ' ';
  	}
! #ifdef MSWIN
  	else if ((int)(p - cmd) == 4 && STRNICMP(cmd, "type", 4) == 0
  								 && ep != NULL)
  	{
***************
*** 824,830 ****
      if (fprintf(fd, "terminal ++curwin ++cols=%d ++rows=%d ",
  		term->tl_cols, term->tl_rows) < 0)
  	return FAIL;
! #ifdef WIN3264
      if (fprintf(fd, "++type=%s ", term->tl_job->jv_tty_type) < 0)
  	return FAIL;
  #endif
--- 824,830 ----
      if (fprintf(fd, "terminal ++curwin ++cols=%d ++rows=%d ",
  		term->tl_cols, term->tl_rows) < 0)
  	return FAIL;
! #ifdef MSWIN
      if (fprintf(fd, "++type=%s ", term->tl_job->jv_tty_type) < 0)
  	return FAIL;
  #endif
***************
*** 932,938 ****
  	vim_free(term->tl_opencmd);
  	vim_free(term->tl_eof_chars);
  	vim_free(term->tl_arg0_cmd);
! #ifdef WIN3264
  	if (term->tl_out_fd != NULL)
  	    fclose(term->tl_out_fd);
  #endif
--- 932,938 ----
  	vim_free(term->tl_opencmd);
  	vim_free(term->tl_eof_chars);
  	vim_free(term->tl_arg0_cmd);
! #ifdef MSWIN
  	if (term->tl_out_fd != NULL)
  	    fclose(term->tl_out_fd);
  #endif
***************
*** 1027,1033 ****
      size_t	len = STRLEN(msg);
      term_T	*term = buffer->b_term;
  
! #ifdef WIN3264
      /* Win32: Cannot redirect output of the job, intercept it here and write to
       * the file. */
      if (term->tl_out_fd != NULL)
--- 1027,1033 ----
      size_t	len = STRLEN(msg);
      term_T	*term = buffer->b_term;
  
! #ifdef MSWIN
      /* Win32: Cannot redirect output of the job, intercept it here and write to
       * the file. */
      if (term->tl_out_fd != NULL)
***************
*** 1471,1477 ****
      int		empty = (buf->b_ml.ml_flags & ML_EMPTY);
      linenr_T	lnum = buf->b_ml.ml_line_count;
  
! #ifdef WIN3264
      if (!enc_utf8 && enc_codepage > 0)
      {
  	WCHAR   *ret = NULL;
--- 1471,1477 ----
      int		empty = (buf->b_ml.ml_flags & ML_EMPTY);
      linenr_T	lnum = buf->b_ml.ml_line_count;
  
! #ifdef MSWIN
      if (!enc_utf8 && enc_codepage > 0)
      {
  	WCHAR   *ret = NULL;
***************
*** 1875,1881 ****
  
      State = TERMINAL;
      got_int = FALSE;
! #ifdef WIN3264
      ctrl_break_was_pressed = FALSE;
  #endif
      c = vgetc();
--- 1875,1881 ----
  
      State = TERMINAL;
      got_int = FALSE;
! #ifdef MSWIN
      ctrl_break_was_pressed = FALSE;
  #endif
      c = vgetc();
***************
*** 2016,2022 ****
  	for (item = l->lv_first; item != NULL; item = item->li_next)
  	{
  	    char_u *s = tv_get_string(&item->li_tv);
! #ifdef WIN3264
  	    char_u *tmp = s;
  
  	    if (!enc_utf8 && enc_codepage > 0)
--- 2016,2022 ----
  	for (item = l->lv_first; item != NULL; item = item->li_next)
  	{
  	    char_u *s = tv_get_string(&item->li_tv);
! #ifdef MSWIN
  	    char_u *tmp = s;
  
  	    if (!enc_utf8 && enc_codepage > 0)
***************
*** 2036,2042 ****
  #endif
  	    channel_send(curbuf->b_term->tl_job->jv_channel, PART_IN,
  						      s, (int)STRLEN(s), NULL);
! #ifdef WIN3264
  	    if (tmp != s)
  		vim_free(s);
  #endif
--- 2036,2042 ----
  #endif
  	    channel_send(curbuf->b_term->tl_job->jv_channel, PART_IN,
  						      s, (int)STRLEN(s), NULL);
! #ifdef MSWIN
  	    if (tmp != s)
  		vim_free(s);
  #endif
***************
*** 2293,2299 ****
  	}
  #endif
  
! #ifdef WIN3264
  	/* On Windows winpty handles CTRL-C, don't send a CTRL_C_EVENT.
  	 * Use CTRL-BREAK to kill the job. */
  	if (ctrl_break_was_pressed)
--- 2293,2299 ----
  	}
  #endif
  
! #ifdef MSWIN
  	/* On Windows winpty handles CTRL-C, don't send a CTRL_C_EVENT.
  	 * Use CTRL-BREAK to kill the job. */
  	if (ctrl_break_was_pressed)
***************
*** 2370,2376 ****
  		goto theend;
  	    }
  	}
! # ifdef WIN3264
  	if (!enc_utf8 && has_mbyte && c >= 0x80)
  	{
  	    WCHAR   wc;
--- 2370,2376 ----
  		goto theend;
  	    }
  	}
! # ifdef MSWIN
  	if (!enc_utf8 && has_mbyte && c >= 0x80)
  	{
  	    WCHAR   wc;
***************
*** 2719,2725 ****
  	    // Empty corrupted data of winpty
  	    else if (STRNCMP("  - ", (char_u *)value->string, 4) == 0)
  		term->tl_title = NULL;
! #ifdef WIN3264
  	    else if (!enc_utf8 && enc_codepage > 0)
  	    {
  		WCHAR   *ret = NULL;
--- 2719,2725 ----
  	    // Empty corrupted data of winpty
  	    else if (STRNCMP("  - ", (char_u *)value->string, 4) == 0)
  		term->tl_title = NULL;
! #ifdef MSWIN
  	    else if (!enc_utf8 && enc_codepage > 0)
  	    {
  		WCHAR   *ret = NULL;
***************
*** 3072,3078 ****
  
  	    VIM_CLEAR(term->tl_title);
  	    VIM_CLEAR(term->tl_status_text);
! #ifdef WIN3264
  	    if (term->tl_out_fd != NULL)
  	    {
  		fclose(term->tl_out_fd);
--- 3072,3078 ----
  
  	    VIM_CLEAR(term->tl_title);
  	    VIM_CLEAR(term->tl_status_text);
! #ifdef MSWIN
  	    if (term->tl_out_fd != NULL)
  	    {
  		fclose(term->tl_out_fd);
***************
*** 3184,3190 ****
  		    ScreenLinesUC[off] = NUL;
  		}
  	    }
! #ifdef WIN3264
  	    else if (has_mbyte && c >= 0x80)
  	    {
  		char_u	mb[MB_MAXBYTES+1];
--- 3184,3190 ----
  		    ScreenLinesUC[off] = NUL;
  		}
  	    }
! #ifdef MSWIN
  	    else if (has_mbyte && c >= 0x80)
  	    {
  		char_u	mb[MB_MAXBYTES+1];
***************
*** 3557,3563 ****
      }
      else
      {
! #if defined(WIN3264) && !defined(FEAT_GUI_W32)
  	int tmp;
  #endif
  
--- 3557,3563 ----
      }
      else
      {
! #if defined(MSWIN) && !defined(FEAT_GUI_MSWIN)
  	int tmp;
  #endif
  
***************
*** 3565,3571 ****
  	if (cterm_normal_fg_color > 0)
  	{
  	    cterm_color2vterm(cterm_normal_fg_color - 1, fg);
! # if defined(WIN3264) && !defined(FEAT_GUI_W32)
  	    tmp = fg->red;
  	    fg->red = fg->blue;
  	    fg->blue = tmp;
--- 3565,3571 ----
  	if (cterm_normal_fg_color > 0)
  	{
  	    cterm_color2vterm(cterm_normal_fg_color - 1, fg);
! # if defined(MSWIN) && !defined(FEAT_GUI_MSWIN)
  	    tmp = fg->red;
  	    fg->red = fg->blue;
  	    fg->blue = tmp;
***************
*** 3579,3585 ****
  	if (cterm_normal_bg_color > 0)
  	{
  	    cterm_color2vterm(cterm_normal_bg_color - 1, bg);
! # if defined(WIN3264) && !defined(FEAT_GUI_W32)
  	    tmp = bg->red;
  	    bg->red = bg->blue;
  	    bg->blue = tmp;
--- 3579,3585 ----
  	if (cterm_normal_bg_color > 0)
  	{
  	    cterm_color2vterm(cterm_normal_bg_color - 1, bg);
! # if defined(MSWIN) && !defined(FEAT_GUI_MSWIN)
  	    tmp = bg->red;
  	    bg->red = bg->blue;
  	    bg->blue = tmp;
***************
*** 3922,3928 ****
      /* For unix do not use a blinking cursor.  In an xterm this causes the
       * cursor to blink if it's blinking in the xterm.
       * For Windows we respect the system wide setting. */
! #ifdef WIN3264
      if (GetCaretBlinkTime() == INFINITE)
  	value.boolean = 0;
      else
--- 3922,3928 ----
      /* For unix do not use a blinking cursor.  In an xterm this causes the
       * cursor to blink if it's blinking in the xterm.
       * For Windows we respect the system wide setting. */
! #ifdef MSWIN
      if (GetCaretBlinkTime() == INFINITE)
  	value.boolean = 0;
      else
***************
*** 5588,5594 ****
  					(int)STRLEN(term->tl_eof_chars), NULL);
  		channel_send(ch, PART_IN, (char_u *)"\r", 1, NULL);
  	    }
! # ifdef WIN3264
  	    else
  		/* Default: CTRL-D */
  		channel_send(ch, PART_IN, (char_u *)"\004\r", 2, NULL);
--- 5588,5594 ----
  					(int)STRLEN(term->tl_eof_chars), NULL);
  		channel_send(ch, PART_IN, (char_u *)"\r", 1, NULL);
  	    }
! # ifdef MSWIN
  	    else
  		/* Default: CTRL-D */
  		channel_send(ch, PART_IN, (char_u *)"\004\r", 2, NULL);
***************
*** 5604,5610 ****
  }
  #endif
  
! # if defined(WIN3264) || defined(PROTO)
  
  /**************************************
   * 2. MS-Windows implementation.
--- 5604,5610 ----
  }
  #endif
  
! # if defined(MSWIN) || defined(PROTO)
  
  /**************************************
   * 2. MS-Windows implementation.
*** ../vim-8.1.0940/src/ui.c	2019-01-28 22:32:54.891909109 +0100
--- src/ui.c	2019-02-17 17:29:18.560788817 +0100
***************
*** 40,46 ****
      /* Don't output anything in silent mode ("ex -s") unless 'verbose' set */
      if (!(silent_mode && p_verbose == 0))
      {
! #if !defined(WIN3264)
  	char_u	*tofree = NULL;
  
  	if (output_conv.vc_type != CONV_NONE)
--- 40,46 ----
      /* Don't output anything in silent mode ("ex -s") unless 'verbose' set */
      if (!(silent_mode && p_verbose == 0))
      {
! #if !defined(MSWIN)
  	char_u	*tofree = NULL;
  
  	if (output_conv.vc_type != CONV_NONE)
***************
*** 54,60 ****
  
  	mch_write(s, len);
  
! # if !defined(WIN3264)
  	if (output_conv.vc_type != CONV_NONE)
  	    vim_free(tofree);
  # endif
--- 54,60 ----
  
  	mch_write(s, len);
  
! # if !defined(MSWIN)
  	if (output_conv.vc_type != CONV_NONE)
  	    vim_free(tofree);
  # endif
***************
*** 62,68 ****
  #endif
  }
  
! #if defined(UNIX) || defined(VMS) || defined(PROTO) || defined(WIN3264)
  /*
   * When executing an external program, there may be some typed characters that
   * are not consumed by it.  Give them back to ui_inchar() and they are stored
--- 62,68 ----
  #endif
  }
  
! #if defined(UNIX) || defined(VMS) || defined(PROTO) || defined(MSWIN)
  /*
   * When executing an external program, there may be some typed characters that
   * are not consumed by it.  Give them back to ui_inchar() and they are stored
***************
*** 3435,3441 ****
  
  #endif /* FEAT_MOUSE */
  
! #if defined(FEAT_GUI) || defined(WIN3264) || defined(PROTO)
  /*
   * Called when focus changed.  Used for the GUI or for systems where this can
   * be done in the console (Win32).
--- 3435,3441 ----
  
  #endif /* FEAT_MOUSE */
  
! #if defined(FEAT_GUI) || defined(MSWIN) || defined(PROTO)
  /*
   * Called when focus changed.  Used for the GUI or for systems where this can
   * be done in the console (Win32).
*** ../vim-8.1.0940/src/undo.c	2019-01-26 17:28:22.236599060 +0100
--- src/undo.c	2019-02-17 17:29:18.560788817 +0100
***************
*** 645,651 ****
  	u_getbot();
      }
  
! #if !defined(UNIX) && !defined(WIN32)
  	/*
  	 * With Amiga we can't handle big undo's, because
  	 * then u_alloc_line would have to allocate a block larger than 32K
--- 645,651 ----
  	u_getbot();
      }
  
! #if !defined(UNIX) && !defined(MSWIN)
  	/*
  	 * With Amiga we can't handle big undo's, because
  	 * then u_alloc_line would have to allocate a block larger than 32K
***************
*** 1740,1746 ****
      if (!write_ok)
  	semsg(_("E829: write error in undo file: %s"), file_name);
  
! #if defined(WIN3264)
      /* Copy file attributes; for systems where this can only be done after
       * closing the file. */
      if (buf->b_ffname != NULL)
--- 1740,1746 ----
      if (!write_ok)
  	semsg(_("E829: write error in undo file: %s"), file_name);
  
! #if defined(MSWIN)
      /* Copy file attributes; for systems where this can only be done after
       * closing the file. */
      if (buf->b_ffname != NULL)
*** ../vim-8.1.0940/src/version.c	2019-02-17 15:00:48.450637077 +0100
--- src/version.c	2019-02-17 17:32:06.247840630 +0100
***************
*** 222,228 ****
  #else
  	"-digraphs",
  #endif
! #ifdef FEAT_GUI_W32
  # ifdef FEAT_DIRECTX
  	"+directx",
  # else
--- 222,228 ----
  #else
  	"-digraphs",
  #endif
! #ifdef FEAT_GUI_MSWIN
  # ifdef FEAT_DIRECTX
  	"+directx",
  # else
***************
*** 481,487 ****
  #else
  	"-num64",
  #endif
! #ifdef FEAT_GUI_W32
  # ifdef FEAT_OLE
  	"+ole",
  # else
--- 481,487 ----
  #else
  	"-num64",
  #endif
! #ifdef FEAT_GUI_MSWIN
  # ifdef FEAT_OLE
  	"+ole",
  # else
***************
*** 700,706 ****
  	"-viminfo",
  #endif
  	"+vreplace",
! #ifdef WIN3264
  # ifdef FEAT_VTP
  	"+vtp",
  # else
--- 700,706 ----
  	"-viminfo",
  #endif
  	"+vreplace",
! #ifdef MSWIN
  # ifdef FEAT_VTP
  	"+vtp",
  # else
***************
*** 740,746 ****
  #else
  	"-xim",
  #endif
! #ifdef WIN3264
  # ifdef FEAT_XPM_W32
  	"+xpm_w32",
  # else
--- 740,746 ----
  #else
  	"-xim",
  #endif
! #ifdef MSWIN
  # ifdef FEAT_XPM_W32
  	"+xpm_w32",
  # else
***************
*** 2852,2867 ****
       */
      init_longVersion();
      msg(longVersion);
! #ifdef WIN3264
! # ifdef FEAT_GUI_W32
  #  ifdef _WIN64
      msg_puts(_("\nMS-Windows 64-bit GUI version"));
  #  else
      msg_puts(_("\nMS-Windows 32-bit GUI version"));
  #  endif
! # ifdef FEAT_OLE
      msg_puts(_(" with OLE support"));
! # endif
  # else
  #  ifdef _WIN64
      msg_puts(_("\nMS-Windows 64-bit console version"));
--- 2854,2869 ----
       */
      init_longVersion();
      msg(longVersion);
! #ifdef MSWIN
! # ifdef FEAT_GUI_MSWIN
  #  ifdef _WIN64
      msg_puts(_("\nMS-Windows 64-bit GUI version"));
  #  else
      msg_puts(_("\nMS-Windows 32-bit GUI version"));
  #  endif
! #  ifdef FEAT_OLE
      msg_puts(_(" with OLE support"));
! #  endif
  # else
  #  ifdef _WIN64
      msg_puts(_("\nMS-Windows 64-bit console version"));
*** ../vim-8.1.0940/src/vim.h	2019-02-14 14:08:01.178543302 +0100
--- src/vim.h	2019-02-17 17:36:58.154209335 +0100
***************
*** 11,18 ****
  
  #include "protodef.h"
  
! /* use fastcall for Borland, when compiling for Win32 */
! #if defined(__BORLANDC__) && defined(WIN32) && !defined(DEBUG)
  #if defined(FEAT_PERL) || \
      defined(FEAT_PYTHON) || \
      defined(FEAT_PYTHON3) || \
--- 11,27 ----
  
  #include "protodef.h"
  
! // _WIN32 is defined as 1 when the compilation target is 32-bit or 64-bit.
! // Note: If you want to check for 64-bit use the _WIN64 macro.
! #if defined(WIN32) || defined(_WIN32)
! # define MSWIN
! # ifdef FEAT_GUI
! #  define FEAT_GUI_MSWIN
! # endif
! #endif
! 
! // use fastcall for Borland, when compiling for MS-Windows
! #if defined(__BORLANDC__) && defined(MSWIN) && !defined(DEBUG)
  #if defined(FEAT_PERL) || \
      defined(FEAT_PYTHON) || \
      defined(FEAT_PYTHON3) || \
***************
*** 29,35 ****
  # endif
  #endif
  
! #if defined(WIN32) || defined(_WIN64)
  # include "vimio.h"
  #endif
  
--- 38,44 ----
  # endif
  #endif
  
! #ifdef MSWIN
  # include "vimio.h"
  #endif
  
***************
*** 103,109 ****
      || defined(FEAT_GUI_GTK) \
      || defined(FEAT_GUI_ATHENA) \
      || defined(FEAT_GUI_MAC) \
!     || defined(FEAT_GUI_W32) \
      || defined(FEAT_GUI_PHOTON)
  # define FEAT_GUI_ENABLED  /* also defined with NO_X11_INCLUDES */
  # if !defined(FEAT_GUI) && !defined(NO_X11_INCLUDES)
--- 112,118 ----
      || defined(FEAT_GUI_GTK) \
      || defined(FEAT_GUI_ATHENA) \
      || defined(FEAT_GUI_MAC) \
!     || defined(FEAT_GUI_MSWIN) \
      || defined(FEAT_GUI_PHOTON)
  # define FEAT_GUI_ENABLED  /* also defined with NO_X11_INCLUDES */
  # if !defined(FEAT_GUI) && !defined(NO_X11_INCLUDES)
***************
*** 124,145 ****
  # define _CRT_NONSTDC_NO_DEPRECATE
  #endif
  
- #if defined(FEAT_GUI_W32)
- # define FEAT_GUI_MSWIN
- #endif
- #if defined(WIN32) || defined(_WIN64)
- # define MSWIN
- #endif
- /* Practically everything is common to both Win32 and Win64 */
- #if defined(WIN32) || defined(_WIN64)
- # define WIN3264
- #endif
- 
  /*
   * VIM_SIZEOF_INT is used in feature.h, and the system-specific included files
   * need items from feature.h.  Therefore define VIM_SIZEOF_INT here.
   */
! #ifdef WIN3264
  # define VIM_SIZEOF_INT 4
  #endif
  
--- 133,143 ----
  # define _CRT_NONSTDC_NO_DEPRECATE
  #endif
  
  /*
   * VIM_SIZEOF_INT is used in feature.h, and the system-specific included files
   * need items from feature.h.  Therefore define VIM_SIZEOF_INT here.
   */
! #ifdef MSWIN
  # define VIM_SIZEOF_INT 4
  #endif
  
***************
*** 276,282 ****
  # include "os_amiga.h"
  #endif
  
! #ifdef WIN3264
  # include "os_win32.h"
  #endif
  
--- 274,280 ----
  # include "os_amiga.h"
  #endif
  
! #ifdef MSWIN
  # include "os_win32.h"
  #endif
  
***************
*** 456,463 ****
  # include <sys/stat.h>
  #endif
  
! #if defined(HAVE_ERRNO_H) \
! 	|| defined(WIN32) || defined(_WIN64)
  # include <errno.h>
  #endif
  
--- 454,460 ----
  # include <sys/stat.h>
  #endif
  
! #if defined(HAVE_ERRNO_H) || defined(MSWIN)
  # include <errno.h>
  #endif
  
***************
*** 509,515 ****
  #ifndef HAVE_SELECT
  # ifdef HAVE_SYS_POLL_H
  #  include <sys/poll.h>
! # elif defined(WIN32)
  #  define HAVE_SELECT
  # else
  #  ifdef HAVE_POLL_H
--- 506,512 ----
  #ifndef HAVE_SELECT
  # ifdef HAVE_SYS_POLL_H
  #  include <sys/poll.h>
! # elif defined(MSWIN)
  #  define HAVE_SELECT
  # else
  #  ifdef HAVE_POLL_H
***************
*** 1752,1758 ****
  #define MB_MAXBYTES	21
  
  #if (defined(FEAT_PROFILE) || defined(FEAT_RELTIME)) && !defined(PROTO)
! # ifdef WIN3264
  typedef LARGE_INTEGER proftime_T;
  # else
  typedef struct timeval proftime_T;
--- 1749,1755 ----
  #define MB_MAXBYTES	21
  
  #if (defined(FEAT_PROFILE) || defined(FEAT_RELTIME)) && !defined(PROTO)
! # ifdef MSWIN
  typedef LARGE_INTEGER proftime_T;
  # else
  typedef struct timeval proftime_T;
***************
*** 1769,1775 ****
  #ifdef PROTO
  typedef long  time_T;
  #else
! # ifdef WIN3264
  typedef __time64_t  time_T;
  # else
  typedef time_t	    time_T;
--- 1766,1772 ----
  #ifdef PROTO
  typedef long  time_T;
  #else
! # ifdef MSWIN
  typedef __time64_t  time_T;
  # else
  typedef time_t	    time_T;
***************
*** 2005,2011 ****
  # define SELECT_MODE_WORD	1
  # define SELECT_MODE_LINE	2
  
! # ifdef FEAT_GUI_W32
  #  ifdef FEAT_OLE
  #   define WM_OLE (WM_APP+0)
  #  endif
--- 2002,2008 ----
  # define SELECT_MODE_WORD	1
  # define SELECT_MODE_LINE	2
  
! # ifdef FEAT_GUI_MSWIN
  #  ifdef FEAT_OLE
  #   define WM_OLE (WM_APP+0)
  #  endif
***************
*** 2103,2109 ****
  #endif
  
  # if defined(FEAT_EVAL) \
! 	&& (!defined(FEAT_GUI_W32) \
  	     || !(defined(FEAT_MBYTE_IME) || defined(GLOBAL_IME))) \
  	&& !(defined(FEAT_GUI_MAC) && defined(MACOS_CONVERT))
  /* Whether IME is supported by im_get_status() defined in mbyte.c.
--- 2100,2106 ----
  #endif
  
  # if defined(FEAT_EVAL) \
! 	&& (!defined(FEAT_GUI_MSWIN) \
  	     || !(defined(FEAT_MBYTE_IME) || defined(GLOBAL_IME))) \
  	&& !(defined(FEAT_GUI_MAC) && defined(MACOS_CONVERT))
  /* Whether IME is supported by im_get_status() defined in mbyte.c.
***************
*** 2115,2121 ****
  
  #if defined(FEAT_XIM) \
  	|| defined(IME_WITHOUT_XIM) \
! 	|| (defined(FEAT_GUI_W32) \
  	    && (defined(FEAT_MBYTE_IME) || defined(GLOBAL_IME))) \
  	|| defined(FEAT_GUI_MAC)
  /* im_set_active() is available */
--- 2112,2118 ----
  
  #if defined(FEAT_XIM) \
  	|| defined(IME_WITHOUT_XIM) \
! 	|| (defined(FEAT_GUI_MSWIN) \
  	    && (defined(FEAT_MBYTE_IME) || defined(GLOBAL_IME))) \
  	|| defined(FEAT_GUI_MAC)
  /* im_set_active() is available */
***************
*** 2129,2135 ****
  
  /* This must come after including proto.h.
   * For VMS this is defined in macros.h. */
! #if !defined(WIN3264) && !defined(VMS)
  # define mch_open(n, m, p)	open((n), (m), (p))
  # define mch_fopen(n, p)	fopen((n), (p))
  #endif
--- 2126,2132 ----
  
  /* This must come after including proto.h.
   * For VMS this is defined in macros.h. */
! #if !defined(MSWIN) && !defined(VMS)
  # define mch_open(n, m, p)	open((n), (m), (p))
  # define mch_fopen(n, p)	fopen((n), (p))
  #endif
***************
*** 2169,2175 ****
  #endif
  
  /* stop using fastcall for Borland */
! #if defined(__BORLANDC__) && defined(WIN32) && !defined(DEBUG)
   #pragma option -p.
  #endif
  
--- 2166,2172 ----
  #endif
  
  /* stop using fastcall for Borland */
! #if defined(__BORLANDC__) && defined(MSWIN) && !defined(DEBUG)
   #pragma option -p.
  #endif
  
***************
*** 2461,2467 ****
  # define MAX_OPEN_CHANNELS 0
  #endif
  
! #if defined(WIN32)
  # define MAX_NAMED_PIPE_SIZE 65535
  #endif
  
--- 2458,2464 ----
  # define MAX_OPEN_CHANNELS 0
  #endif
  
! #if defined(MSWIN)
  # define MAX_NAMED_PIPE_SIZE 65535
  #endif
  
***************
*** 2579,2585 ****
  # define ELAPSED_FUNC(v) elapsed(&v)
  typedef struct timeval elapsed_T;
  long elapsed(struct timeval *start_tv);
! #elif defined(WIN32)
  # define ELAPSED_TICKCOUNT
  # define ELAPSED_INIT(v) v = GetTickCount()
  # define ELAPSED_FUNC(v) elapsed(v)
--- 2576,2582 ----
  # define ELAPSED_FUNC(v) elapsed(&v)
  typedef struct timeval elapsed_T;
  long elapsed(struct timeval *start_tv);
! #elif defined(MSWIN)
  # define ELAPSED_TICKCOUNT
  # define ELAPSED_INIT(v) v = GetTickCount()
  # define ELAPSED_FUNC(v) elapsed(v)
*** ../vim-8.1.0940/src/vim.rc	2016-08-29 22:42:21.000000000 +0200
--- src/vim.rc	2019-02-17 17:29:18.560788817 +0100
***************
*** 23,29 ****
  //
  IDR_VIM		ICON "vim.ico"
  
! #ifdef FEAT_GUI_W32
  IDR_VIM_ERROR	ICON "vim_error.ico"
  IDR_VIM_ALERT	ICON "vim_alert.ico"
  IDR_VIM_INFO	ICON "vim_info.ico"
--- 23,29 ----
  //
  IDR_VIM		ICON "vim.ico"
  
! #ifdef FEAT_GUI
  IDR_VIM_ERROR	ICON "vim_error.ico"
  IDR_VIM_ALERT	ICON "vim_alert.ico"
  IDR_VIM_INFO	ICON "vim_info.ico"
***************
*** 46,52 ****
  #endif
  
  CREATEPROCESS_MANIFEST_RESOURCE_ID RT_MANIFEST "gvim.exe.mnf"
! #endif // FEAT_GUI_W32
  
  //
  // Type Library
--- 46,52 ----
  #endif
  
  CREATEPROCESS_MANIFEST_RESOURCE_ID RT_MANIFEST "gvim.exe.mnf"
! #endif // FEAT_GUI
  
  //
  // Type Library
*** ../vim-8.1.0940/src/winclip.c	2019-01-24 17:18:37.599462306 +0100
--- src/winclip.c	2019-02-17 17:29:18.560788817 +0100
***************
*** 22,28 ****
   * posix environment.
   */
  #ifdef FEAT_CYGWIN_WIN32_CLIPBOARD
! # define WIN3264
  # define WIN32_LEAN_AND_MEAN
  # include <windows.h>
  # include "winclip.pro"
--- 22,28 ----
   * posix environment.
   */
  #ifdef FEAT_CYGWIN_WIN32_CLIPBOARD
! # define MSWIN
  # define WIN32_LEAN_AND_MEAN
  # include <windows.h>
  # include "winclip.pro"
***************
*** 299,305 ****
      VimClipType_t	metadata = { -1, -1, -1, -1 };
      HGLOBAL		hMem = NULL;
      char_u		*str = NULL;
! #if defined(WIN3264)
      char_u		*to_free = NULL;
  #endif
      HGLOBAL		rawh = NULL;
--- 299,305 ----
      VimClipType_t	metadata = { -1, -1, -1, -1 };
      HGLOBAL		hMem = NULL;
      char_u		*str = NULL;
! #if defined(MSWIN)
      char_u		*to_free = NULL;
  #endif
      HGLOBAL		rawh = NULL;
***************
*** 361,367 ****
      }
      if (str == NULL)
      {
! #if defined(WIN3264)
  	/* Try to get the clipboard in Unicode if it's not an empty string. */
  	if (IsClipboardFormatAvailable(CF_UNICODETEXT) && metadata.ucslen != 0)
  	{
--- 361,367 ----
      }
      if (str == NULL)
      {
! #if defined(MSWIN)
  	/* Try to get the clipboard in Unicode if it's not an empty string. */
  	if (IsClipboardFormatAvailable(CF_UNICODETEXT) && metadata.ucslen != 0)
  	{
***************
*** 417,423 ****
  			    break;
  		}
  
! #if defined(WIN3264)
  		/* The text is in the active codepage.  Convert to
  		 * 'encoding', going through UTF-16. */
  		acp_to_enc(str, str_size, &to_free, &maxlen);
--- 417,423 ----
  			    break;
  		}
  
! #if defined(MSWIN)
  		/* The text is in the active codepage.  Convert to
  		 * 'encoding', going through UTF-16. */
  		acp_to_enc(str, str_size, &to_free, &maxlen);
***************
*** 454,460 ****
      if (rawh != NULL)
  	GlobalUnlock(rawh);
      CloseClipboard();
! #if defined(WIN3264)
      vim_free(to_free);
  #endif
  }
--- 454,460 ----
      if (rawh != NULL)
  	GlobalUnlock(rawh);
      CloseClipboard();
! #if defined(MSWIN)
      vim_free(to_free);
  #endif
  }
***************
*** 471,477 ****
      HGLOBAL		hMemRaw = NULL;
      HGLOBAL		hMem = NULL;
      HGLOBAL		hMemVim = NULL;
! # if defined(WIN3264)
      HGLOBAL		hMemW = NULL;
  # endif
  
--- 471,477 ----
      HGLOBAL		hMemRaw = NULL;
      HGLOBAL		hMem = NULL;
      HGLOBAL		hMemVim = NULL;
! # if defined(MSWIN)
      HGLOBAL		hMemW = NULL;
  # endif
  
***************
*** 508,514 ****
  	    metadata.rawlen = 0;
      }
  
! # if defined(WIN3264)
      {
  	WCHAR		*out;
  	int		len = metadata.txtlen;
--- 508,514 ----
  	    metadata.rawlen = 0;
      }
  
! # if defined(MSWIN)
      {
  	WCHAR		*out;
  	int		len = metadata.txtlen;
***************
*** 590,596 ****
  	{
  	    SetClipboardData(cbd->format, hMemVim);
  	    hMemVim = 0;
! # if defined(WIN3264)
  	    if (hMemW != NULL)
  	    {
  		if (SetClipboardData(CF_UNICODETEXT, hMemW) != NULL)
--- 590,596 ----
  	{
  	    SetClipboardData(cbd->format, hMemVim);
  	    hMemVim = 0;
! # if defined(MSWIN)
  	    if (hMemW != NULL)
  	    {
  		if (SetClipboardData(CF_UNICODETEXT, hMemW) != NULL)
***************
*** 611,617 ****
  	GlobalFree(hMemRaw);
      if (hMem)
  	GlobalFree(hMem);
! # if defined(WIN3264)
      if (hMemW)
  	GlobalFree(hMemW);
  # endif
--- 611,617 ----
  	GlobalFree(hMemRaw);
      if (hMem)
  	GlobalFree(hMem);
! # if defined(MSWIN)
      if (hMemW)
  	GlobalFree(hMemW);
  # endif
***************
*** 746,752 ****
      return enc_str;
  }
  
! #if defined(WIN3264) || defined(PROTO)
  /*
   * Convert from the active codepage to 'encoding'.
   * Input is "str[str_size]".
--- 746,752 ----
      return enc_str;
  }
  
! #if defined(MSWIN) || defined(PROTO)
  /*
   * Convert from the active codepage to 'encoding'.
   * Input is "str[str_size]".
*** ../vim-8.1.0940/src/version.c	2019-02-17 15:00:48.450637077 +0100
--- src/version.c	2019-02-17 17:32:06.247840630 +0100
***************
*** 781,782 ****
--- 781,784 ----
  {   /* Add new patch number below this line */
+ /**/
+     941,
  /**/

-- 
Lower life forms have more fun!

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\  an exciting new programming language -- http://www.Zimbu.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
